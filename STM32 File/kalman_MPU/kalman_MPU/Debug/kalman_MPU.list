
kalman_MPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000912c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  080092c0  080092c0  000192c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009818  08009818  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009818  08009818  00019818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009820  08009820  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009824  08009824  00019824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200001e0  08009a08  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08009a08  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001078d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ca  00000000  00000000  0003099d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00032d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00033b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b44  00000000  00000000  000347c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109c3  00000000  00000000  00056304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6573  00000000  00000000  00066cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d23a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  0012d28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092a4 	.word	0x080092a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080092a4 	.word	0x080092a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <DWT_Init+0x28>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <DWT_Init+0x28>)
 8000eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eba:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <DWT_Init+0x2c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <DWT_Init+0x2c>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000edf0 	.word	0xe000edf0
 8000ed8:	e0001000 	.word	0xe0001000

08000edc <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <micros+0x24>)
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <micros+0x28>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <micros+0x2c>)
 8000eea:	fba1 1303 	umull	r1, r3, r1, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e0001000 	.word	0xe0001000
 8000f04:	20000004 	.word	0x20000004
 8000f08:	431bde83 	.word	0x431bde83

08000f0c <MPU6050_Write_bits>:

void MPU6050_Write(uint8_t Address, uint8_t data){
  HAL_I2C_Mem_Write(&hi2c1, MPU6050, Address, 1, (uint8_t *)&data, 1, 10);
}

void MPU6050_Write_bits(uint8_t Address, uint8_t bitStart, uint8_t length, uint8_t data){
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af04      	add	r7, sp, #16
 8000f12:	4604      	mov	r4, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	460b      	mov	r3, r1
 8000f24:	717b      	strb	r3, [r7, #5]
 8000f26:	4613      	mov	r3, r2
 8000f28:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Read(&hi2c1, MPU6050, Address, 1, (uint8_t *)&tmp, 1, 10);
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <MPU6050_Write_bits+0xfc>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b299      	uxth	r1, r3
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	230a      	movs	r3, #10
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f107 030e 	add.w	r3, r7, #14
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	4830      	ldr	r0, [pc, #192]	; (800100c <MPU6050_Write_bits+0x100>)
 8000f4a:	f001 fc99 	bl	8002880 <HAL_I2C_Mem_Read>
  uint8_t mask = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
  switch(length){
 8000f52:	797b      	ldrb	r3, [r7, #5]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	d82a      	bhi.n	8000fb0 <MPU6050_Write_bits+0xa4>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <MPU6050_Write_bits+0x54>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f81 	.word	0x08000f81
 8000f64:	08000f87 	.word	0x08000f87
 8000f68:	08000f8d 	.word	0x08000f8d
 8000f6c:	08000f93 	.word	0x08000f93
 8000f70:	08000f99 	.word	0x08000f99
 8000f74:	08000f9f 	.word	0x08000f9f
 8000f78:	08000fa5 	.word	0x08000fa5
 8000f7c:	08000fab 	.word	0x08000fab
    case 1: mask = 0x01; break;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e014      	b.n	8000fb0 <MPU6050_Write_bits+0xa4>
    case 2: mask = 0x03; break;
 8000f86:	2303      	movs	r3, #3
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e011      	b.n	8000fb0 <MPU6050_Write_bits+0xa4>
    case 3: mask = 0x07; break;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e00e      	b.n	8000fb0 <MPU6050_Write_bits+0xa4>
    case 4: mask = 0x0F; break;
 8000f92:	230f      	movs	r3, #15
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e00b      	b.n	8000fb0 <MPU6050_Write_bits+0xa4>
    case 5: mask = 0x1F; break;
 8000f98:	231f      	movs	r3, #31
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e008      	b.n	8000fb0 <MPU6050_Write_bits+0xa4>
    case 6: mask = 0x3F; break;
 8000f9e:	233f      	movs	r3, #63	; 0x3f
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e005      	b.n	8000fb0 <MPU6050_Write_bits+0xa4>
    case 7: mask = 0x7F; break;
 8000fa4:	237f      	movs	r3, #127	; 0x7f
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e002      	b.n	8000fb0 <MPU6050_Write_bits+0xa4>
    case 8: mask = 0xFF; break;
 8000faa:	23ff      	movs	r3, #255	; 0xff
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	bf00      	nop
  }
  tmp &= ~(mask << bitStart);
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	b25a      	sxtb	r2, r3
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	73bb      	strb	r3, [r7, #14]
  tmp |= (data << bitStart);
 8000fca:	793a      	ldrb	r2, [r7, #4]
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	b25a      	sxtb	r2, r3
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050, Address, 1, (uint8_t *)&tmp, 1, 10);
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MPU6050_Write_bits+0xfc>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	230a      	movs	r3, #10
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	f107 030e 	add.w	r3, r7, #14
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <MPU6050_Write_bits+0x100>)
 8000ffc:	f001 fb2c 	bl	8002658 <HAL_I2C_Mem_Write>
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	200002e0 	.word	0x200002e0
 800100c:	200001fc 	.word	0x200001fc

08001010 <MPU6050_Read>:

uint8_t MPU6050_Read(uint8_t Address){
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af04      	add	r7, sp, #16
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_I2C_Mem_Read(&hi2c1, MPU6050, Address, 1, (uint8_t *)&data, 1, 10);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MPU6050_Read+0x34>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b299      	uxth	r1, r3
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	b29a      	uxth	r2, r3
 8001024:	230a      	movs	r3, #10
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030f 	add.w	r3, r7, #15
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MPU6050_Read+0x38>)
 8001036:	f001 fc23 	bl	8002880 <HAL_I2C_Mem_Read>
  return data;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002e0 	.word	0x200002e0
 8001048:	200001fc 	.word	0x200001fc

0800104c <init_MPU6050>:

void init_MPU6050(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  while(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050, 10, 1000)!=HAL_OK) {
 8001052:	e005      	b.n	8001060 <init_MPU6050+0x14>
    MPU6050++;
 8001054:	4b25      	ldr	r3, [pc, #148]	; (80010ec <init_MPU6050+0xa0>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <init_MPU6050+0xa0>)
 800105e:	701a      	strb	r2, [r3, #0]
  while(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050, 10, 1000)!=HAL_OK) {
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <init_MPU6050+0xa0>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b299      	uxth	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	220a      	movs	r2, #10
 800106c:	4820      	ldr	r0, [pc, #128]	; (80010f0 <init_MPU6050+0xa4>)
 800106e:	f001 fd21 	bl	8002ab4 <HAL_I2C_IsDeviceReady>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1ed      	bne.n	8001054 <init_MPU6050+0x8>
  }
  printf("MPU6050 I2C Address is 0x%02X(7bit value)\r\n", MPU6050>>1);
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <init_MPU6050+0xa0>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	085b      	lsrs	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4619      	mov	r1, r3
 8001082:	481c      	ldr	r0, [pc, #112]	; (80010f4 <init_MPU6050+0xa8>)
 8001084:	f005 fd5c 	bl	8006b40 <iprintf>

  uint8_t temp = MPU6050_Read(MPU6050_RA_WHO_AM_I);
 8001088:	2075      	movs	r0, #117	; 0x75
 800108a:	f7ff ffc1 	bl	8001010 <MPU6050_Read>
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  printf("Who am I = 0x%02X\r\n", temp);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4619      	mov	r1, r3
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <init_MPU6050+0xac>)
 8001098:	f005 fd52 	bl	8006b40 <iprintf>
  printf("MPU6050 Initialize..... \r\n");
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <init_MPU6050+0xb0>)
 800109e:	f005 fdd5 	bl	8006c4c <puts>
  printf("--------------------------------------------------------\r\n");
 80010a2:	4817      	ldr	r0, [pc, #92]	; (8001100 <init_MPU6050+0xb4>)
 80010a4:	f005 fdd2 	bl	8006c4c <puts>

  HAL_Delay(100);
 80010a8:	2064      	movs	r0, #100	; 0x64
 80010aa:	f000 ff01 	bl	8001eb0 <HAL_Delay>
  /* Power Management 1, SLEEP Diasble*/
  MPU6050_Write_bits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, MPU6050_PWR1_SLEEP_LENGTH, DISABLE);
 80010ae:	2300      	movs	r3, #0
 80010b0:	2201      	movs	r2, #1
 80010b2:	2106      	movs	r1, #6
 80010b4:	206b      	movs	r0, #107	; 0x6b
 80010b6:	f7ff ff29 	bl	8000f0c <MPU6050_Write_bits>
  HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f000 fef8 	bl	8001eb0 <HAL_Delay>
  /* Power Management 1, Internal 8MHz oscillator */
  MPU6050_Write_bits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_INTERNAL);
 80010c0:	2300      	movs	r3, #0
 80010c2:	2203      	movs	r2, #3
 80010c4:	2100      	movs	r1, #0
 80010c6:	206b      	movs	r0, #107	; 0x6b
 80010c8:	f7ff ff20 	bl	8000f0c <MPU6050_Write_bits>
  /* Gyroscope Configuration, ± 250 °/s, 131 LSB/°/s */
  MPU6050_Write_bits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 80010cc:	2300      	movs	r3, #0
 80010ce:	2202      	movs	r2, #2
 80010d0:	2103      	movs	r1, #3
 80010d2:	201b      	movs	r0, #27
 80010d4:	f7ff ff1a 	bl	8000f0c <MPU6050_Write_bits>
  /* Accelerometer Configuration, ± 2g, 16384 LSB/g */
  MPU6050_Write_bits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS_2);
 80010d8:	2300      	movs	r3, #0
 80010da:	2202      	movs	r2, #2
 80010dc:	2103      	movs	r1, #3
 80010de:	201c      	movs	r0, #28
 80010e0:	f7ff ff14 	bl	8000f0c <MPU6050_Write_bits>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200002e0 	.word	0x200002e0
 80010f0:	200001fc 	.word	0x200001fc
 80010f4:	080092c0 	.word	0x080092c0
 80010f8:	080092ec 	.word	0x080092ec
 80010fc:	08009300 	.word	0x08009300
 8001100:	0800931c 	.word	0x0800931c

08001104 <read_MPU6050_data>:

void read_MPU6050_data(void){
 8001104:	b598      	push	{r3, r4, r7, lr}
 8001106:	af00      	add	r7, sp, #0
  Ac_X0 = (MPU6050_Read(MPU6050_RA_ACCEL_XOUT_H)<<8) | MPU6050_Read(MPU6050_RA_ACCEL_XOUT_L);
 8001108:	203b      	movs	r0, #59	; 0x3b
 800110a:	f7ff ff81 	bl	8001010 <MPU6050_Read>
 800110e:	4603      	mov	r3, r0
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21c      	sxth	r4, r3
 8001114:	203c      	movs	r0, #60	; 0x3c
 8001116:	f7ff ff7b 	bl	8001010 <MPU6050_Read>
 800111a:	4603      	mov	r3, r0
 800111c:	b21b      	sxth	r3, r3
 800111e:	4323      	orrs	r3, r4
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <read_MPU6050_data+0xbc>)
 8001124:	801a      	strh	r2, [r3, #0]
  Ac_Y0 = (MPU6050_Read(MPU6050_RA_ACCEL_YOUT_H)<<8) | MPU6050_Read(MPU6050_RA_ACCEL_YOUT_L);
 8001126:	203d      	movs	r0, #61	; 0x3d
 8001128:	f7ff ff72 	bl	8001010 <MPU6050_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21c      	sxth	r4, r3
 8001132:	203e      	movs	r0, #62	; 0x3e
 8001134:	f7ff ff6c 	bl	8001010 <MPU6050_Read>
 8001138:	4603      	mov	r3, r0
 800113a:	b21b      	sxth	r3, r3
 800113c:	4323      	orrs	r3, r4
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <read_MPU6050_data+0xc0>)
 8001142:	801a      	strh	r2, [r3, #0]
  Ac_Z0 = (MPU6050_Read(MPU6050_RA_ACCEL_ZOUT_H)<<8) | MPU6050_Read(MPU6050_RA_ACCEL_ZOUT_L);
 8001144:	203f      	movs	r0, #63	; 0x3f
 8001146:	f7ff ff63 	bl	8001010 <MPU6050_Read>
 800114a:	4603      	mov	r3, r0
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21c      	sxth	r4, r3
 8001150:	2040      	movs	r0, #64	; 0x40
 8001152:	f7ff ff5d 	bl	8001010 <MPU6050_Read>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	4323      	orrs	r3, r4
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <read_MPU6050_data+0xc4>)
 8001160:	801a      	strh	r2, [r3, #0]
  Gy_X0 = (MPU6050_Read(MPU6050_RA_GYRO_XOUT_H)<<8) | MPU6050_Read(MPU6050_RA_GYRO_XOUT_L);
 8001162:	2043      	movs	r0, #67	; 0x43
 8001164:	f7ff ff54 	bl	8001010 <MPU6050_Read>
 8001168:	4603      	mov	r3, r0
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21c      	sxth	r4, r3
 800116e:	2044      	movs	r0, #68	; 0x44
 8001170:	f7ff ff4e 	bl	8001010 <MPU6050_Read>
 8001174:	4603      	mov	r3, r0
 8001176:	b21b      	sxth	r3, r3
 8001178:	4323      	orrs	r3, r4
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <read_MPU6050_data+0xc8>)
 800117e:	801a      	strh	r2, [r3, #0]
  Gy_Y0 = (MPU6050_Read(MPU6050_RA_GYRO_YOUT_H)<<8) | MPU6050_Read(MPU6050_RA_GYRO_YOUT_L);
 8001180:	2045      	movs	r0, #69	; 0x45
 8001182:	f7ff ff45 	bl	8001010 <MPU6050_Read>
 8001186:	4603      	mov	r3, r0
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21c      	sxth	r4, r3
 800118c:	2046      	movs	r0, #70	; 0x46
 800118e:	f7ff ff3f 	bl	8001010 <MPU6050_Read>
 8001192:	4603      	mov	r3, r0
 8001194:	b21b      	sxth	r3, r3
 8001196:	4323      	orrs	r3, r4
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <read_MPU6050_data+0xcc>)
 800119c:	801a      	strh	r2, [r3, #0]
  Gy_Z0 = (MPU6050_Read(MPU6050_RA_GYRO_ZOUT_H)<<8) | MPU6050_Read(MPU6050_RA_GYRO_ZOUT_L);
 800119e:	2047      	movs	r0, #71	; 0x47
 80011a0:	f7ff ff36 	bl	8001010 <MPU6050_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21c      	sxth	r4, r3
 80011aa:	2048      	movs	r0, #72	; 0x48
 80011ac:	f7ff ff30 	bl	8001010 <MPU6050_Read>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4323      	orrs	r3, r4
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <read_MPU6050_data+0xd0>)
 80011ba:	801a      	strh	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	bd98      	pop	{r3, r4, r7, pc}
 80011c0:	200002d4 	.word	0x200002d4
 80011c4:	200002d6 	.word	0x200002d6
 80011c8:	200002d8 	.word	0x200002d8
 80011cc:	200002da 	.word	0x200002da
 80011d0:	200002dc 	.word	0x200002dc
 80011d4:	200002de 	.word	0x200002de

080011d8 <_write>:

int _write(int32_t file, uint8_t *ptr, int32_t len){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, ptr, len, 10);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	230a      	movs	r3, #10
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <_write+0x24>)
 80011ee:	f003 ffed 	bl	80051cc <HAL_UART_Transmit>
  return len;
 80011f2:	687b      	ldr	r3, [r7, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000250 	.word	0x20000250

08001200 <getkalman>:
double P[2][2], K[2] ;
double deg,dgy_y;
double dt;
double val;
double getkalman(double acc, double gyro, double dt)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
 8001206:	ed87 0b04 	vstr	d0, [r7, #16]
 800120a:	ed87 1b02 	vstr	d1, [r7, #8]
 800120e:	ed87 2b00 	vstr	d2, [r7]
	//project the state ahead

	      angle += dt * (gyro - bias) ;
 8001212:	4ba6      	ldr	r3, [pc, #664]	; (80014ac <getkalman+0x2ac>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800121c:	f7ff f834 	bl	8000288 <__aeabi_dsub>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800122c:	f7ff f9e4 	bl	80005f8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	4b9d      	ldr	r3, [pc, #628]	; (80014b0 <getkalman+0x2b0>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f825 	bl	800028c <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	499a      	ldr	r1, [pc, #616]	; (80014b0 <getkalman+0x2b0>)
 8001248:	e9c1 2300 	strd	r2, r3, [r1]

	      //Project the error covariance ahead

	      P[0][0] += dt * (dt * P[1][1] - P[0][1] - P[1][0] + Q_angle) ;
 800124c:	4b99      	ldr	r3, [pc, #612]	; (80014b4 <getkalman+0x2b4>)
 800124e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001252:	4b98      	ldr	r3, [pc, #608]	; (80014b4 <getkalman+0x2b4>)
 8001254:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800125c:	f7ff f9cc 	bl	80005f8 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	4b92      	ldr	r3, [pc, #584]	; (80014b4 <getkalman+0x2b4>)
 800126a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800126e:	f7ff f80b 	bl	8000288 <__aeabi_dsub>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	4b8e      	ldr	r3, [pc, #568]	; (80014b4 <getkalman+0x2b4>)
 800127c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001280:	f7ff f802 	bl	8000288 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	4b8a      	ldr	r3, [pc, #552]	; (80014b8 <getkalman+0x2b8>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7fe fffb 	bl	800028c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012a2:	f7ff f9a9 	bl	80005f8 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7fe ffed 	bl	800028c <__adddf3>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	497f      	ldr	r1, [pc, #508]	; (80014b4 <getkalman+0x2b4>)
 80012b8:	e9c1 2300 	strd	r2, r3, [r1]

	      P[0][1] -= dt * P[1][1] ;
 80012bc:	4b7d      	ldr	r3, [pc, #500]	; (80014b4 <getkalman+0x2b4>)
 80012be:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80012c2:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <getkalman+0x2b4>)
 80012c4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80012c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012cc:	f7ff f994 	bl	80005f8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7fe ffd6 	bl	8000288 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4974      	ldr	r1, [pc, #464]	; (80014b4 <getkalman+0x2b4>)
 80012e2:	e9c1 2302 	strd	r2, r3, [r1, #8]

	      P[1][0] -= dt * P[1][1] ;
 80012e6:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <getkalman+0x2b4>)
 80012e8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80012ec:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <getkalman+0x2b4>)
 80012ee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80012f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012f6:	f7ff f97f 	bl	80005f8 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7fe ffc1 	bl	8000288 <__aeabi_dsub>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	496a      	ldr	r1, [pc, #424]	; (80014b4 <getkalman+0x2b4>)
 800130c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	      P[1][1] += Q_gyro * dt ;
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <getkalman+0x2b4>)
 8001312:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001316:	4b69      	ldr	r3, [pc, #420]	; (80014bc <getkalman+0x2bc>)
 8001318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001320:	f7ff f96a 	bl	80005f8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	f7fe ffae 	bl	800028c <__adddf3>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	495f      	ldr	r1, [pc, #380]	; (80014b4 <getkalman+0x2b4>)
 8001336:	e9c1 2306 	strd	r2, r3, [r1, #24]



	      //Compute the Kalman gain

	      double S = P[0][0] + R_measure ;
 800133a:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <getkalman+0x2b4>)
 800133c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001340:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <getkalman+0x2c0>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7fe ffa1 	bl	800028c <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	      K[0] = P[0][0] / S ;
 8001352:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <getkalman+0x2b4>)
 8001354:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800135c:	f7ff fa76 	bl	800084c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4957      	ldr	r1, [pc, #348]	; (80014c4 <getkalman+0x2c4>)
 8001366:	e9c1 2300 	strd	r2, r3, [r1]

	      K[1] = P[1][0] / S ;
 800136a:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <getkalman+0x2b4>)
 800136c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001370:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001374:	f7ff fa6a 	bl	800084c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4951      	ldr	r1, [pc, #324]	; (80014c4 <getkalman+0x2c4>)
 800137e:	e9c1 2302 	strd	r2, r3, [r1, #8]



	      //Update estimate with measurement z

	      double y = acc - angle ;
 8001382:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <getkalman+0x2b0>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800138c:	f7fe ff7c 	bl	8000288 <__aeabi_dsub>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	      angle += K[0] * y ;
 8001398:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <getkalman+0x2c4>)
 800139a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013a2:	f7ff f929 	bl	80005f8 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <getkalman+0x2b0>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7fe ff6a 	bl	800028c <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	493c      	ldr	r1, [pc, #240]	; (80014b0 <getkalman+0x2b0>)
 80013be:	e9c1 2300 	strd	r2, r3, [r1]

	      bias += K[1] * y ;
 80013c2:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <getkalman+0x2c4>)
 80013c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013cc:	f7ff f914 	bl	80005f8 <__aeabi_dmul>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <getkalman+0x2ac>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7fe ff55 	bl	800028c <__adddf3>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4931      	ldr	r1, [pc, #196]	; (80014ac <getkalman+0x2ac>)
 80013e8:	e9c1 2300 	strd	r2, r3, [r1]



	      //Update the error covariance

	      double P_temp[2] = {P[0][0], P[0][1]} ;
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <getkalman+0x2b4>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <getkalman+0x2b4>)
 80013f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013fc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	      P[0][0] -= K[0] * P_temp[0] ;
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <getkalman+0x2b4>)
 8001402:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <getkalman+0x2c4>)
 8001408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001410:	f7ff f8f2 	bl	80005f8 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4620      	mov	r0, r4
 800141a:	4629      	mov	r1, r5
 800141c:	f7fe ff34 	bl	8000288 <__aeabi_dsub>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4923      	ldr	r1, [pc, #140]	; (80014b4 <getkalman+0x2b4>)
 8001426:	e9c1 2300 	strd	r2, r3, [r1]

	      P[0][1] -= K[0] * P_temp[1] ;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <getkalman+0x2b4>)
 800142c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <getkalman+0x2c4>)
 8001432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800143a:	f7ff f8dd 	bl	80005f8 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe ff1f 	bl	8000288 <__aeabi_dsub>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4919      	ldr	r1, [pc, #100]	; (80014b4 <getkalman+0x2b4>)
 8001450:	e9c1 2302 	strd	r2, r3, [r1, #8]

	      P[1][0] -= K[1] * P_temp[0] ;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <getkalman+0x2b4>)
 8001456:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <getkalman+0x2c4>)
 800145c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001464:	f7ff f8c8 	bl	80005f8 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4620      	mov	r0, r4
 800146e:	4629      	mov	r1, r5
 8001470:	f7fe ff0a 	bl	8000288 <__aeabi_dsub>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	490e      	ldr	r1, [pc, #56]	; (80014b4 <getkalman+0x2b4>)
 800147a:	e9c1 2304 	strd	r2, r3, [r1, #16]

	      P[1][1] -= K[1] * P_temp[1] ;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <getkalman+0x2b4>)
 8001480:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <getkalman+0x2c4>)
 8001486:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800148a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800148e:	f7ff f8b3 	bl	80005f8 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4620      	mov	r0, r4
 8001498:	4629      	mov	r1, r5
 800149a:	f7fe fef5 	bl	8000288 <__aeabi_dsub>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4904      	ldr	r1, [pc, #16]	; (80014b4 <getkalman+0x2b4>)
 80014a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80014a8:	e00e      	b.n	80014c8 <getkalman+0x2c8>
 80014aa:	bf00      	nop
 80014ac:	20000308 	.word	0x20000308
 80014b0:	20000300 	.word	0x20000300
 80014b4:	20000310 	.word	0x20000310
 80014b8:	200002e8 	.word	0x200002e8
 80014bc:	200002f0 	.word	0x200002f0
 80014c0:	200002f8 	.word	0x200002f8
 80014c4:	20000330 	.word	0x20000330



	      return angle ;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <getkalman+0x2e0>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80014d2:	eeb0 0a47 	vmov.f32	s0, s14
 80014d6:	eef0 0a67 	vmov.f32	s1, s15
 80014da:	3738      	adds	r7, #56	; 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdb0      	pop	{r4, r5, r7, pc}
 80014e0:	20000300 	.word	0x20000300

080014e4 <kal_init>:
    	  break ;

    }
}
void kal_init(double angle, double gyro, double measure)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	ed87 0b04 	vstr	d0, [r7, #16]
 80014ee:	ed87 1b02 	vstr	d1, [r7, #8]
 80014f2:	ed87 2b00 	vstr	d2, [r7]
	Q_angle = angle ;
 80014f6:	491f      	ldr	r1, [pc, #124]	; (8001574 <kal_init+0x90>)
 80014f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
	Q_gyro = gyro ;
 8001500:	491d      	ldr	r1, [pc, #116]	; (8001578 <kal_init+0x94>)
 8001502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001506:	e9c1 2300 	strd	r2, r3, [r1]
	R_measure = measure ;
 800150a:	491c      	ldr	r1, [pc, #112]	; (800157c <kal_init+0x98>)
 800150c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001510:	e9c1 2300 	strd	r2, r3, [r1]

	angle = 0 ;
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	bias = 0 ;
 8001520:	4917      	ldr	r1, [pc, #92]	; (8001580 <kal_init+0x9c>)
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	e9c1 2300 	strd	r2, r3, [r1]

	P[0][0] = 0 ;
 800152e:	4915      	ldr	r1, [pc, #84]	; (8001584 <kal_init+0xa0>)
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
	P[0][1] = 0 ;
 800153c:	4911      	ldr	r1, [pc, #68]	; (8001584 <kal_init+0xa0>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	e9c1 2302 	strd	r2, r3, [r1, #8]
	P[1][0] = 0 ;
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <kal_init+0xa0>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9c1 2304 	strd	r2, r3, [r1, #16]
	P[1][1] = 0 ;
 8001558:	490a      	ldr	r1, [pc, #40]	; (8001584 <kal_init+0xa0>)
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200002e8 	.word	0x200002e8
 8001578:	200002f0 	.word	0x200002f0
 800157c:	200002f8 	.word	0x200002f8
 8001580:	20000308 	.word	0x20000308
 8001584:	20000310 	.word	0x20000310

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158e:	f000 fc1a 	bl	8001dc6 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t pasttime = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001596:	f000 f8d9 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f000 f999 	bl	80018d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800159e:	f000 f967 	bl	8001870 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015a2:	f000 f925 	bl	80017f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_MPU6050();
 80015a6:	f7ff fd51 	bl	800104c <init_MPU6050>
  DWT_Init();
 80015aa:	f7ff fc7f 	bl	8000eac <DWT_Init>
  kal_init(0.001, 0.003, 0.03);
 80015ae:	ed9f 2b50 	vldr	d2, [pc, #320]	; 80016f0 <main+0x168>
 80015b2:	ed9f 1b51 	vldr	d1, [pc, #324]	; 80016f8 <main+0x170>
 80015b6:	ed9f 0b52 	vldr	d0, [pc, #328]	; 8001700 <main+0x178>
 80015ba:	f7ff ff93 	bl	80014e4 <kal_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	 static uint16_t cnt=1;
	     HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2108      	movs	r1, #8
 80015c2:	4857      	ldr	r0, [pc, #348]	; (8001720 <main+0x198>)
 80015c4:	f000 ffa0 	bl	8002508 <HAL_GPIO_WritePin>
	     read_MPU6050_data();
 80015c8:	f7ff fd9c 	bl	8001104 <read_MPU6050_data>
	     deg = atan2(Ac_X0,Ac_Z0)*180/M_PI;// acc data to degree data
 80015cc:	4b55      	ldr	r3, [pc, #340]	; (8001724 <main+0x19c>)
 80015ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffa6 	bl	8000524 <__aeabi_i2d>
 80015d8:	4604      	mov	r4, r0
 80015da:	460d      	mov	r5, r1
 80015dc:	4b52      	ldr	r3, [pc, #328]	; (8001728 <main+0x1a0>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff9e 	bl	8000524 <__aeabi_i2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	ec43 2b11 	vmov	d1, r2, r3
 80015f0:	ec45 4b10 	vmov	d0, r4, r5
 80015f4:	f007 fbde 	bl	8008db4 <atan2>
 80015f8:	ec51 0b10 	vmov	r0, r1, d0
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b4a      	ldr	r3, [pc, #296]	; (800172c <main+0x1a4>)
 8001602:	f7fe fff9 	bl	80005f8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	a33e      	add	r3, pc, #248	; (adr r3, 8001708 <main+0x180>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f91a 	bl	800084c <__aeabi_ddiv>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4944      	ldr	r1, [pc, #272]	; (8001730 <main+0x1a8>)
 800161e:	e9c1 2300 	strd	r2, r3, [r1]
	     dgy_y = Gy_Y0/131.;				   // gyro output to
 8001622:	4b44      	ldr	r3, [pc, #272]	; (8001734 <main+0x1ac>)
 8001624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff7b 	bl	8000524 <__aeabi_i2d>
 800162e:	a338      	add	r3, pc, #224	; (adr r3, 8001710 <main+0x188>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f90a 	bl	800084c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	493e      	ldr	r1, [pc, #248]	; (8001738 <main+0x1b0>)
 800163e:	e9c1 2300 	strd	r2, r3, [r1]

	     dt = (double)(micros()-pasttime)/1000000;
 8001642:	f7ff fc4b 	bl	8000edc <micros>
 8001646:	4602      	mov	r2, r0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff59 	bl	8000504 <__aeabi_ui2d>
 8001652:	a331      	add	r3, pc, #196	; (adr r3, 8001718 <main+0x190>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7ff f8f8 	bl	800084c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4936      	ldr	r1, [pc, #216]	; (800173c <main+0x1b4>)
 8001662:	e9c1 2300 	strd	r2, r3, [r1]
	     pasttime = micros();
 8001666:	f7ff fc39 	bl	8000edc <micros>
 800166a:	6078      	str	r0, [r7, #4]
	     val = getkalman(deg, dgy_y, dt);//get kalman data
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <main+0x1a8>)
 800166e:	ed93 7b00 	vldr	d7, [r3]
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <main+0x1b0>)
 8001674:	ed93 6b00 	vldr	d6, [r3]
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <main+0x1b4>)
 800167a:	ed93 5b00 	vldr	d5, [r3]
 800167e:	eeb0 2a45 	vmov.f32	s4, s10
 8001682:	eef0 2a65 	vmov.f32	s5, s11
 8001686:	eeb0 1a46 	vmov.f32	s2, s12
 800168a:	eef0 1a66 	vmov.f32	s3, s13
 800168e:	eeb0 0a47 	vmov.f32	s0, s14
 8001692:	eef0 0a67 	vmov.f32	s1, s15
 8001696:	f7ff fdb3 	bl	8001200 <getkalman>
 800169a:	eeb0 7a40 	vmov.f32	s14, s0
 800169e:	eef0 7a60 	vmov.f32	s15, s1
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <main+0x1b8>)
 80016a4:	ed83 7b00 	vstr	d7, [r3]
	     printf("kalman degree : %5.2f , dt = %5.4f\r\n",val,dt);
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <main+0x1b8>)
 80016aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <main+0x1b4>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	e9cd 2300 	strd	r2, r3, [sp]
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4821      	ldr	r0, [pc, #132]	; (8001744 <main+0x1bc>)
 80016be:	f005 fa3f 	bl	8006b40 <iprintf>

	     HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2108      	movs	r1, #8
 80016c6:	4816      	ldr	r0, [pc, #88]	; (8001720 <main+0x198>)
 80016c8:	f000 ff1e 	bl	8002508 <HAL_GPIO_WritePin>
	     HAL_Delay(5);
 80016cc:	2005      	movs	r0, #5
 80016ce:	f000 fbef 	bl	8001eb0 <HAL_Delay>
	     if(++cnt>20) cnt=20;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <main+0x1c0>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <main+0x1c0>)
 80016dc:	801a      	strh	r2, [r3, #0]
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <main+0x1c0>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	2b14      	cmp	r3, #20
 80016e4:	f67f af6b 	bls.w	80015be <main+0x36>
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <main+0x1c0>)
 80016ea:	2214      	movs	r2, #20
 80016ec:	801a      	strh	r2, [r3, #0]
  {
 80016ee:	e766      	b.n	80015be <main+0x36>
 80016f0:	eb851eb8 	.word	0xeb851eb8
 80016f4:	3f9eb851 	.word	0x3f9eb851
 80016f8:	bc6a7efa 	.word	0xbc6a7efa
 80016fc:	3f689374 	.word	0x3f689374
 8001700:	d2f1a9fc 	.word	0xd2f1a9fc
 8001704:	3f50624d 	.word	0x3f50624d
 8001708:	54442d18 	.word	0x54442d18
 800170c:	400921fb 	.word	0x400921fb
 8001710:	00000000 	.word	0x00000000
 8001714:	40606000 	.word	0x40606000
 8001718:	00000000 	.word	0x00000000
 800171c:	412e8480 	.word	0x412e8480
 8001720:	48000400 	.word	0x48000400
 8001724:	200002d4 	.word	0x200002d4
 8001728:	200002d8 	.word	0x200002d8
 800172c:	40668000 	.word	0x40668000
 8001730:	20000340 	.word	0x20000340
 8001734:	200002dc 	.word	0x200002dc
 8001738:	20000348 	.word	0x20000348
 800173c:	20000350 	.word	0x20000350
 8001740:	20000358 	.word	0x20000358
 8001744:	08009358 	.word	0x08009358
 8001748:	20000000 	.word	0x20000000

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b096      	sub	sp, #88	; 0x58
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	2244      	movs	r2, #68	; 0x44
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f004 fd7e 	bl	800625c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800176e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001772:	f002 fb67 	bl	8003e44 <HAL_PWREx_ControlVoltageScaling>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800177c:	f000 f8f2 	bl	8001964 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001780:	2310      	movs	r3, #16
 8001782:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001784:	2301      	movs	r3, #1
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800178c:	2360      	movs	r3, #96	; 0x60
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001790:	2302      	movs	r3, #2
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001794:	2301      	movs	r3, #1
 8001796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001798:	2301      	movs	r3, #1
 800179a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800179c:	2310      	movs	r3, #16
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017a0:	2307      	movs	r3, #7
 80017a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fb9d 	bl	8003ef0 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80017bc:	f000 f8d2 	bl	8001964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c4:	2303      	movs	r3, #3
 80017c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	2101      	movs	r1, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 ff9d 	bl	8004718 <HAL_RCC_ClockConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017e4:	f000 f8be 	bl	8001964 <Error_Handler>
  }
}
 80017e8:	bf00      	nop
 80017ea:	3758      	adds	r7, #88	; 0x58
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <MX_I2C1_Init+0x74>)
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <MX_I2C1_Init+0x78>)
 80017f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_I2C1_Init+0x74>)
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <MX_I2C1_Init+0x7c>)
 80017fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_I2C1_Init+0x74>)
 8001808:	2201      	movs	r2, #1
 800180a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_I2C1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_I2C1_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_I2C1_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_I2C1_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <MX_I2C1_Init+0x74>)
 800182c:	f000 fe84 	bl	8002538 <HAL_I2C_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001836:	f000 f895 	bl	8001964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <MX_I2C1_Init+0x74>)
 800183e:	f002 fa5b 	bl	8003cf8 <HAL_I2CEx_ConfigAnalogFilter>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001848:	f000 f88c 	bl	8001964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800184c:	2100      	movs	r1, #0
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_I2C1_Init+0x74>)
 8001850:	f002 fa9d 	bl	8003d8e <HAL_I2CEx_ConfigDigitalFilter>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800185a:	f000 f883 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200001fc 	.word	0x200001fc
 8001868:	40005400 	.word	0x40005400
 800186c:	00707cbb 	.word	0x00707cbb

08001870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 8001876:	4a15      	ldr	r2, [pc, #84]	; (80018cc <MX_USART2_UART_Init+0x5c>)
 8001878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 80018b4:	f003 fc3c 	bl	8005130 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018be:	f000 f851 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000250 	.word	0x20000250
 80018cc:	40004400 	.word	0x40004400

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_GPIO_Init+0x8c>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a1c      	ldr	r2, [pc, #112]	; (800195c <MX_GPIO_Init+0x8c>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_GPIO_Init+0x8c>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <MX_GPIO_Init+0x8c>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4a16      	ldr	r2, [pc, #88]	; (800195c <MX_GPIO_Init+0x8c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <MX_GPIO_Init+0x8c>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_GPIO_Init+0x8c>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <MX_GPIO_Init+0x8c>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_GPIO_Init+0x8c>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2108      	movs	r1, #8
 8001932:	480b      	ldr	r0, [pc, #44]	; (8001960 <MX_GPIO_Init+0x90>)
 8001934:	f000 fde8 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001938:	2308      	movs	r3, #8
 800193a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	4619      	mov	r1, r3
 800194e:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_GPIO_Init+0x90>)
 8001950:	f000 fc70 	bl	8002234 <HAL_GPIO_Init>

}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	48000400 	.word	0x48000400

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196c:	e7fe      	b.n	800196c <Error_Handler+0x8>
	...

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_MspInit+0x44>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6613      	str	r3, [r2, #96]	; 0x60
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x44>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b09e      	sub	sp, #120	; 0x78
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2254      	movs	r2, #84	; 0x54
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fc3f 	bl	800625c <memset>
  if(hi2c->Instance==I2C1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_I2C_MspInit+0xc8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d147      	bne.n	8001a78 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019e8:	2340      	movs	r3, #64	; 0x40
 80019ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 f8b3 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a00:	f7ff ffb0 	bl	8001964 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <HAL_I2C_MspInit+0xcc>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_I2C_MspInit+0xcc>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_I2C_MspInit+0xcc>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a20:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f000 fbfa 	bl	8002234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_I2C_MspInit+0xcc>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_I2C_MspInit+0xcc>)
 8001a46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_I2C_MspInit+0xcc>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	201f      	movs	r0, #31
 8001a5e:	f000 fb26 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a62:	201f      	movs	r0, #31
 8001a64:	f000 fb3f 	bl	80020e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2020      	movs	r0, #32
 8001a6e:	f000 fb1e 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a72:	2020      	movs	r0, #32
 8001a74:	f000 fb37 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	3778      	adds	r7, #120	; 0x78
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40005400 	.word	0x40005400
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09e      	sub	sp, #120	; 0x78
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2254      	movs	r2, #84	; 0x54
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fbd7 	bl	800625c <memset>
  if(huart->Instance==USART2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <HAL_UART_MspInit+0xdc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d150      	bne.n	8001b5a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 f84b 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ad0:	f7ff ff48 	bl	8001964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_UART_MspInit+0xe0>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <HAL_UART_MspInit+0xe0>)
 8001ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_UART_MspInit+0xe0>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_UART_MspInit+0xe0>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_UART_MspInit+0xe0>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_UART_MspInit+0xe0>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b04:	2304      	movs	r3, #4
 8001b06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b14:	2307      	movs	r3, #7
 8001b16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001b18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f000 fb87 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f000 fb75 	bl	8002234 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2026      	movs	r0, #38	; 0x26
 8001b50:	f000 faad 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b54:	2026      	movs	r0, #38	; 0x26
 8001b56:	f000 fac6 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3778      	adds	r7, #120	; 0x78
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40004400 	.word	0x40004400
 8001b68:	40021000 	.word	0x40021000

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f95a 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <I2C1_EV_IRQHandler+0x10>)
 8001bc6:	f001 f87c 	bl	8002cc2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001fc 	.word	0x200001fc

08001bd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <I2C1_ER_IRQHandler+0x10>)
 8001bda:	f001 f88c 	bl	8002cf6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200001fc 	.word	0x200001fc

08001be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <USART2_IRQHandler+0x10>)
 8001bee:	f003 fb81 	bl	80052f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000250 	.word	0x20000250

08001bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_kill>:

int _kill(int pid, int sig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c16:	f004 faf7 	bl	8006208 <__errno>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2216      	movs	r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_exit>:

void _exit (int status)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe7 	bl	8001c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c3e:	e7fe      	b.n	8001c3e <_exit+0x12>

08001c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e00a      	b.n	8001c68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c52:	f3af 8000 	nop.w
 8001c56:	4601      	mov	r1, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf0      	blt.n	8001c52 <_read+0x12>
  }

  return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_isatty>:

int _isatty(int file)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f004 fa78 	bl	8006208 <__errno>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <_sbrk+0x64>)
 8001d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20010000 	.word	0x20010000
 8001d44:	00000400 	.word	0x00000400
 8001d48:	20000360 	.word	0x20000360
 8001d4c:	20000378 	.word	0x20000378

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff ffea 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <LoopForever+0xe>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <LoopForever+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f004 fa37 	bl	8006214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da6:	f7ff fbef 	bl	8001588 <main>

08001daa <LoopForever>:

LoopForever:
    b LoopForever
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001db8:	08009828 	.word	0x08009828
  ldr r2, =_sbss
 8001dbc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001dc0:	20000378 	.word	0x20000378

08001dc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_IRQHandler>

08001dc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f961 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f000 f80e 	bl	8001df8 <HAL_InitTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	71fb      	strb	r3, [r7, #7]
 8001de6:	e001      	b.n	8001dec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de8:	f7ff fdc2 	bl	8001970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dec:	79fb      	ldrb	r3, [r7, #7]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_InitTick+0x70>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f96d 	bl	8002102 <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d809      	bhi.n	8001e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f000 f937 	bl	80020ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_InitTick+0x74>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e004      	b.n	8001e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e001      	b.n	8001e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	20000008 	.word	0x20000008

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000364 	.word	0x20000364

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000364 	.word	0x20000364

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000000c 	.word	0x2000000c

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff3e 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d008      	beq.n	8002144 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2204      	movs	r2, #4
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e022      	b.n	800218a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 020e 	bic.w	r2, r2, #14
 8002152:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f003 021c 	and.w	r2, r3, #28
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f202 	lsl.w	r2, r1, r2
 8002176:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d005      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2204      	movs	r2, #4
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e029      	b.n	800220e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 020e 	bic.w	r2, r2, #14
 80021c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0201 	bic.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f003 021c 	and.w	r2, r3, #28
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
    }
  }
  return status;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002226:	b2db      	uxtb	r3, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002242:	e148      	b.n	80024d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 813a 	beq.w	80024d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d005      	beq.n	8002274 <HAL_GPIO_Init+0x40>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d130      	bne.n	80022d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022aa:	2201      	movs	r2, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 0201 	and.w	r2, r3, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d017      	beq.n	8002312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d123      	bne.n	8002366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	6939      	ldr	r1, [r7, #16]
 8002362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8094 	beq.w	80024d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a8:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <HAL_GPIO_Init+0x2c0>)
 80023aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ac:	4a51      	ldr	r2, [pc, #324]	; (80024f4 <HAL_GPIO_Init+0x2c0>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6613      	str	r3, [r2, #96]	; 0x60
 80023b4:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <HAL_GPIO_Init+0x2c0>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023c0:	4a4d      	ldr	r2, [pc, #308]	; (80024f8 <HAL_GPIO_Init+0x2c4>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023ea:	d00d      	beq.n	8002408 <HAL_GPIO_Init+0x1d4>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a43      	ldr	r2, [pc, #268]	; (80024fc <HAL_GPIO_Init+0x2c8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <HAL_GPIO_Init+0x1d0>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a42      	ldr	r2, [pc, #264]	; (8002500 <HAL_GPIO_Init+0x2cc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d101      	bne.n	8002400 <HAL_GPIO_Init+0x1cc>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e004      	b.n	800240a <HAL_GPIO_Init+0x1d6>
 8002400:	2307      	movs	r3, #7
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x1d6>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_GPIO_Init+0x1d6>
 8002408:	2300      	movs	r3, #0
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	4093      	lsls	r3, r2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800241a:	4937      	ldr	r1, [pc, #220]	; (80024f8 <HAL_GPIO_Init+0x2c4>)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800244c:	4a2d      	ldr	r2, [pc, #180]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002476:	4a23      	ldr	r2, [pc, #140]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a0:	4a18      	ldr	r2, [pc, #96]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f47f aeaf 	bne.w	8002244 <HAL_GPIO_Init+0x10>
  }
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	48000400 	.word	0x48000400
 8002500:	48000800 	.word	0x48000800
 8002504:	40010400 	.word	0x40010400

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002524:	e002      	b.n	800252c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e081      	b.n	800264e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fa2a 	bl	80019b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	; 0x24
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002588:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002598:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	e006      	b.n	80025c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d104      	bne.n	80025d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69d9      	ldr	r1, [r3, #28]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	460b      	mov	r3, r1
 800266c:	813b      	strh	r3, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b20      	cmp	r3, #32
 800267c:	f040 80f9 	bne.w	8002872 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_I2C_Mem_Write+0x34>
 8002686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0ed      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2C_Mem_Write+0x4e>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e0e6      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ae:	f7ff fbf3 	bl	8001e98 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2319      	movs	r3, #25
 80026ba:	2201      	movs	r2, #1
 80026bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f001 f8e0 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d1      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2221      	movs	r2, #33	; 0x21
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f8:	88f8      	ldrh	r0, [r7, #6]
 80026fa:	893a      	ldrh	r2, [r7, #8]
 80026fc:	8979      	ldrh	r1, [r7, #10]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4603      	mov	r3, r0
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fc99 	bl	8003040 <I2C_RequestMemoryWrite>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0a9      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2bff      	cmp	r3, #255	; 0xff
 8002728:	d90e      	bls.n	8002748 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	b2da      	uxtb	r2, r3
 8002736:	8979      	ldrh	r1, [r7, #10]
 8002738:	2300      	movs	r3, #0
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f001 fa49 	bl	8003bd8 <I2C_TransferConfig>
 8002746:	e00f      	b.n	8002768 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	b2da      	uxtb	r2, r3
 8002758:	8979      	ldrh	r1, [r7, #10]
 800275a:	2300      	movs	r3, #0
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f001 fa38 	bl	8003bd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f001 f8ca 	bl	8003906 <I2C_WaitOnTXISFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e07b      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d034      	beq.n	8002820 <HAL_I2C_Mem_Write+0x1c8>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d130      	bne.n	8002820 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f001 f85c 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e04d      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2bff      	cmp	r3, #255	; 0xff
 80027e0:	d90e      	bls.n	8002800 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	22ff      	movs	r2, #255	; 0xff
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	8979      	ldrh	r1, [r7, #10]
 80027f0:	2300      	movs	r3, #0
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f001 f9ed 	bl	8003bd8 <I2C_TransferConfig>
 80027fe:	e00f      	b.n	8002820 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	b2da      	uxtb	r2, r3
 8002810:	8979      	ldrh	r1, [r7, #10]
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f001 f9dc 	bl	8003bd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d19e      	bne.n	8002768 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f001 f8a9 	bl	8003986 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e01a      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2220      	movs	r2, #32
 8002844:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_I2C_Mem_Write+0x224>)
 8002852:	400b      	ands	r3, r1
 8002854:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	fe00e800 	.word	0xfe00e800

08002880 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	460b      	mov	r3, r1
 8002894:	813b      	strh	r3, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	f040 80fd 	bne.w	8002aa2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_I2C_Mem_Read+0x34>
 80028ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0f1      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Mem_Read+0x4e>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e0ea      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028d6:	f7ff fadf 	bl	8001e98 <HAL_GetTick>
 80028da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2319      	movs	r3, #25
 80028e2:	2201      	movs	r2, #1
 80028e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 ffcc 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d5      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2222      	movs	r2, #34	; 0x22
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2240      	movs	r2, #64	; 0x40
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002920:	88f8      	ldrh	r0, [r7, #6]
 8002922:	893a      	ldrh	r2, [r7, #8]
 8002924:	8979      	ldrh	r1, [r7, #10]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	4603      	mov	r3, r0
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fbd9 	bl	80030e8 <I2C_RequestMemoryRead>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0ad      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	d90e      	bls.n	8002970 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	b2da      	uxtb	r2, r3
 800295e:	8979      	ldrh	r1, [r7, #10]
 8002960:	4b52      	ldr	r3, [pc, #328]	; (8002aac <HAL_I2C_Mem_Read+0x22c>)
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f001 f935 	bl	8003bd8 <I2C_TransferConfig>
 800296e:	e00f      	b.n	8002990 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	b2da      	uxtb	r2, r3
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <HAL_I2C_Mem_Read+0x22c>)
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f001 f924 	bl	8003bd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	2200      	movs	r2, #0
 8002998:	2104      	movs	r1, #4
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 ff73 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07c      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d034      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x1d0>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d130      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 ff44 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04d      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d90e      	bls.n	8002a30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	8979      	ldrh	r1, [r7, #10]
 8002a20:	2300      	movs	r3, #0
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f001 f8d5 	bl	8003bd8 <I2C_TransferConfig>
 8002a2e:	e00f      	b.n	8002a50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	8979      	ldrh	r1, [r7, #10]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f001 f8c4 	bl	8003bd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d19a      	bne.n	8002990 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 ff91 	bl	8003986 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e01a      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2220      	movs	r2, #32
 8002a74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_I2C_Mem_Read+0x230>)
 8002a82:	400b      	ands	r3, r1
 8002a84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	80002400 	.word	0x80002400
 8002ab0:	fe00e800 	.word	0xfe00e800

08002ab4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	f040 80f1 	bne.w	8002cb8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae4:	d101      	bne.n	8002aea <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e0e7      	b.n	8002cba <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_IsDeviceReady+0x44>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0e0      	b.n	8002cba <HAL_I2C_IsDeviceReady+0x206>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_I2C_IsDeviceReady+0x72>
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b24:	e004      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x7c>
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002b36:	f7ff f9af 	bl	8001e98 <HAL_GetTick>
 8002b3a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b68:	e034      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d01a      	beq.n	8002ba8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7ff f991 	bl	8001e98 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <HAL_I2C_IsDeviceReady+0xd4>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e088      	b.n	8002cba <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002bd4:	7ffb      	ldrb	r3, [r7, #31]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_I2C_IsDeviceReady+0x12c>
 8002bda:	7fbb      	ldrb	r3, [r7, #30]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0c4      	beq.n	8002b6a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d01a      	beq.n	8002c24 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fe44 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e058      	b.n	8002cba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e04a      	b.n	8002cba <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fe29 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e03d      	b.n	8002cba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2210      	movs	r2, #16
 8002c44:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d118      	bne.n	8002c88 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c64:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2120      	movs	r1, #32
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fe08 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e01c      	b.n	8002cba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2220      	movs	r2, #32
 8002c86:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	f63f af3b 	bhi.w	8002b0e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	09db      	lsrs	r3, r3, #7
 8002d1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	09db      	lsrs	r3, r3, #7
 8002d4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f043 0208 	orr.w	r2, r3, #8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d68:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	0a5b      	lsrs	r3, r3, #9
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	09db      	lsrs	r3, r3, #7
 8002d7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d96:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 030b 	and.w	r3, r3, #11
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002da8:	68f9      	ldr	r1, [r7, #12]
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fc32 	bl	8003614 <I2C_ITError>
  }
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <I2C_Slave_ISR_IT+0x24>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0ec      	b.n	8003036 <I2C_Slave_ISR_IT+0x1fe>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e7c:	6939      	ldr	r1, [r7, #16]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fa68 	bl	8003354 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d04d      	beq.n	8002f2c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d047      	beq.n	8002f2c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d128      	bne.n	8002ef8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b28      	cmp	r3, #40	; 0x28
 8002eb0:	d108      	bne.n	8002ec4 <I2C_Slave_ISR_IT+0x8c>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb8:	d104      	bne.n	8002ec4 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002eba:	6939      	ldr	r1, [r7, #16]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fb53 	bl	8003568 <I2C_ITListenCplt>
 8002ec2:	e032      	b.n	8002f2a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b29      	cmp	r3, #41	; 0x29
 8002ece:	d10e      	bne.n	8002eee <I2C_Slave_ISR_IT+0xb6>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ed6:	d00a      	beq.n	8002eee <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2210      	movs	r2, #16
 8002ede:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fc8e 	bl	8003802 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f9d6 	bl	8003298 <I2C_ITSlaveSeqCplt>
 8002eec:	e01d      	b.n	8002f2a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ef6:	e096      	b.n	8003026 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <I2C_Slave_ISR_IT+0xe4>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f18:	f040 8085 	bne.w	8003026 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	4619      	mov	r1, r3
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fb76 	bl	8003614 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f28:	e07d      	b.n	8003026 <I2C_Slave_ISR_IT+0x1ee>
 8002f2a:	e07c      	b.n	8003026 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d030      	beq.n	8002f9a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02a      	beq.n	8002f9a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d14f      	bne.n	800302a <I2C_Slave_ISR_IT+0x1f2>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f90:	d04b      	beq.n	800302a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f980 	bl	8003298 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f98:	e047      	b.n	800302a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002fb2:	6939      	ldr	r1, [r7, #16]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8eb 	bl	8003190 <I2C_ITAddrCplt>
 8002fba:	e037      	b.n	800302c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d031      	beq.n	800302c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02b      	beq.n	800302c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d018      	beq.n	8003010 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
 800300e:	e00d      	b.n	800302c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003016:	d002      	beq.n	800301e <I2C_Slave_ISR_IT+0x1e6>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f93a 	bl	8003298 <I2C_ITSlaveSeqCplt>
 8003024:	e002      	b.n	800302c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800302a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	817b      	strh	r3, [r7, #10]
 8003052:	460b      	mov	r3, r1
 8003054:	813b      	strh	r3, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	8979      	ldrh	r1, [r7, #10]
 8003060:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <I2C_RequestMemoryWrite+0xa4>)
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fdb5 	bl	8003bd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	69b9      	ldr	r1, [r7, #24]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fc47 	bl	8003906 <I2C_WaitOnTXISFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e02c      	b.n	80030dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003088:	893b      	ldrh	r3, [r7, #8]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	629a      	str	r2, [r3, #40]	; 0x28
 8003092:	e015      	b.n	80030c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	b29b      	uxth	r3, r3
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	69b9      	ldr	r1, [r7, #24]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fc2d 	bl	8003906 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e012      	b.n	80030dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fbdb 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	80002000 	.word	0x80002000

080030e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	4608      	mov	r0, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	461a      	mov	r2, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	817b      	strh	r3, [r7, #10]
 80030fa:	460b      	mov	r3, r1
 80030fc:	813b      	strh	r3, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	8979      	ldrh	r1, [r7, #10]
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <I2C_RequestMemoryRead+0xa4>)
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2300      	movs	r3, #0
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fd62 	bl	8003bd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	69b9      	ldr	r1, [r7, #24]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fbf4 	bl	8003906 <I2C_WaitOnTXISFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e02c      	b.n	8003182 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d105      	bne.n	800313a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800312e:	893b      	ldrh	r3, [r7, #8]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
 8003138:	e015      	b.n	8003166 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800313a:	893b      	ldrh	r3, [r7, #8]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	b29b      	uxth	r3, r3
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fbda 	bl	8003906 <I2C_WaitOnTXISFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e012      	b.n	8003182 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800315c:	893b      	ldrh	r3, [r7, #8]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2200      	movs	r2, #0
 800316e:	2140      	movs	r1, #64	; 0x40
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fb88 	bl	8003886 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	80002000 	.word	0x80002000

08003190 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031a6:	2b28      	cmp	r3, #40	; 0x28
 80031a8:	d16a      	bne.n	8003280 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031c8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031e4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d138      	bne.n	8003260 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80031ee:	897b      	ldrh	r3, [r7, #10]
 80031f0:	09db      	lsrs	r3, r3, #7
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	89bb      	ldrh	r3, [r7, #12]
 80031f6:	4053      	eors	r3, r2
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f003 0306 	and.w	r3, r3, #6
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d11c      	bne.n	800323c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	2b02      	cmp	r3, #2
 8003216:	d13b      	bne.n	8003290 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2208      	movs	r2, #8
 8003224:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800322e:	89ba      	ldrh	r2, [r7, #12]
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fdd3 	bl	8002de0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800323a:	e029      	b.n	8003290 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800323c:	893b      	ldrh	r3, [r7, #8]
 800323e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fcf9 	bl	8003c3c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003252:	89ba      	ldrh	r2, [r7, #12]
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fdc1 	bl	8002de0 <HAL_I2C_AddrCallback>
}
 800325e:	e017      	b.n	8003290 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fce9 	bl	8003c3c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003272:	89ba      	ldrh	r2, [r7, #12]
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fdb1 	bl	8002de0 <HAL_I2C_AddrCallback>
}
 800327e:	e007      	b.n	8003290 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2208      	movs	r2, #8
 8003286:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0b9b      	lsrs	r3, r3, #14
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e00d      	b.n	80032ea <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	0bdb      	lsrs	r3, r3, #15
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b29      	cmp	r3, #41	; 0x29
 80032f4:	d112      	bne.n	800331c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2228      	movs	r2, #40	; 0x28
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2221      	movs	r2, #33	; 0x21
 8003302:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003304:	2101      	movs	r1, #1
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fc98 	bl	8003c3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fd4f 	bl	8002db8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800331a:	e017      	b.n	800334c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b2a      	cmp	r3, #42	; 0x2a
 8003326:	d111      	bne.n	800334c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2228      	movs	r2, #40	; 0x28
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2222      	movs	r2, #34	; 0x22
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003336:	2102      	movs	r1, #2
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fc7f 	bl	8003c3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff fd40 	bl	8002dcc <HAL_I2C_SlaveRxCpltCallback>
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003370:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2220      	movs	r2, #32
 8003378:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b21      	cmp	r3, #33	; 0x21
 800337e:	d002      	beq.n	8003386 <I2C_ITSlaveCplt+0x32>
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b29      	cmp	r3, #41	; 0x29
 8003384:	d108      	bne.n	8003398 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003386:	f248 0101 	movw	r1, #32769	; 0x8001
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fc56 	bl	8003c3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2221      	movs	r2, #33	; 0x21
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
 8003396:	e00d      	b.n	80033b4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b22      	cmp	r3, #34	; 0x22
 800339c:	d002      	beq.n	80033a4 <I2C_ITSlaveCplt+0x50>
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b2a      	cmp	r3, #42	; 0x2a
 80033a2:	d107      	bne.n	80033b4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80033a4:	f248 0102 	movw	r1, #32770	; 0x8002
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fc47 	bl	8003c3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2222      	movs	r2, #34	; 0x22
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b64      	ldr	r3, [pc, #400]	; (8003560 <I2C_ITSlaveCplt+0x20c>)
 80033d0:	400b      	ands	r3, r1
 80033d2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fa14 	bl	8003802 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	0b9b      	lsrs	r3, r3, #14
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d013      	beq.n	800340e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d020      	beq.n	8003440 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800340c:	e018      	b.n	8003440 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	0bdb      	lsrs	r3, r3, #15
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003428:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0304 	bic.w	r3, r3, #4
 8003452:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d010      	beq.n	80034dc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8a7 	bl	8003614 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b28      	cmp	r3, #40	; 0x28
 80034d0:	d141      	bne.n	8003556 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80034d2:	6979      	ldr	r1, [r7, #20]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f847 	bl	8003568 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034da:	e03c      	b.n	8003556 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e4:	d014      	beq.n	8003510 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fed6 	bl	8003298 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <I2C_ITSlaveCplt+0x210>)
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fc77 	bl	8002dfc <HAL_I2C_ListenCpltCallback>
}
 800350e:	e022      	b.n	8003556 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b22      	cmp	r3, #34	; 0x22
 800351a:	d10e      	bne.n	800353a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fc4a 	bl	8002dcc <HAL_I2C_SlaveRxCpltCallback>
}
 8003538:	e00d      	b.n	8003556 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fc31 	bl	8002db8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	fe00e800 	.word	0xfe00e800
 8003564:	ffff0000 	.word	0xffff0000

08003568 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a26      	ldr	r2, [pc, #152]	; (8003610 <I2C_ITListenCplt+0xa8>)
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d022      	beq.n	80035e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f043 0204 	orr.w	r2, r3, #4
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035e6:	f248 0103 	movw	r1, #32771	; 0x8003
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fb26 	bl	8003c3c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2210      	movs	r2, #16
 80035f6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fbfb 	bl	8002dfc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	ffff0000 	.word	0xffff0000

08003614 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <I2C_ITError+0x194>)
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	2b28      	cmp	r3, #40	; 0x28
 800364a:	d005      	beq.n	8003658 <I2C_ITError+0x44>
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b29      	cmp	r3, #41	; 0x29
 8003650:	d002      	beq.n	8003658 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b2a      	cmp	r3, #42	; 0x2a
 8003656:	d10b      	bne.n	8003670 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003658:	2103      	movs	r1, #3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 faee 	bl	8003c3c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2228      	movs	r2, #40	; 0x28
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a50      	ldr	r2, [pc, #320]	; (80037ac <I2C_ITError+0x198>)
 800366c:	635a      	str	r2, [r3, #52]	; 0x34
 800366e:	e011      	b.n	8003694 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003670:	f248 0103 	movw	r1, #32771	; 0x8003
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fae1 	bl	8003c3c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b60      	cmp	r3, #96	; 0x60
 8003684:	d003      	beq.n	800368e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d039      	beq.n	8003716 <I2C_ITError+0x102>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b11      	cmp	r3, #17
 80036a6:	d002      	beq.n	80036ae <I2C_ITError+0x9a>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b21      	cmp	r3, #33	; 0x21
 80036ac:	d133      	bne.n	8003716 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036bc:	d107      	bne.n	80036ce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fda0 	bl	8002218 <HAL_DMA_GetState>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d017      	beq.n	800370e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	4a33      	ldr	r2, [pc, #204]	; (80037b0 <I2C_ITError+0x19c>)
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fd4f 	bl	8002196 <HAL_DMA_Abort_IT>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d04d      	beq.n	800379a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003708:	4610      	mov	r0, r2
 800370a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800370c:	e045      	b.n	800379a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f850 	bl	80037b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003714:	e041      	b.n	800379a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d039      	beq.n	8003792 <I2C_ITError+0x17e>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b12      	cmp	r3, #18
 8003722:	d002      	beq.n	800372a <I2C_ITError+0x116>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b22      	cmp	r3, #34	; 0x22
 8003728:	d133      	bne.n	8003792 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003738:	d107      	bne.n	800374a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003748:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fd62 	bl	8002218 <HAL_DMA_GetState>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d017      	beq.n	800378a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <I2C_ITError+0x19c>)
 8003760:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fd11 	bl	8002196 <HAL_DMA_Abort_IT>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d011      	beq.n	800379e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003784:	4610      	mov	r0, r2
 8003786:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003788:	e009      	b.n	800379e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f812 	bl	80037b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003790:	e005      	b.n	800379e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f80e 	bl	80037b4 <I2C_TreatErrorCallback>
  }
}
 8003798:	e002      	b.n	80037a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800379e:	bf00      	nop
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	ffff0000 	.word	0xffff0000
 80037ac:	08002e39 	.word	0x08002e39
 80037b0:	0800384b 	.word	0x0800384b

080037b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b60      	cmp	r3, #96	; 0x60
 80037c6:	d10e      	bne.n	80037e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fb20 	bl	8002e24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037e4:	e009      	b.n	80037fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fb0b 	bl	8002e10 <HAL_I2C_ErrorCallback>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d103      	bne.n	8003820 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b01      	cmp	r3, #1
 800382c:	d007      	beq.n	800383e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	619a      	str	r2, [r3, #24]
  }
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	2200      	movs	r2, #0
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	2200      	movs	r2, #0
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff ff9b 	bl	80037b4 <I2C_TreatErrorCallback>
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003896:	e022      	b.n	80038de <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d01e      	beq.n	80038de <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a0:	f7fe fafa 	bl	8001e98 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d113      	bne.n	80038de <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4013      	ands	r3, r2
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d0cd      	beq.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003912:	e02c      	b.n	800396e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f871 	bl	8003a00 <I2C_IsErrorOccurred>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e02a      	b.n	800397e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d01e      	beq.n	800396e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fe fab2 	bl	8001e98 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d113      	bne.n	800396e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e007      	b.n	800397e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d1cb      	bne.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003992:	e028      	b.n	80039e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f831 	bl	8003a00 <I2C_IsErrorOccurred>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e026      	b.n	80039f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a8:	f7fe fa76 	bl	8001e98 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d302      	bcc.n	80039be <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d113      	bne.n	80039e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e007      	b.n	80039f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d1cf      	bne.n	8003994 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d075      	beq.n	8003b18 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2210      	movs	r2, #16
 8003a32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a34:	e056      	b.n	8003ae4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d052      	beq.n	8003ae4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7fe fa2b 	bl	8001e98 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_IsErrorOccurred+0x54>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d147      	bne.n	8003ae4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a76:	d12e      	bne.n	8003ad6 <I2C_IsErrorOccurred+0xd6>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a7e:	d02a      	beq.n	8003ad6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d027      	beq.n	8003ad6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a96:	f7fe f9ff 	bl	8001e98 <HAL_GetTick>
 8003a9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a9c:	e01b      	b.n	8003ad6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a9e:	f7fe f9fb 	bl	8001e98 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b19      	cmp	r3, #25
 8003aaa:	d914      	bls.n	8003ad6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d1dc      	bne.n	8003a9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d003      	beq.n	8003afa <I2C_IsErrorOccurred+0xfa>
 8003af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d09d      	beq.n	8003a36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2220      	movs	r2, #32
 8003b08:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f043 0308 	orr.w	r3, r3, #8
 8003b52:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01c      	beq.n	8003bc8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff fe37 	bl	8003802 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <I2C_IsErrorOccurred+0x1d4>)
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3728      	adds	r7, #40	; 0x28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	fe00e800 	.word	0xfe00e800

08003bd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	4613      	mov	r3, r2
 8003be8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bea:	897b      	ldrh	r3, [r7, #10]
 8003bec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bf0:	7a7b      	ldrb	r3, [r7, #9]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bf8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	0d5b      	lsrs	r3, r3, #21
 8003c12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <I2C_TransferConfig+0x60>)
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	ea02 0103 	and.w	r1, r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	03ff63ff 	.word	0x03ff63ff

08003c3c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c4c:	887b      	ldrh	r3, [r7, #2]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003c5c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c6a:	2b28      	cmp	r3, #40	; 0x28
 8003c6c:	d003      	beq.n	8003c76 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c74:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c76:	887b      	ldrh	r3, [r7, #2]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00f      	beq.n	8003ca0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003c86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c94:	2b28      	cmp	r3, #40	; 0x28
 8003c96:	d003      	beq.n	8003ca0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c9e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ca0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	da03      	bge.n	8003cb0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003cae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d103      	bne.n	8003cbe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cbe:	887b      	ldrh	r3, [r7, #2]
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d103      	bne.n	8003ccc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f043 0320 	orr.w	r3, r3, #32
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ccc:	887b      	ldrh	r3, [r7, #2]
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d103      	bne.n	8003cda <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	400a      	ands	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d138      	bne.n	8003d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e032      	b.n	8003d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d139      	bne.n	8003e18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e033      	b.n	8003e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2224      	movs	r2, #36	; 0x24
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003de0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40007000 	.word	0x40007000

08003e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e52:	d130      	bne.n	8003eb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e60:	d038      	beq.n	8003ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2232      	movs	r2, #50	; 0x32
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0c9b      	lsrs	r3, r3, #18
 8003e84:	3301      	adds	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e88:	e002      	b.n	8003e90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e90:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9c:	d102      	bne.n	8003ea4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f2      	bne.n	8003e8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb0:	d110      	bne.n	8003ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e00f      	b.n	8003ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec2:	d007      	beq.n	8003ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ec4:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ecc:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ed2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	20000004 	.word	0x20000004
 8003eec:	431bde83 	.word	0x431bde83

08003ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f000 bc02 	b.w	8004708 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f04:	4b96      	ldr	r3, [pc, #600]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f0e:	4b94      	ldr	r3, [pc, #592]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80e4 	beq.w	80040ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <HAL_RCC_OscConfig+0x4c>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	f040 808b 	bne.w	800404a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 8087 	bne.w	800404a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f3c:	4b88      	ldr	r3, [pc, #544]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_OscConfig+0x64>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e3d9      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	4b81      	ldr	r3, [pc, #516]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <HAL_RCC_OscConfig+0x7e>
 8003f64:	4b7e      	ldr	r3, [pc, #504]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6c:	e005      	b.n	8003f7a <HAL_RCC_OscConfig+0x8a>
 8003f6e:	4b7c      	ldr	r3, [pc, #496]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d223      	bcs.n	8003fc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd8c 	bl	8004aa0 <RCC_SetFlashLatencyFromMSIRange>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e3ba      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f92:	4b73      	ldr	r3, [pc, #460]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a72      	ldr	r2, [pc, #456]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003f98:	f043 0308 	orr.w	r3, r3, #8
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b70      	ldr	r3, [pc, #448]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	496d      	ldr	r1, [pc, #436]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb0:	4b6b      	ldr	r3, [pc, #428]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	4968      	ldr	r1, [pc, #416]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
 8003fc4:	e025      	b.n	8004012 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc6:	4b66      	ldr	r3, [pc, #408]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a65      	ldr	r2, [pc, #404]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	f043 0308 	orr.w	r3, r3, #8
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b63      	ldr	r3, [pc, #396]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4960      	ldr	r1, [pc, #384]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe4:	4b5e      	ldr	r3, [pc, #376]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	495b      	ldr	r1, [pc, #364]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fd4c 	bl	8004aa0 <RCC_SetFlashLatencyFromMSIRange>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e37a      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004012:	f000 fc81 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8004016:	4602      	mov	r2, r0
 8004018:	4b51      	ldr	r3, [pc, #324]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	4950      	ldr	r1, [pc, #320]	; (8004164 <HAL_RCC_OscConfig+0x274>)
 8004024:	5ccb      	ldrb	r3, [r1, r3]
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a4e      	ldr	r2, [pc, #312]	; (8004168 <HAL_RCC_OscConfig+0x278>)
 8004030:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004032:	4b4e      	ldr	r3, [pc, #312]	; (800416c <HAL_RCC_OscConfig+0x27c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd fede 	bl	8001df8 <HAL_InitTick>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d052      	beq.n	80040ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	e35e      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d032      	beq.n	80040b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004052:	4b43      	ldr	r3, [pc, #268]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a42      	ldr	r2, [pc, #264]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800405e:	f7fd ff1b 	bl	8001e98 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004066:	f7fd ff17 	bl	8001e98 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e347      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004078:	4b39      	ldr	r3, [pc, #228]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004084:	4b36      	ldr	r3, [pc, #216]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a35      	ldr	r2, [pc, #212]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 800408a:	f043 0308 	orr.w	r3, r3, #8
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b33      	ldr	r3, [pc, #204]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4930      	ldr	r1, [pc, #192]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a2:	4b2f      	ldr	r3, [pc, #188]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	492b      	ldr	r1, [pc, #172]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
 80040b6:	e01a      	b.n	80040ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040b8:	4b29      	ldr	r3, [pc, #164]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a28      	ldr	r2, [pc, #160]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040c4:	f7fd fee8 	bl	8001e98 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040cc:	f7fd fee4 	bl	8001e98 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e314      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x1dc>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d073      	beq.n	80041e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d005      	beq.n	800410c <HAL_RCC_OscConfig+0x21c>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d10e      	bne.n	8004124 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d10b      	bne.n	8004124 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d063      	beq.n	80041e0 <HAL_RCC_OscConfig+0x2f0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d15f      	bne.n	80041e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e2f1      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412c:	d106      	bne.n	800413c <HAL_RCC_OscConfig+0x24c>
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e025      	b.n	8004188 <HAL_RCC_OscConfig+0x298>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004144:	d114      	bne.n	8004170 <HAL_RCC_OscConfig+0x280>
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b03      	ldr	r3, [pc, #12]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a02      	ldr	r2, [pc, #8]	; (8004160 <HAL_RCC_OscConfig+0x270>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e013      	b.n	8004188 <HAL_RCC_OscConfig+0x298>
 8004160:	40021000 	.word	0x40021000
 8004164:	08009380 	.word	0x08009380
 8004168:	20000004 	.word	0x20000004
 800416c:	20000008 	.word	0x20000008
 8004170:	4ba0      	ldr	r3, [pc, #640]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a9f      	ldr	r2, [pc, #636]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b9d      	ldr	r3, [pc, #628]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a9c      	ldr	r2, [pc, #624]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd fe82 	bl	8001e98 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fd fe7e 	bl	8001e98 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e2ae      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041aa:	4b92      	ldr	r3, [pc, #584]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x2a8>
 80041b6:	e014      	b.n	80041e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd fe6e 	bl	8001e98 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fd fe6a 	bl	8001e98 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e29a      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041d2:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x2d0>
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d060      	beq.n	80042b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_OscConfig+0x310>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d119      	bne.n	800422e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d116      	bne.n	800422e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004200:	4b7c      	ldr	r3, [pc, #496]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_OscConfig+0x328>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e277      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	4973      	ldr	r1, [pc, #460]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800422c:	e040      	b.n	80042b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d023      	beq.n	800427e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004236:	4b6f      	ldr	r3, [pc, #444]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6e      	ldr	r2, [pc, #440]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fd fe29 	bl	8001e98 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424a:	f7fd fe25 	bl	8001e98 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e255      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800425c:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b62      	ldr	r3, [pc, #392]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	495f      	ldr	r1, [pc, #380]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]
 800427c:	e018      	b.n	80042b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427e:	4b5d      	ldr	r3, [pc, #372]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a5c      	ldr	r2, [pc, #368]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd fe05 	bl	8001e98 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004292:	f7fd fe01 	bl	8001e98 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e231      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f0      	bne.n	8004292 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d03c      	beq.n	8004336 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01c      	beq.n	80042fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c4:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ca:	4a4a      	ldr	r2, [pc, #296]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd fde0 	bl	8001e98 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fd fddc 	bl	8001e98 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e20c      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ee:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80042f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ef      	beq.n	80042dc <HAL_RCC_OscConfig+0x3ec>
 80042fc:	e01b      	b.n	8004336 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fe:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004304:	4a3b      	ldr	r2, [pc, #236]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fd fdc3 	bl	8001e98 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004316:	f7fd fdbf 	bl	8001e98 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e1ef      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ef      	bne.n	8004316 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80a6 	beq.w	8004490 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004344:	2300      	movs	r3, #0
 8004346:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004348:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 800435a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435e:	6593      	str	r3, [r2, #88]	; 0x58
 8004360:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800436c:	2301      	movs	r3, #1
 800436e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <HAL_RCC_OscConfig+0x508>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d118      	bne.n	80043ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800437c:	4b1e      	ldr	r3, [pc, #120]	; (80043f8 <HAL_RCC_OscConfig+0x508>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_RCC_OscConfig+0x508>)
 8004382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004388:	f7fd fd86 	bl	8001e98 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004390:	f7fd fd82 	bl	8001e98 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1b2      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <HAL_RCC_OscConfig+0x508>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d108      	bne.n	80043c8 <HAL_RCC_OscConfig+0x4d8>
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c6:	e029      	b.n	800441c <HAL_RCC_OscConfig+0x52c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d115      	bne.n	80043fc <HAL_RCC_OscConfig+0x50c>
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80043d8:	f043 0304 	orr.w	r3, r3, #4
 80043dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	4a03      	ldr	r2, [pc, #12]	; (80043f4 <HAL_RCC_OscConfig+0x504>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f0:	e014      	b.n	800441c <HAL_RCC_OscConfig+0x52c>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40007000 	.word	0x40007000
 80043fc:	4b9a      	ldr	r3, [pc, #616]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	4a99      	ldr	r2, [pc, #612]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800440c:	4b96      	ldr	r3, [pc, #600]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	4a95      	ldr	r2, [pc, #596]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004414:	f023 0304 	bic.w	r3, r3, #4
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d016      	beq.n	8004452 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004424:	f7fd fd38 	bl	8001e98 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442a:	e00a      	b.n	8004442 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442c:	f7fd fd34 	bl	8001e98 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	; 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e162      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	4b89      	ldr	r3, [pc, #548]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ed      	beq.n	800442c <HAL_RCC_OscConfig+0x53c>
 8004450:	e015      	b.n	800447e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004452:	f7fd fd21 	bl	8001e98 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004458:	e00a      	b.n	8004470 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7fd fd1d 	bl	8001e98 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f241 3288 	movw	r2, #5000	; 0x1388
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e14b      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004470:	4b7d      	ldr	r3, [pc, #500]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1ed      	bne.n	800445a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800447e:	7ffb      	ldrb	r3, [r7, #31]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004484:	4b78      	ldr	r3, [pc, #480]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a77      	ldr	r2, [pc, #476]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 800448a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d03c      	beq.n	8004516 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01c      	beq.n	80044de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044a4:	4b70      	ldr	r3, [pc, #448]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80044a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044aa:	4a6f      	ldr	r2, [pc, #444]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fd fcf0 	bl	8001e98 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044bc:	f7fd fcec 	bl	8001e98 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e11c      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ce:	4b66      	ldr	r3, [pc, #408]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80044d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ef      	beq.n	80044bc <HAL_RCC_OscConfig+0x5cc>
 80044dc:	e01b      	b.n	8004516 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044de:	4b62      	ldr	r3, [pc, #392]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80044e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e4:	4a60      	ldr	r2, [pc, #384]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fd fcd3 	bl	8001e98 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f6:	f7fd fccf 	bl	8001e98 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0ff      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004508:	4b57      	ldr	r3, [pc, #348]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 800450a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1ef      	bne.n	80044f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80f3 	beq.w	8004706 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	2b02      	cmp	r3, #2
 8004526:	f040 80c9 	bne.w	80046bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800452a:	4b4f      	ldr	r3, [pc, #316]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f003 0203 	and.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	429a      	cmp	r2, r3
 800453c:	d12c      	bne.n	8004598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	3b01      	subs	r3, #1
 800454a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d123      	bne.n	8004598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d11b      	bne.n	8004598 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d113      	bne.n	8004598 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	3b01      	subs	r3, #1
 800457e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d109      	bne.n	8004598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	3b01      	subs	r3, #1
 8004592:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d06b      	beq.n	8004670 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d062      	beq.n	8004664 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800459e:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0ac      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045ae:	4b2e      	ldr	r3, [pc, #184]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2d      	ldr	r2, [pc, #180]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80045b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045ba:	f7fd fc6d 	bl	8001e98 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fd fc69 	bl	8001e98 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e099      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d4:	4b24      	ldr	r3, [pc, #144]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e0:	4b21      	ldr	r3, [pc, #132]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <HAL_RCC_OscConfig+0x77c>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045f0:	3a01      	subs	r2, #1
 80045f2:	0112      	lsls	r2, r2, #4
 80045f4:	4311      	orrs	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045fa:	0212      	lsls	r2, r2, #8
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004602:	0852      	lsrs	r2, r2, #1
 8004604:	3a01      	subs	r2, #1
 8004606:	0552      	lsls	r2, r2, #21
 8004608:	4311      	orrs	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800460e:	0852      	lsrs	r2, r2, #1
 8004610:	3a01      	subs	r2, #1
 8004612:	0652      	lsls	r2, r2, #25
 8004614:	4311      	orrs	r1, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800461a:	06d2      	lsls	r2, r2, #27
 800461c:	430a      	orrs	r2, r1
 800461e:	4912      	ldr	r1, [pc, #72]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004620:	4313      	orrs	r3, r2
 8004622:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0f      	ldr	r2, [pc, #60]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004630:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800463c:	f7fd fc2c 	bl	8001e98 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd fc28 	bl	8001e98 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e058      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004662:	e050      	b.n	8004706 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e04f      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
 8004668:	40021000 	.word	0x40021000
 800466c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d144      	bne.n	8004706 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a20      	ldr	r2, [pc, #128]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 800468e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004692:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004694:	f7fd fc00 	bl	8001e98 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469c:	f7fd fbfc 	bl	8001e98 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e02c      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ae:	4b18      	ldr	r3, [pc, #96]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x7ac>
 80046ba:	e024      	b.n	8004706 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d01f      	beq.n	8004702 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a12      	ldr	r2, [pc, #72]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 80046c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd fbe3 	bl	8001e98 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fd fbdf 	bl	8001e98 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e00f      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4905      	ldr	r1, [pc, #20]	; (8004710 <HAL_RCC_OscConfig+0x820>)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_OscConfig+0x824>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60cb      	str	r3, [r1, #12]
 8004700:	e001      	b.n	8004706 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	feeefffc 	.word	0xfeeefffc

08004718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0e7      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b75      	ldr	r3, [pc, #468]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d910      	bls.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b72      	ldr	r3, [pc, #456]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 0207 	bic.w	r2, r3, #7
 8004742:	4970      	ldr	r1, [pc, #448]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b6e      	ldr	r3, [pc, #440]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0cf      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004774:	429a      	cmp	r2, r3
 8004776:	d908      	bls.n	800478a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b63      	ldr	r3, [pc, #396]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4960      	ldr	r1, [pc, #384]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04c      	beq.n	8004830 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	4b5a      	ldr	r3, [pc, #360]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d121      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e0a6      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	4b54      	ldr	r3, [pc, #336]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d115      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e09a      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ce:	4b4e      	ldr	r3, [pc, #312]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e08e      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047de:	4b4a      	ldr	r3, [pc, #296]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e086      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ee:	4b46      	ldr	r3, [pc, #280]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4943      	ldr	r1, [pc, #268]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fd fb4a 	bl	8001e98 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	e00a      	b.n	800481e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004808:	f7fd fb46 	bl	8001e98 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e06e      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 020c 	and.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	429a      	cmp	r2, r3
 800482e:	d1eb      	bne.n	8004808 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d010      	beq.n	800485e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	4b31      	ldr	r3, [pc, #196]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004848:	429a      	cmp	r2, r3
 800484a:	d208      	bcs.n	800485e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484c:	4b2e      	ldr	r3, [pc, #184]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	492b      	ldr	r1, [pc, #172]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800485e:	4b29      	ldr	r3, [pc, #164]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d210      	bcs.n	800488e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 0207 	bic.w	r2, r3, #7
 8004874:	4923      	ldr	r1, [pc, #140]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487c:	4b21      	ldr	r3, [pc, #132]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d001      	beq.n	800488e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e036      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4918      	ldr	r1, [pc, #96]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4910      	ldr	r1, [pc, #64]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048cc:	f000 f824 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	490b      	ldr	r1, [pc, #44]	; (800490c <HAL_RCC_ClockConfig+0x1f4>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	4a09      	ldr	r2, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80048ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <HAL_RCC_ClockConfig+0x1fc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd fa81 	bl	8001df8 <HAL_InitTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80048fa:	7afb      	ldrb	r3, [r7, #11]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40022000 	.word	0x40022000
 8004908:	40021000 	.word	0x40021000
 800490c:	08009380 	.word	0x08009380
 8004910:	20000004 	.word	0x20000004
 8004914:	20000008 	.word	0x20000008

08004918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	; 0x24
 800491c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004926:	4b3e      	ldr	r3, [pc, #248]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004930:	4b3b      	ldr	r3, [pc, #236]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x34>
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d121      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d11e      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800494c:	4b34      	ldr	r3, [pc, #208]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004958:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e005      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004968:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004974:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10d      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004988:	e00a      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b04      	cmp	r3, #4
 800498e:	d102      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	e004      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800499c:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800499e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d134      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d003      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0xa6>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d003      	beq.n	80049c4 <HAL_RCC_GetSysClockFreq+0xac>
 80049bc:	e005      	b.n	80049ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049be:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80049c0:	617b      	str	r3, [r7, #20]
      break;
 80049c2:	e005      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049c4:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80049c6:	617b      	str	r3, [r7, #20]
      break;
 80049c8:	e002      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	617b      	str	r3, [r7, #20]
      break;
 80049ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	3301      	adds	r3, #1
 80049dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	fb03 f202 	mul.w	r2, r3, r2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	0e5b      	lsrs	r3, r3, #25
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	3301      	adds	r3, #1
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a10:	69bb      	ldr	r3, [r7, #24]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3724      	adds	r7, #36	; 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	08009398 	.word	0x08009398
 8004a28:	00f42400 	.word	0x00f42400
 8004a2c:	007a1200 	.word	0x007a1200

08004a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000004 	.word	0x20000004

08004a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a4c:	f7ff fff0 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4904      	ldr	r1, [pc, #16]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	08009390 	.word	0x08009390

08004a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a78:	f7ff ffda 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0adb      	lsrs	r3, r3, #11
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4904      	ldr	r1, [pc, #16]	; (8004a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	08009390 	.word	0x08009390

08004aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004aac:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ab8:	f7ff f9b6 	bl	8003e28 <HAL_PWREx_GetVoltageRange>
 8004abc:	6178      	str	r0, [r7, #20]
 8004abe:	e014      	b.n	8004aea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ac0:	4b25      	ldr	r3, [pc, #148]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aca:	6593      	str	r3, [r2, #88]	; 0x58
 8004acc:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ad8:	f7ff f9a6 	bl	8003e28 <HAL_PWREx_GetVoltageRange>
 8004adc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ade:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af0:	d10b      	bne.n	8004b0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d919      	bls.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2ba0      	cmp	r3, #160	; 0xa0
 8004afc:	d902      	bls.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004afe:	2302      	movs	r3, #2
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	e013      	b.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b04:	2301      	movs	r3, #1
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	e010      	b.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d902      	bls.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b10:	2303      	movs	r3, #3
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	e00a      	b.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d102      	bne.n	8004b22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	e004      	b.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b70      	cmp	r3, #112	; 0x70
 8004b26:	d101      	bne.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b28:	2301      	movs	r3, #1
 8004b2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 0207 	bic.w	r2, r3, #7
 8004b34:	4909      	ldr	r1, [pc, #36]	; (8004b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d001      	beq.n	8004b4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40022000 	.word	0x40022000

08004b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b68:	2300      	movs	r3, #0
 8004b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d031      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b84:	d01a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b8a:	d814      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b94:	d10f      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b96:	4b5d      	ldr	r3, [pc, #372]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4a5c      	ldr	r2, [pc, #368]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ba2:	e00c      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f9ce 	bl	8004f4c <RCCEx_PLLSAI1_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bb4:	e003      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	74fb      	strb	r3, [r7, #19]
      break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bc4:	4b51      	ldr	r3, [pc, #324]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	494e      	ldr	r1, [pc, #312]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bda:	e001      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 809e 	beq.w	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bf2:	4b46      	ldr	r3, [pc, #280]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	4b40      	ldr	r3, [pc, #256]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0c:	4a3f      	ldr	r2, [pc, #252]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c12:	6593      	str	r3, [r2, #88]	; 0x58
 8004c14:	4b3d      	ldr	r3, [pc, #244]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c20:	2301      	movs	r3, #1
 8004c22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c24:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a39      	ldr	r2, [pc, #228]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c30:	f7fd f932 	bl	8001e98 <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c36:	e009      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c38:	f7fd f92e 	bl	8001e98 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d902      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	74fb      	strb	r3, [r7, #19]
        break;
 8004c4a:	e005      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c4c:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ef      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d15a      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c5e:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01e      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d019      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c7a:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c86:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c96:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ca6:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d016      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd f8ee 	bl	8001e98 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbe:	e00b      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc0:	f7fd f8ea 	bl	8001e98 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d902      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	74fb      	strb	r3, [r7, #19]
            break;
 8004cd6:	e006      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0ec      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfa:	4904      	ldr	r1, [pc, #16]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d02:	e009      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
 8004d08:	e006      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d18:	7c7b      	ldrb	r3, [r7, #17]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4b8a      	ldr	r3, [pc, #552]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	4a89      	ldr	r2, [pc, #548]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d36:	4b84      	ldr	r3, [pc, #528]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f023 0203 	bic.w	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	4980      	ldr	r1, [pc, #512]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d58:	4b7b      	ldr	r3, [pc, #492]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 020c 	bic.w	r2, r3, #12
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	4978      	ldr	r1, [pc, #480]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d7a:	4b73      	ldr	r3, [pc, #460]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	496f      	ldr	r1, [pc, #444]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d9c:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	4967      	ldr	r1, [pc, #412]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dbe:	4b62      	ldr	r3, [pc, #392]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	495e      	ldr	r1, [pc, #376]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004de0:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	4956      	ldr	r1, [pc, #344]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e02:	4b51      	ldr	r3, [pc, #324]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	494d      	ldr	r1, [pc, #308]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d028      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e24:	4b48      	ldr	r3, [pc, #288]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	4945      	ldr	r1, [pc, #276]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e42:	d106      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e44:	4b40      	ldr	r3, [pc, #256]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4a3f      	ldr	r2, [pc, #252]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4e:	60d3      	str	r3, [r2, #12]
 8004e50:	e011      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e5a:	d10c      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f872 	bl	8004f4c <RCCEx_PLLSAI1_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004e72:	7cfb      	ldrb	r3, [r7, #19]
 8004e74:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d028      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	492d      	ldr	r1, [pc, #180]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea0:	d106      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea2:	4b29      	ldr	r3, [pc, #164]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eac:	60d3      	str	r3, [r2, #12]
 8004eae:	e011      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f843 	bl	8004f4c <RCCEx_PLLSAI1_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01c      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eee:	4916      	ldr	r1, [pc, #88]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004efe:	d10c      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	2102      	movs	r1, #2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f820 	bl	8004f4c <RCCEx_PLLSAI1_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004f16:	7cfb      	ldrb	r3, [r7, #19]
 8004f18:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f34:	4904      	ldr	r1, [pc, #16]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000

08004f4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f5a:	4b74      	ldr	r3, [pc, #464]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d018      	beq.n	8004f98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f66:	4b71      	ldr	r3, [pc, #452]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0203 	and.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d10d      	bne.n	8004f92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
       ||
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f7e:	4b6b      	ldr	r3, [pc, #428]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d047      	beq.n	8005022 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
 8004f96:	e044      	b.n	8005022 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d018      	beq.n	8004fd2 <RCCEx_PLLSAI1_Config+0x86>
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d825      	bhi.n	8004ff0 <RCCEx_PLLSAI1_Config+0xa4>
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d002      	beq.n	8004fae <RCCEx_PLLSAI1_Config+0x62>
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d009      	beq.n	8004fc0 <RCCEx_PLLSAI1_Config+0x74>
 8004fac:	e020      	b.n	8004ff0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fae:	4b5f      	ldr	r3, [pc, #380]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11d      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fbe:	e01a      	b.n	8004ff6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fc0:	4b5a      	ldr	r3, [pc, #360]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d116      	bne.n	8004ffa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd0:	e013      	b.n	8004ffa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fd2:	4b56      	ldr	r3, [pc, #344]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fde:	4b53      	ldr	r3, [pc, #332]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fee:	e006      	b.n	8004ffe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff4:	e004      	b.n	8005000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e002      	b.n	8005000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10d      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005006:	4b49      	ldr	r3, [pc, #292]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6819      	ldr	r1, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	3b01      	subs	r3, #1
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	430b      	orrs	r3, r1
 800501c:	4943      	ldr	r1, [pc, #268]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d17c      	bne.n	8005122 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005028:	4b40      	ldr	r3, [pc, #256]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a3f      	ldr	r2, [pc, #252]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 800502e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005034:	f7fc ff30 	bl	8001e98 <HAL_GetTick>
 8005038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800503a:	e009      	b.n	8005050 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800503c:	f7fc ff2c 	bl	8001e98 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d902      	bls.n	8005050 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	73fb      	strb	r3, [r7, #15]
        break;
 800504e:	e005      	b.n	800505c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005050:	4b36      	ldr	r3, [pc, #216]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ef      	bne.n	800503c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d15f      	bne.n	8005122 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d110      	bne.n	800508a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005068:	4b30      	ldr	r3, [pc, #192]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6892      	ldr	r2, [r2, #8]
 8005078:	0211      	lsls	r1, r2, #8
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68d2      	ldr	r2, [r2, #12]
 800507e:	06d2      	lsls	r2, r2, #27
 8005080:	430a      	orrs	r2, r1
 8005082:	492a      	ldr	r1, [pc, #168]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005084:	4313      	orrs	r3, r2
 8005086:	610b      	str	r3, [r1, #16]
 8005088:	e027      	b.n	80050da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d112      	bne.n	80050b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005090:	4b26      	ldr	r3, [pc, #152]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6892      	ldr	r2, [r2, #8]
 80050a0:	0211      	lsls	r1, r2, #8
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6912      	ldr	r2, [r2, #16]
 80050a6:	0852      	lsrs	r2, r2, #1
 80050a8:	3a01      	subs	r2, #1
 80050aa:	0552      	lsls	r2, r2, #21
 80050ac:	430a      	orrs	r2, r1
 80050ae:	491f      	ldr	r1, [pc, #124]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
 80050b4:	e011      	b.n	80050da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050b6:	4b1d      	ldr	r3, [pc, #116]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6892      	ldr	r2, [r2, #8]
 80050c6:	0211      	lsls	r1, r2, #8
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6952      	ldr	r2, [r2, #20]
 80050cc:	0852      	lsrs	r2, r2, #1
 80050ce:	3a01      	subs	r2, #1
 80050d0:	0652      	lsls	r2, r2, #25
 80050d2:	430a      	orrs	r2, r1
 80050d4:	4915      	ldr	r1, [pc, #84]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e6:	f7fc fed7 	bl	8001e98 <HAL_GetTick>
 80050ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ec:	e009      	b.n	8005102 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ee:	f7fc fed3 	bl	8001e98 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d902      	bls.n	8005102 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	73fb      	strb	r3, [r7, #15]
          break;
 8005100:	e005      	b.n	800510e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0ef      	beq.n	80050ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	4903      	ldr	r1, [pc, #12]	; (800512c <RCCEx_PLLSAI1_Config+0x1e0>)
 800511e:	4313      	orrs	r3, r2
 8005120:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40021000 	.word	0x40021000

08005130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e040      	b.n	80051c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fc fc98 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	; 0x24
 800515c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fbc2 	bl	80058f8 <UART_SetConfig>
 8005174:	4603      	mov	r3, r0
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e022      	b.n	80051c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fde2 	bl	8005d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800519a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fe69 	bl	8005e94 <UART_CheckIdleState>
 80051c2:	4603      	mov	r3, r0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	4613      	mov	r3, r2
 80051da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	f040 8082 	bne.w	80052ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_UART_Transmit+0x26>
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e07a      	b.n	80052ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_UART_Transmit+0x38>
 8005200:	2302      	movs	r3, #2
 8005202:	e073      	b.n	80052ec <HAL_UART_Transmit+0x120>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2221      	movs	r2, #33	; 0x21
 8005218:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800521a:	f7fc fe3d 	bl	8001e98 <HAL_GetTick>
 800521e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005238:	d108      	bne.n	800524c <HAL_UART_Transmit+0x80>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e003      	b.n	8005254 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800525c:	e02d      	b.n	80052ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2200      	movs	r2, #0
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fe5c 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e039      	b.n	80052ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	881a      	ldrh	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800528a:	b292      	uxth	r2, r2
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	3302      	adds	r3, #2
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e008      	b.n	80052a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	b292      	uxth	r2, r2
 80052a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1cb      	bne.n	800525e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2200      	movs	r2, #0
 80052ce:	2140      	movs	r1, #64	; 0x40
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fe28 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e005      	b.n	80052ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0ba      	sub	sp, #232	; 0xe8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800531a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800531e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005322:	4013      	ands	r3, r2
 8005324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d115      	bne.n	800535c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00f      	beq.n	800535c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800533c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d009      	beq.n	800535c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 82a6 	beq.w	800589e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
      }
      return;
 800535a:	e2a0      	b.n	800589e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800535c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8117 	beq.w	8005594 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005372:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005376:	4b85      	ldr	r3, [pc, #532]	; (800558c <HAL_UART_IRQHandler+0x298>)
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 810a 	beq.w	8005594 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d011      	beq.n	80053b0 <HAL_UART_IRQHandler+0xbc>
 800538c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2201      	movs	r2, #1
 800539e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a6:	f043 0201 	orr.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d011      	beq.n	80053e0 <HAL_UART_IRQHandler+0xec>
 80053bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2202      	movs	r2, #2
 80053ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d6:	f043 0204 	orr.w	r2, r3, #4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d011      	beq.n	8005410 <HAL_UART_IRQHandler+0x11c>
 80053ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2204      	movs	r2, #4
 80053fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005406:	f043 0202 	orr.w	r2, r3, #2
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d017      	beq.n	800544c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2208      	movs	r2, #8
 800543a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005442:	f043 0208 	orr.w	r2, r3, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <HAL_UART_IRQHandler+0x18a>
 8005458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 820c 	beq.w	80058a2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800548a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d04f      	beq.n	8005576 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fde9 	bl	80060ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d141      	bne.n	800556e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005516:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800551a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800552e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1d9      	bne.n	80054ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	2b00      	cmp	r3, #0
 800553c:	d013      	beq.n	8005566 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <HAL_UART_IRQHandler+0x29c>)
 8005544:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4618      	mov	r0, r3
 800554c:	f7fc fe23 	bl	8002196 <HAL_DMA_Abort_IT>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005560:	4610      	mov	r0, r2
 8005562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	e00f      	b.n	8005586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9b0 	bl	80058cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	e00b      	b.n	8005586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9ac 	bl	80058cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005574:	e007      	b.n	8005586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9a8 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005584:	e18d      	b.n	80058a2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005586:	bf00      	nop
    return;
 8005588:	e18b      	b.n	80058a2 <HAL_UART_IRQHandler+0x5ae>
 800558a:	bf00      	nop
 800558c:	04000120 	.word	0x04000120
 8005590:	08006175 	.word	0x08006175

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	2b01      	cmp	r3, #1
 800559a:	f040 8146 	bne.w	800582a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 813f 	beq.w	800582a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8138 	beq.w	800582a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2210      	movs	r2, #16
 80055c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	f040 80b4 	bne.w	800573a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 815f 	beq.w	80058a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055f2:	429a      	cmp	r2, r3
 80055f4:	f080 8157 	bcs.w	80058a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	f040 8085 	bne.w	800571e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800562c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800563e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005642:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800564a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1da      	bne.n	8005614 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800566e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005682:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005686:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800568a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e1      	bne.n	800565e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e3      	bne.n	800569a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ee:	f023 0310 	bic.w	r3, r3, #16
 80056f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005700:	65bb      	str	r3, [r7, #88]	; 0x58
 8005702:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e4      	bne.n	80056de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005718:	4618      	mov	r0, r3
 800571a:	f7fc fcfe 	bl	800211a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800572a:	b29b      	uxth	r3, r3
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	b29b      	uxth	r3, r3
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8d4 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005738:	e0b5      	b.n	80058a6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005746:	b29b      	uxth	r3, r3
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80a7 	beq.w	80058aa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800575c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80a2 	beq.w	80058aa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800577a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
 800578a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800578e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e4      	bne.n	8005766 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3308      	adds	r3, #8
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	623b      	str	r3, [r7, #32]
   return(result);
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057c0:	633a      	str	r2, [r7, #48]	; 0x30
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e3      	bne.n	800579c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0310 	bic.w	r3, r3, #16
 80057fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	617b      	str	r3, [r7, #20]
   return(result);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e4      	bne.n	80057e6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f85c 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005828:	e03f      	b.n	80058aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <HAL_UART_IRQHandler+0x560>
 8005836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800584a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fcd1 	bl	80061f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005852:	e02d      	b.n	80058b0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00e      	beq.n	800587e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01c      	beq.n	80058ae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	4798      	blx	r3
    }
    return;
 800587c:	e017      	b.n	80058ae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d012      	beq.n	80058b0 <HAL_UART_IRQHandler+0x5bc>
 800588a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fc82 	bl	80061a0 <UART_EndTransmit_IT>
    return;
 800589c:	e008      	b.n	80058b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800589e:	bf00      	nop
 80058a0:	e006      	b.n	80058b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80058a2:	bf00      	nop
 80058a4:	e004      	b.n	80058b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80058a6:	bf00      	nop
 80058a8:	e002      	b.n	80058b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80058aa:	bf00      	nop
 80058ac:	e000      	b.n	80058b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80058ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80058b0:	37e8      	adds	r7, #232	; 0xe8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop

080058b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058fc:	b08a      	sub	sp, #40	; 0x28
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	431a      	orrs	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4313      	orrs	r3, r2
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4bb4      	ldr	r3, [pc, #720]	; (8005bf8 <UART_SetConfig+0x300>)
 8005928:	4013      	ands	r3, r2
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005930:	430b      	orrs	r3, r1
 8005932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4aa9      	ldr	r2, [pc, #676]	; (8005bfc <UART_SetConfig+0x304>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005960:	4313      	orrs	r3, r2
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005974:	430a      	orrs	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4aa0      	ldr	r2, [pc, #640]	; (8005c00 <UART_SetConfig+0x308>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d126      	bne.n	80059d0 <UART_SetConfig+0xd8>
 8005982:	4ba0      	ldr	r3, [pc, #640]	; (8005c04 <UART_SetConfig+0x30c>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b03      	cmp	r3, #3
 800598e:	d81b      	bhi.n	80059c8 <UART_SetConfig+0xd0>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0xa0>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	080059a9 	.word	0x080059a9
 800599c:	080059b9 	.word	0x080059b9
 80059a0:	080059b1 	.word	0x080059b1
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ae:	e080      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b6:	e07c      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e078      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e074      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e070      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a8c      	ldr	r2, [pc, #560]	; (8005c08 <UART_SetConfig+0x310>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d138      	bne.n	8005a4c <UART_SetConfig+0x154>
 80059da:	4b8a      	ldr	r3, [pc, #552]	; (8005c04 <UART_SetConfig+0x30c>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f003 030c 	and.w	r3, r3, #12
 80059e4:	2b0c      	cmp	r3, #12
 80059e6:	d82d      	bhi.n	8005a44 <UART_SetConfig+0x14c>
 80059e8:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0xf8>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a25 	.word	0x08005a25
 80059f4:	08005a45 	.word	0x08005a45
 80059f8:	08005a45 	.word	0x08005a45
 80059fc:	08005a45 	.word	0x08005a45
 8005a00:	08005a35 	.word	0x08005a35
 8005a04:	08005a45 	.word	0x08005a45
 8005a08:	08005a45 	.word	0x08005a45
 8005a0c:	08005a45 	.word	0x08005a45
 8005a10:	08005a2d 	.word	0x08005a2d
 8005a14:	08005a45 	.word	0x08005a45
 8005a18:	08005a45 	.word	0x08005a45
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2a:	e042      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a32:	e03e      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3a:	e03a      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a42:	e036      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e032      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a6a      	ldr	r2, [pc, #424]	; (8005bfc <UART_SetConfig+0x304>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d12a      	bne.n	8005aac <UART_SetConfig+0x1b4>
 8005a56:	4b6b      	ldr	r3, [pc, #428]	; (8005c04 <UART_SetConfig+0x30c>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a64:	d01a      	beq.n	8005a9c <UART_SetConfig+0x1a4>
 8005a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a6a:	d81b      	bhi.n	8005aa4 <UART_SetConfig+0x1ac>
 8005a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a70:	d00c      	beq.n	8005a8c <UART_SetConfig+0x194>
 8005a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a76:	d815      	bhi.n	8005aa4 <UART_SetConfig+0x1ac>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <UART_SetConfig+0x18c>
 8005a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a80:	d008      	beq.n	8005a94 <UART_SetConfig+0x19c>
 8005a82:	e00f      	b.n	8005aa4 <UART_SetConfig+0x1ac>
 8005a84:	2300      	movs	r3, #0
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e012      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a92:	e00e      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9a:	e00a      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa2:	e006      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aaa:	e002      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005aac:	2310      	movs	r3, #16
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a51      	ldr	r2, [pc, #324]	; (8005bfc <UART_SetConfig+0x304>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d17a      	bne.n	8005bb2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d824      	bhi.n	8005b0e <UART_SetConfig+0x216>
 8005ac4:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0x1d4>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005b0f 	.word	0x08005b0f
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b0f 	.word	0x08005b0f
 8005adc:	08005aff 	.word	0x08005aff
 8005ae0:	08005b0f 	.word	0x08005b0f
 8005ae4:	08005b0f 	.word	0x08005b0f
 8005ae8:	08005b0f 	.word	0x08005b0f
 8005aec:	08005b07 	.word	0x08005b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af0:	f7fe ffaa 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8005af4:	61f8      	str	r0, [r7, #28]
        break;
 8005af6:	e010      	b.n	8005b1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af8:	4b44      	ldr	r3, [pc, #272]	; (8005c0c <UART_SetConfig+0x314>)
 8005afa:	61fb      	str	r3, [r7, #28]
        break;
 8005afc:	e00d      	b.n	8005b1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fe ff0b 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8005b02:	61f8      	str	r0, [r7, #28]
        break;
 8005b04:	e009      	b.n	8005b1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0a:	61fb      	str	r3, [r7, #28]
        break;
 8005b0c:	e005      	b.n	8005b1a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8107 	beq.w	8005d30 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d305      	bcc.n	8005b3e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d903      	bls.n	8005b46 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b44:	e0f4      	b.n	8005d30 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	461c      	mov	r4, r3
 8005b4c:	4615      	mov	r5, r2
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	022b      	lsls	r3, r5, #8
 8005b58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b5c:	0222      	lsls	r2, r4, #8
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	6849      	ldr	r1, [r1, #4]
 8005b62:	0849      	lsrs	r1, r1, #1
 8005b64:	2000      	movs	r0, #0
 8005b66:	4688      	mov	r8, r1
 8005b68:	4681      	mov	r9, r0
 8005b6a:	eb12 0a08 	adds.w	sl, r2, r8
 8005b6e:	eb43 0b09 	adc.w	fp, r3, r9
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b80:	4650      	mov	r0, sl
 8005b82:	4659      	mov	r1, fp
 8005b84:	f7fb f810 	bl	8000ba8 <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b96:	d308      	bcc.n	8005baa <UART_SetConfig+0x2b2>
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b9e:	d204      	bcs.n	8005baa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	60da      	str	r2, [r3, #12]
 8005ba8:	e0c2      	b.n	8005d30 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bb0:	e0be      	b.n	8005d30 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bba:	d16a      	bne.n	8005c92 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d834      	bhi.n	8005c2e <UART_SetConfig+0x336>
 8005bc4:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x2d4>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005c11 	.word	0x08005c11
 8005bd4:	08005c19 	.word	0x08005c19
 8005bd8:	08005c2f 	.word	0x08005c2f
 8005bdc:	08005c1f 	.word	0x08005c1f
 8005be0:	08005c2f 	.word	0x08005c2f
 8005be4:	08005c2f 	.word	0x08005c2f
 8005be8:	08005c2f 	.word	0x08005c2f
 8005bec:	08005c27 	.word	0x08005c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f7fe ff2a 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8005bf4:	61f8      	str	r0, [r7, #28]
        break;
 8005bf6:	e020      	b.n	8005c3a <UART_SetConfig+0x342>
 8005bf8:	efff69f3 	.word	0xefff69f3
 8005bfc:	40008000 	.word	0x40008000
 8005c00:	40013800 	.word	0x40013800
 8005c04:	40021000 	.word	0x40021000
 8005c08:	40004400 	.word	0x40004400
 8005c0c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c10:	f7fe ff30 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8005c14:	61f8      	str	r0, [r7, #28]
        break;
 8005c16:	e010      	b.n	8005c3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c18:	4b4c      	ldr	r3, [pc, #304]	; (8005d4c <UART_SetConfig+0x454>)
 8005c1a:	61fb      	str	r3, [r7, #28]
        break;
 8005c1c:	e00d      	b.n	8005c3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1e:	f7fe fe7b 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8005c22:	61f8      	str	r0, [r7, #28]
        break;
 8005c24:	e009      	b.n	8005c3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2a:	61fb      	str	r3, [r7, #28]
        break;
 8005c2c:	e005      	b.n	8005c3a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d077      	beq.n	8005d30 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	005a      	lsls	r2, r3, #1
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b0f      	cmp	r3, #15
 8005c5a:	d916      	bls.n	8005c8a <UART_SetConfig+0x392>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c62:	d212      	bcs.n	8005c8a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f023 030f 	bic.w	r3, r3, #15
 8005c6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	8afb      	ldrh	r3, [r7, #22]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	8afa      	ldrh	r2, [r7, #22]
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	e052      	b.n	8005d30 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c90:	e04e      	b.n	8005d30 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d827      	bhi.n	8005cea <UART_SetConfig+0x3f2>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x3a8>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005ceb 	.word	0x08005ceb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005ceb 	.word	0x08005ceb
 8005cb8:	08005ceb 	.word	0x08005ceb
 8005cbc:	08005ceb 	.word	0x08005ceb
 8005cc0:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fe fec0 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	61f8      	str	r0, [r7, #28]
        break;
 8005cca:	e014      	b.n	8005cf6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fe fed2 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	61f8      	str	r0, [r7, #28]
        break;
 8005cd2:	e010      	b.n	8005cf6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <UART_SetConfig+0x454>)
 8005cd6:	61fb      	str	r3, [r7, #28]
        break;
 8005cd8:	e00d      	b.n	8005cf6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fe fe1d 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8005cde:	61f8      	str	r0, [r7, #28]
        break;
 8005ce0:	e009      	b.n	8005cf6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	61fb      	str	r3, [r7, #28]
        break;
 8005ce8:	e005      	b.n	8005cf6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cf4:	bf00      	nop
    }

    if (pclk != 0U)
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d019      	beq.n	8005d30 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	085a      	lsrs	r2, r3, #1
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	441a      	add	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d909      	bls.n	8005d2a <UART_SetConfig+0x432>
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1c:	d205      	bcs.n	8005d2a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e002      	b.n	8005d30 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3728      	adds	r7, #40	; 0x28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4a:	bf00      	nop
 8005d4c:	00f42400 	.word	0x00f42400

08005d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01a      	beq.n	8005e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4e:	d10a      	bne.n	8005e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
  }
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ea4:	f7fb fff8 	bl	8001e98 <HAL_GetTick>
 8005ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d10e      	bne.n	8005ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f82d 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e023      	b.n	8005f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d10e      	bne.n	8005f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f817 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e00d      	b.n	8005f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b09c      	sub	sp, #112	; 0x70
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	4613      	mov	r3, r2
 8005f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f36:	e0a5      	b.n	8006084 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	f000 80a1 	beq.w	8006084 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fb ffa9 	bl	8001e98 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d13e      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e6      	bne.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005faa:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e5      	bne.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e067      	b.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d04f      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff2:	d147      	bne.n	8006084 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ffc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
 800601e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	613b      	str	r3, [r7, #16]
   return(result);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	66bb      	str	r3, [r7, #104]	; 0x68
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006050:	623a      	str	r2, [r7, #32]
 8006052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	69f9      	ldr	r1, [r7, #28]
 8006056:	6a3a      	ldr	r2, [r7, #32]
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	61bb      	str	r3, [r7, #24]
   return(result);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e010      	b.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69da      	ldr	r2, [r3, #28]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	429a      	cmp	r2, r3
 80060a0:	f43f af4a 	beq.w	8005f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3770      	adds	r7, #112	; 0x70
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b095      	sub	sp, #84	; 0x54
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	e853 3f00 	ldrex	r3, [r3]
 80060c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d4:	643b      	str	r3, [r7, #64]	; 0x40
 80060d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060dc:	e841 2300 	strex	r3, r2, [r1]
 80060e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e6      	bne.n	80060b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3308      	adds	r3, #8
 80060ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f023 0301 	bic.w	r3, r3, #1
 80060fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006108:	62fa      	str	r2, [r7, #44]	; 0x2c
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800610e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e5      	bne.n	80060e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006120:	2b01      	cmp	r3, #1
 8006122:	d118      	bne.n	8006156 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	60bb      	str	r3, [r7, #8]
   return(result);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f023 0310 	bic.w	r3, r3, #16
 8006138:	647b      	str	r3, [r7, #68]	; 0x44
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6979      	ldr	r1, [r7, #20]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	613b      	str	r3, [r7, #16]
   return(result);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e6      	bne.n	8006124 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006168:	bf00      	nop
 800616a:	3754      	adds	r7, #84	; 0x54
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff fb9a 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6979      	ldr	r1, [r7, #20]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	613b      	str	r3, [r7, #16]
   return(result);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fb66 	bl	80058b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ec:	bf00      	nop
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <__errno>:
 8006208:	4b01      	ldr	r3, [pc, #4]	; (8006210 <__errno+0x8>)
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000010 	.word	0x20000010

08006214 <__libc_init_array>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4d0d      	ldr	r5, [pc, #52]	; (800624c <__libc_init_array+0x38>)
 8006218:	4c0d      	ldr	r4, [pc, #52]	; (8006250 <__libc_init_array+0x3c>)
 800621a:	1b64      	subs	r4, r4, r5
 800621c:	10a4      	asrs	r4, r4, #2
 800621e:	2600      	movs	r6, #0
 8006220:	42a6      	cmp	r6, r4
 8006222:	d109      	bne.n	8006238 <__libc_init_array+0x24>
 8006224:	4d0b      	ldr	r5, [pc, #44]	; (8006254 <__libc_init_array+0x40>)
 8006226:	4c0c      	ldr	r4, [pc, #48]	; (8006258 <__libc_init_array+0x44>)
 8006228:	f003 f83c 	bl	80092a4 <_init>
 800622c:	1b64      	subs	r4, r4, r5
 800622e:	10a4      	asrs	r4, r4, #2
 8006230:	2600      	movs	r6, #0
 8006232:	42a6      	cmp	r6, r4
 8006234:	d105      	bne.n	8006242 <__libc_init_array+0x2e>
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	f855 3b04 	ldr.w	r3, [r5], #4
 800623c:	4798      	blx	r3
 800623e:	3601      	adds	r6, #1
 8006240:	e7ee      	b.n	8006220 <__libc_init_array+0xc>
 8006242:	f855 3b04 	ldr.w	r3, [r5], #4
 8006246:	4798      	blx	r3
 8006248:	3601      	adds	r6, #1
 800624a:	e7f2      	b.n	8006232 <__libc_init_array+0x1e>
 800624c:	08009820 	.word	0x08009820
 8006250:	08009820 	.word	0x08009820
 8006254:	08009820 	.word	0x08009820
 8006258:	08009824 	.word	0x08009824

0800625c <memset>:
 800625c:	4402      	add	r2, r0
 800625e:	4603      	mov	r3, r0
 8006260:	4293      	cmp	r3, r2
 8006262:	d100      	bne.n	8006266 <memset+0xa>
 8006264:	4770      	bx	lr
 8006266:	f803 1b01 	strb.w	r1, [r3], #1
 800626a:	e7f9      	b.n	8006260 <memset+0x4>

0800626c <__cvt>:
 800626c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	ec55 4b10 	vmov	r4, r5, d0
 8006274:	2d00      	cmp	r5, #0
 8006276:	460e      	mov	r6, r1
 8006278:	4619      	mov	r1, r3
 800627a:	462b      	mov	r3, r5
 800627c:	bfbb      	ittet	lt
 800627e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006282:	461d      	movlt	r5, r3
 8006284:	2300      	movge	r3, #0
 8006286:	232d      	movlt	r3, #45	; 0x2d
 8006288:	700b      	strb	r3, [r1, #0]
 800628a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800628c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006290:	4691      	mov	r9, r2
 8006292:	f023 0820 	bic.w	r8, r3, #32
 8006296:	bfbc      	itt	lt
 8006298:	4622      	movlt	r2, r4
 800629a:	4614      	movlt	r4, r2
 800629c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062a0:	d005      	beq.n	80062ae <__cvt+0x42>
 80062a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062a6:	d100      	bne.n	80062aa <__cvt+0x3e>
 80062a8:	3601      	adds	r6, #1
 80062aa:	2102      	movs	r1, #2
 80062ac:	e000      	b.n	80062b0 <__cvt+0x44>
 80062ae:	2103      	movs	r1, #3
 80062b0:	ab03      	add	r3, sp, #12
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	ab02      	add	r3, sp, #8
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	ec45 4b10 	vmov	d0, r4, r5
 80062bc:	4653      	mov	r3, sl
 80062be:	4632      	mov	r2, r6
 80062c0:	f000 fe1a 	bl	8006ef8 <_dtoa_r>
 80062c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062c8:	4607      	mov	r7, r0
 80062ca:	d102      	bne.n	80062d2 <__cvt+0x66>
 80062cc:	f019 0f01 	tst.w	r9, #1
 80062d0:	d022      	beq.n	8006318 <__cvt+0xac>
 80062d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062d6:	eb07 0906 	add.w	r9, r7, r6
 80062da:	d110      	bne.n	80062fe <__cvt+0x92>
 80062dc:	783b      	ldrb	r3, [r7, #0]
 80062de:	2b30      	cmp	r3, #48	; 0x30
 80062e0:	d10a      	bne.n	80062f8 <__cvt+0x8c>
 80062e2:	2200      	movs	r2, #0
 80062e4:	2300      	movs	r3, #0
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7fa fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80062ee:	b918      	cbnz	r0, 80062f8 <__cvt+0x8c>
 80062f0:	f1c6 0601 	rsb	r6, r6, #1
 80062f4:	f8ca 6000 	str.w	r6, [sl]
 80062f8:	f8da 3000 	ldr.w	r3, [sl]
 80062fc:	4499      	add	r9, r3
 80062fe:	2200      	movs	r2, #0
 8006300:	2300      	movs	r3, #0
 8006302:	4620      	mov	r0, r4
 8006304:	4629      	mov	r1, r5
 8006306:	f7fa fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800630a:	b108      	cbz	r0, 8006310 <__cvt+0xa4>
 800630c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006310:	2230      	movs	r2, #48	; 0x30
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	454b      	cmp	r3, r9
 8006316:	d307      	bcc.n	8006328 <__cvt+0xbc>
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800631c:	1bdb      	subs	r3, r3, r7
 800631e:	4638      	mov	r0, r7
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	b004      	add	sp, #16
 8006324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	9103      	str	r1, [sp, #12]
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e7f0      	b.n	8006312 <__cvt+0xa6>

08006330 <__exponent>:
 8006330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006332:	4603      	mov	r3, r0
 8006334:	2900      	cmp	r1, #0
 8006336:	bfb8      	it	lt
 8006338:	4249      	neglt	r1, r1
 800633a:	f803 2b02 	strb.w	r2, [r3], #2
 800633e:	bfb4      	ite	lt
 8006340:	222d      	movlt	r2, #45	; 0x2d
 8006342:	222b      	movge	r2, #43	; 0x2b
 8006344:	2909      	cmp	r1, #9
 8006346:	7042      	strb	r2, [r0, #1]
 8006348:	dd2a      	ble.n	80063a0 <__exponent+0x70>
 800634a:	f10d 0407 	add.w	r4, sp, #7
 800634e:	46a4      	mov	ip, r4
 8006350:	270a      	movs	r7, #10
 8006352:	46a6      	mov	lr, r4
 8006354:	460a      	mov	r2, r1
 8006356:	fb91 f6f7 	sdiv	r6, r1, r7
 800635a:	fb07 1516 	mls	r5, r7, r6, r1
 800635e:	3530      	adds	r5, #48	; 0x30
 8006360:	2a63      	cmp	r2, #99	; 0x63
 8006362:	f104 34ff 	add.w	r4, r4, #4294967295
 8006366:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800636a:	4631      	mov	r1, r6
 800636c:	dcf1      	bgt.n	8006352 <__exponent+0x22>
 800636e:	3130      	adds	r1, #48	; 0x30
 8006370:	f1ae 0502 	sub.w	r5, lr, #2
 8006374:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006378:	1c44      	adds	r4, r0, #1
 800637a:	4629      	mov	r1, r5
 800637c:	4561      	cmp	r1, ip
 800637e:	d30a      	bcc.n	8006396 <__exponent+0x66>
 8006380:	f10d 0209 	add.w	r2, sp, #9
 8006384:	eba2 020e 	sub.w	r2, r2, lr
 8006388:	4565      	cmp	r5, ip
 800638a:	bf88      	it	hi
 800638c:	2200      	movhi	r2, #0
 800638e:	4413      	add	r3, r2
 8006390:	1a18      	subs	r0, r3, r0
 8006392:	b003      	add	sp, #12
 8006394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800639a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800639e:	e7ed      	b.n	800637c <__exponent+0x4c>
 80063a0:	2330      	movs	r3, #48	; 0x30
 80063a2:	3130      	adds	r1, #48	; 0x30
 80063a4:	7083      	strb	r3, [r0, #2]
 80063a6:	70c1      	strb	r1, [r0, #3]
 80063a8:	1d03      	adds	r3, r0, #4
 80063aa:	e7f1      	b.n	8006390 <__exponent+0x60>

080063ac <_printf_float>:
 80063ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b0:	ed2d 8b02 	vpush	{d8}
 80063b4:	b08d      	sub	sp, #52	; 0x34
 80063b6:	460c      	mov	r4, r1
 80063b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063bc:	4616      	mov	r6, r2
 80063be:	461f      	mov	r7, r3
 80063c0:	4605      	mov	r5, r0
 80063c2:	f001 fd3f 	bl	8007e44 <_localeconv_r>
 80063c6:	f8d0 a000 	ldr.w	sl, [r0]
 80063ca:	4650      	mov	r0, sl
 80063cc:	f7f9 ff00 	bl	80001d0 <strlen>
 80063d0:	2300      	movs	r3, #0
 80063d2:	930a      	str	r3, [sp, #40]	; 0x28
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	9305      	str	r3, [sp, #20]
 80063d8:	f8d8 3000 	ldr.w	r3, [r8]
 80063dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063e0:	3307      	adds	r3, #7
 80063e2:	f023 0307 	bic.w	r3, r3, #7
 80063e6:	f103 0208 	add.w	r2, r3, #8
 80063ea:	f8c8 2000 	str.w	r2, [r8]
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80063fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	f8cd 8018 	str.w	r8, [sp, #24]
 8006404:	ee08 0a10 	vmov	s16, r0
 8006408:	4b9f      	ldr	r3, [pc, #636]	; (8006688 <_printf_float+0x2dc>)
 800640a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800640e:	f04f 32ff 	mov.w	r2, #4294967295
 8006412:	f7fa fb8b 	bl	8000b2c <__aeabi_dcmpun>
 8006416:	bb88      	cbnz	r0, 800647c <_printf_float+0xd0>
 8006418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800641c:	4b9a      	ldr	r3, [pc, #616]	; (8006688 <_printf_float+0x2dc>)
 800641e:	f04f 32ff 	mov.w	r2, #4294967295
 8006422:	f7fa fb65 	bl	8000af0 <__aeabi_dcmple>
 8006426:	bb48      	cbnz	r0, 800647c <_printf_float+0xd0>
 8006428:	2200      	movs	r2, #0
 800642a:	2300      	movs	r3, #0
 800642c:	4640      	mov	r0, r8
 800642e:	4649      	mov	r1, r9
 8006430:	f7fa fb54 	bl	8000adc <__aeabi_dcmplt>
 8006434:	b110      	cbz	r0, 800643c <_printf_float+0x90>
 8006436:	232d      	movs	r3, #45	; 0x2d
 8006438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643c:	4b93      	ldr	r3, [pc, #588]	; (800668c <_printf_float+0x2e0>)
 800643e:	4894      	ldr	r0, [pc, #592]	; (8006690 <_printf_float+0x2e4>)
 8006440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006444:	bf94      	ite	ls
 8006446:	4698      	movls	r8, r3
 8006448:	4680      	movhi	r8, r0
 800644a:	2303      	movs	r3, #3
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	9b05      	ldr	r3, [sp, #20]
 8006450:	f023 0204 	bic.w	r2, r3, #4
 8006454:	6022      	str	r2, [r4, #0]
 8006456:	f04f 0900 	mov.w	r9, #0
 800645a:	9700      	str	r7, [sp, #0]
 800645c:	4633      	mov	r3, r6
 800645e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006460:	4621      	mov	r1, r4
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f9d8 	bl	8006818 <_printf_common>
 8006468:	3001      	adds	r0, #1
 800646a:	f040 8090 	bne.w	800658e <_printf_float+0x1e2>
 800646e:	f04f 30ff 	mov.w	r0, #4294967295
 8006472:	b00d      	add	sp, #52	; 0x34
 8006474:	ecbd 8b02 	vpop	{d8}
 8006478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647c:	4642      	mov	r2, r8
 800647e:	464b      	mov	r3, r9
 8006480:	4640      	mov	r0, r8
 8006482:	4649      	mov	r1, r9
 8006484:	f7fa fb52 	bl	8000b2c <__aeabi_dcmpun>
 8006488:	b140      	cbz	r0, 800649c <_printf_float+0xf0>
 800648a:	464b      	mov	r3, r9
 800648c:	2b00      	cmp	r3, #0
 800648e:	bfbc      	itt	lt
 8006490:	232d      	movlt	r3, #45	; 0x2d
 8006492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006496:	487f      	ldr	r0, [pc, #508]	; (8006694 <_printf_float+0x2e8>)
 8006498:	4b7f      	ldr	r3, [pc, #508]	; (8006698 <_printf_float+0x2ec>)
 800649a:	e7d1      	b.n	8006440 <_printf_float+0x94>
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064a2:	9206      	str	r2, [sp, #24]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	d13f      	bne.n	8006528 <_printf_float+0x17c>
 80064a8:	2306      	movs	r3, #6
 80064aa:	6063      	str	r3, [r4, #4]
 80064ac:	9b05      	ldr	r3, [sp, #20]
 80064ae:	6861      	ldr	r1, [r4, #4]
 80064b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064b4:	2300      	movs	r3, #0
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	ab0a      	add	r3, sp, #40	; 0x28
 80064ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064be:	ab09      	add	r3, sp, #36	; 0x24
 80064c0:	ec49 8b10 	vmov	d0, r8, r9
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	6022      	str	r2, [r4, #0]
 80064c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7ff fecd 	bl	800626c <__cvt>
 80064d2:	9b06      	ldr	r3, [sp, #24]
 80064d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064d6:	2b47      	cmp	r3, #71	; 0x47
 80064d8:	4680      	mov	r8, r0
 80064da:	d108      	bne.n	80064ee <_printf_float+0x142>
 80064dc:	1cc8      	adds	r0, r1, #3
 80064de:	db02      	blt.n	80064e6 <_printf_float+0x13a>
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	4299      	cmp	r1, r3
 80064e4:	dd41      	ble.n	800656a <_printf_float+0x1be>
 80064e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80064ea:	fa5f fb8b 	uxtb.w	fp, fp
 80064ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064f2:	d820      	bhi.n	8006536 <_printf_float+0x18a>
 80064f4:	3901      	subs	r1, #1
 80064f6:	465a      	mov	r2, fp
 80064f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064fc:	9109      	str	r1, [sp, #36]	; 0x24
 80064fe:	f7ff ff17 	bl	8006330 <__exponent>
 8006502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006504:	1813      	adds	r3, r2, r0
 8006506:	2a01      	cmp	r2, #1
 8006508:	4681      	mov	r9, r0
 800650a:	6123      	str	r3, [r4, #16]
 800650c:	dc02      	bgt.n	8006514 <_printf_float+0x168>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	07d2      	lsls	r2, r2, #31
 8006512:	d501      	bpl.n	8006518 <_printf_float+0x16c>
 8006514:	3301      	adds	r3, #1
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800651c:	2b00      	cmp	r3, #0
 800651e:	d09c      	beq.n	800645a <_printf_float+0xae>
 8006520:	232d      	movs	r3, #45	; 0x2d
 8006522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006526:	e798      	b.n	800645a <_printf_float+0xae>
 8006528:	9a06      	ldr	r2, [sp, #24]
 800652a:	2a47      	cmp	r2, #71	; 0x47
 800652c:	d1be      	bne.n	80064ac <_printf_float+0x100>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1bc      	bne.n	80064ac <_printf_float+0x100>
 8006532:	2301      	movs	r3, #1
 8006534:	e7b9      	b.n	80064aa <_printf_float+0xfe>
 8006536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800653a:	d118      	bne.n	800656e <_printf_float+0x1c2>
 800653c:	2900      	cmp	r1, #0
 800653e:	6863      	ldr	r3, [r4, #4]
 8006540:	dd0b      	ble.n	800655a <_printf_float+0x1ae>
 8006542:	6121      	str	r1, [r4, #16]
 8006544:	b913      	cbnz	r3, 800654c <_printf_float+0x1a0>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	07d0      	lsls	r0, r2, #31
 800654a:	d502      	bpl.n	8006552 <_printf_float+0x1a6>
 800654c:	3301      	adds	r3, #1
 800654e:	440b      	add	r3, r1
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	65a1      	str	r1, [r4, #88]	; 0x58
 8006554:	f04f 0900 	mov.w	r9, #0
 8006558:	e7de      	b.n	8006518 <_printf_float+0x16c>
 800655a:	b913      	cbnz	r3, 8006562 <_printf_float+0x1b6>
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	07d2      	lsls	r2, r2, #31
 8006560:	d501      	bpl.n	8006566 <_printf_float+0x1ba>
 8006562:	3302      	adds	r3, #2
 8006564:	e7f4      	b.n	8006550 <_printf_float+0x1a4>
 8006566:	2301      	movs	r3, #1
 8006568:	e7f2      	b.n	8006550 <_printf_float+0x1a4>
 800656a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800656e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006570:	4299      	cmp	r1, r3
 8006572:	db05      	blt.n	8006580 <_printf_float+0x1d4>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	6121      	str	r1, [r4, #16]
 8006578:	07d8      	lsls	r0, r3, #31
 800657a:	d5ea      	bpl.n	8006552 <_printf_float+0x1a6>
 800657c:	1c4b      	adds	r3, r1, #1
 800657e:	e7e7      	b.n	8006550 <_printf_float+0x1a4>
 8006580:	2900      	cmp	r1, #0
 8006582:	bfd4      	ite	le
 8006584:	f1c1 0202 	rsble	r2, r1, #2
 8006588:	2201      	movgt	r2, #1
 800658a:	4413      	add	r3, r2
 800658c:	e7e0      	b.n	8006550 <_printf_float+0x1a4>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	055a      	lsls	r2, r3, #21
 8006592:	d407      	bmi.n	80065a4 <_printf_float+0x1f8>
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	4642      	mov	r2, r8
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	d12c      	bne.n	80065fc <_printf_float+0x250>
 80065a2:	e764      	b.n	800646e <_printf_float+0xc2>
 80065a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065a8:	f240 80e0 	bls.w	800676c <_printf_float+0x3c0>
 80065ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065b0:	2200      	movs	r2, #0
 80065b2:	2300      	movs	r3, #0
 80065b4:	f7fa fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d034      	beq.n	8006626 <_printf_float+0x27a>
 80065bc:	4a37      	ldr	r2, [pc, #220]	; (800669c <_printf_float+0x2f0>)
 80065be:	2301      	movs	r3, #1
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f af51 	beq.w	800646e <_printf_float+0xc2>
 80065cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065d0:	429a      	cmp	r2, r3
 80065d2:	db02      	blt.n	80065da <_printf_float+0x22e>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	07d8      	lsls	r0, r3, #31
 80065d8:	d510      	bpl.n	80065fc <_printf_float+0x250>
 80065da:	ee18 3a10 	vmov	r3, s16
 80065de:	4652      	mov	r2, sl
 80065e0:	4631      	mov	r1, r6
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	f43f af41 	beq.w	800646e <_printf_float+0xc2>
 80065ec:	f04f 0800 	mov.w	r8, #0
 80065f0:	f104 091a 	add.w	r9, r4, #26
 80065f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f6:	3b01      	subs	r3, #1
 80065f8:	4543      	cmp	r3, r8
 80065fa:	dc09      	bgt.n	8006610 <_printf_float+0x264>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	079b      	lsls	r3, r3, #30
 8006600:	f100 8105 	bmi.w	800680e <_printf_float+0x462>
 8006604:	68e0      	ldr	r0, [r4, #12]
 8006606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006608:	4298      	cmp	r0, r3
 800660a:	bfb8      	it	lt
 800660c:	4618      	movlt	r0, r3
 800660e:	e730      	b.n	8006472 <_printf_float+0xc6>
 8006610:	2301      	movs	r3, #1
 8006612:	464a      	mov	r2, r9
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f af27 	beq.w	800646e <_printf_float+0xc2>
 8006620:	f108 0801 	add.w	r8, r8, #1
 8006624:	e7e6      	b.n	80065f4 <_printf_float+0x248>
 8006626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	dc39      	bgt.n	80066a0 <_printf_float+0x2f4>
 800662c:	4a1b      	ldr	r2, [pc, #108]	; (800669c <_printf_float+0x2f0>)
 800662e:	2301      	movs	r3, #1
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f af19 	beq.w	800646e <_printf_float+0xc2>
 800663c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006640:	4313      	orrs	r3, r2
 8006642:	d102      	bne.n	800664a <_printf_float+0x29e>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07d9      	lsls	r1, r3, #31
 8006648:	d5d8      	bpl.n	80065fc <_printf_float+0x250>
 800664a:	ee18 3a10 	vmov	r3, s16
 800664e:	4652      	mov	r2, sl
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f af09 	beq.w	800646e <_printf_float+0xc2>
 800665c:	f04f 0900 	mov.w	r9, #0
 8006660:	f104 0a1a 	add.w	sl, r4, #26
 8006664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006666:	425b      	negs	r3, r3
 8006668:	454b      	cmp	r3, r9
 800666a:	dc01      	bgt.n	8006670 <_printf_float+0x2c4>
 800666c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666e:	e792      	b.n	8006596 <_printf_float+0x1ea>
 8006670:	2301      	movs	r3, #1
 8006672:	4652      	mov	r2, sl
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f aef7 	beq.w	800646e <_printf_float+0xc2>
 8006680:	f109 0901 	add.w	r9, r9, #1
 8006684:	e7ee      	b.n	8006664 <_printf_float+0x2b8>
 8006686:	bf00      	nop
 8006688:	7fefffff 	.word	0x7fefffff
 800668c:	080093cc 	.word	0x080093cc
 8006690:	080093d0 	.word	0x080093d0
 8006694:	080093d8 	.word	0x080093d8
 8006698:	080093d4 	.word	0x080093d4
 800669c:	080093dc 	.word	0x080093dc
 80066a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bfa8      	it	ge
 80066a8:	461a      	movge	r2, r3
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	4691      	mov	r9, r2
 80066ae:	dc37      	bgt.n	8006720 <_printf_float+0x374>
 80066b0:	f04f 0b00 	mov.w	fp, #0
 80066b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066b8:	f104 021a 	add.w	r2, r4, #26
 80066bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066be:	9305      	str	r3, [sp, #20]
 80066c0:	eba3 0309 	sub.w	r3, r3, r9
 80066c4:	455b      	cmp	r3, fp
 80066c6:	dc33      	bgt.n	8006730 <_printf_float+0x384>
 80066c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066cc:	429a      	cmp	r2, r3
 80066ce:	db3b      	blt.n	8006748 <_printf_float+0x39c>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	07da      	lsls	r2, r3, #31
 80066d4:	d438      	bmi.n	8006748 <_printf_float+0x39c>
 80066d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d8:	9a05      	ldr	r2, [sp, #20]
 80066da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066dc:	1a9a      	subs	r2, r3, r2
 80066de:	eba3 0901 	sub.w	r9, r3, r1
 80066e2:	4591      	cmp	r9, r2
 80066e4:	bfa8      	it	ge
 80066e6:	4691      	movge	r9, r2
 80066e8:	f1b9 0f00 	cmp.w	r9, #0
 80066ec:	dc35      	bgt.n	800675a <_printf_float+0x3ae>
 80066ee:	f04f 0800 	mov.w	r8, #0
 80066f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066f6:	f104 0a1a 	add.w	sl, r4, #26
 80066fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	eba3 0309 	sub.w	r3, r3, r9
 8006704:	4543      	cmp	r3, r8
 8006706:	f77f af79 	ble.w	80065fc <_printf_float+0x250>
 800670a:	2301      	movs	r3, #1
 800670c:	4652      	mov	r2, sl
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	f43f aeaa 	beq.w	800646e <_printf_float+0xc2>
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	e7ec      	b.n	80066fa <_printf_float+0x34e>
 8006720:	4613      	mov	r3, r2
 8006722:	4631      	mov	r1, r6
 8006724:	4642      	mov	r2, r8
 8006726:	4628      	mov	r0, r5
 8006728:	47b8      	blx	r7
 800672a:	3001      	adds	r0, #1
 800672c:	d1c0      	bne.n	80066b0 <_printf_float+0x304>
 800672e:	e69e      	b.n	800646e <_printf_float+0xc2>
 8006730:	2301      	movs	r3, #1
 8006732:	4631      	mov	r1, r6
 8006734:	4628      	mov	r0, r5
 8006736:	9205      	str	r2, [sp, #20]
 8006738:	47b8      	blx	r7
 800673a:	3001      	adds	r0, #1
 800673c:	f43f ae97 	beq.w	800646e <_printf_float+0xc2>
 8006740:	9a05      	ldr	r2, [sp, #20]
 8006742:	f10b 0b01 	add.w	fp, fp, #1
 8006746:	e7b9      	b.n	80066bc <_printf_float+0x310>
 8006748:	ee18 3a10 	vmov	r3, s16
 800674c:	4652      	mov	r2, sl
 800674e:	4631      	mov	r1, r6
 8006750:	4628      	mov	r0, r5
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	d1be      	bne.n	80066d6 <_printf_float+0x32a>
 8006758:	e689      	b.n	800646e <_printf_float+0xc2>
 800675a:	9a05      	ldr	r2, [sp, #20]
 800675c:	464b      	mov	r3, r9
 800675e:	4442      	add	r2, r8
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	d1c1      	bne.n	80066ee <_printf_float+0x342>
 800676a:	e680      	b.n	800646e <_printf_float+0xc2>
 800676c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800676e:	2a01      	cmp	r2, #1
 8006770:	dc01      	bgt.n	8006776 <_printf_float+0x3ca>
 8006772:	07db      	lsls	r3, r3, #31
 8006774:	d538      	bpl.n	80067e8 <_printf_float+0x43c>
 8006776:	2301      	movs	r3, #1
 8006778:	4642      	mov	r2, r8
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae74 	beq.w	800646e <_printf_float+0xc2>
 8006786:	ee18 3a10 	vmov	r3, s16
 800678a:	4652      	mov	r2, sl
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f ae6b 	beq.w	800646e <_printf_float+0xc2>
 8006798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800679c:	2200      	movs	r2, #0
 800679e:	2300      	movs	r3, #0
 80067a0:	f7fa f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80067a4:	b9d8      	cbnz	r0, 80067de <_printf_float+0x432>
 80067a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a8:	f108 0201 	add.w	r2, r8, #1
 80067ac:	3b01      	subs	r3, #1
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d10e      	bne.n	80067d6 <_printf_float+0x42a>
 80067b8:	e659      	b.n	800646e <_printf_float+0xc2>
 80067ba:	2301      	movs	r3, #1
 80067bc:	4652      	mov	r2, sl
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f ae52 	beq.w	800646e <_printf_float+0xc2>
 80067ca:	f108 0801 	add.w	r8, r8, #1
 80067ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d0:	3b01      	subs	r3, #1
 80067d2:	4543      	cmp	r3, r8
 80067d4:	dcf1      	bgt.n	80067ba <_printf_float+0x40e>
 80067d6:	464b      	mov	r3, r9
 80067d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067dc:	e6dc      	b.n	8006598 <_printf_float+0x1ec>
 80067de:	f04f 0800 	mov.w	r8, #0
 80067e2:	f104 0a1a 	add.w	sl, r4, #26
 80067e6:	e7f2      	b.n	80067ce <_printf_float+0x422>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4642      	mov	r2, r8
 80067ec:	e7df      	b.n	80067ae <_printf_float+0x402>
 80067ee:	2301      	movs	r3, #1
 80067f0:	464a      	mov	r2, r9
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f ae38 	beq.w	800646e <_printf_float+0xc2>
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	68e3      	ldr	r3, [r4, #12]
 8006804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006806:	1a5b      	subs	r3, r3, r1
 8006808:	4543      	cmp	r3, r8
 800680a:	dcf0      	bgt.n	80067ee <_printf_float+0x442>
 800680c:	e6fa      	b.n	8006604 <_printf_float+0x258>
 800680e:	f04f 0800 	mov.w	r8, #0
 8006812:	f104 0919 	add.w	r9, r4, #25
 8006816:	e7f4      	b.n	8006802 <_printf_float+0x456>

08006818 <_printf_common>:
 8006818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	4616      	mov	r6, r2
 800681e:	4699      	mov	r9, r3
 8006820:	688a      	ldr	r2, [r1, #8]
 8006822:	690b      	ldr	r3, [r1, #16]
 8006824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006828:	4293      	cmp	r3, r2
 800682a:	bfb8      	it	lt
 800682c:	4613      	movlt	r3, r2
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006834:	4607      	mov	r7, r0
 8006836:	460c      	mov	r4, r1
 8006838:	b10a      	cbz	r2, 800683e <_printf_common+0x26>
 800683a:	3301      	adds	r3, #1
 800683c:	6033      	str	r3, [r6, #0]
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	0699      	lsls	r1, r3, #26
 8006842:	bf42      	ittt	mi
 8006844:	6833      	ldrmi	r3, [r6, #0]
 8006846:	3302      	addmi	r3, #2
 8006848:	6033      	strmi	r3, [r6, #0]
 800684a:	6825      	ldr	r5, [r4, #0]
 800684c:	f015 0506 	ands.w	r5, r5, #6
 8006850:	d106      	bne.n	8006860 <_printf_common+0x48>
 8006852:	f104 0a19 	add.w	sl, r4, #25
 8006856:	68e3      	ldr	r3, [r4, #12]
 8006858:	6832      	ldr	r2, [r6, #0]
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	42ab      	cmp	r3, r5
 800685e:	dc26      	bgt.n	80068ae <_printf_common+0x96>
 8006860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006864:	1e13      	subs	r3, r2, #0
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	bf18      	it	ne
 800686a:	2301      	movne	r3, #1
 800686c:	0692      	lsls	r2, r2, #26
 800686e:	d42b      	bmi.n	80068c8 <_printf_common+0xb0>
 8006870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006874:	4649      	mov	r1, r9
 8006876:	4638      	mov	r0, r7
 8006878:	47c0      	blx	r8
 800687a:	3001      	adds	r0, #1
 800687c:	d01e      	beq.n	80068bc <_printf_common+0xa4>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	68e5      	ldr	r5, [r4, #12]
 8006882:	6832      	ldr	r2, [r6, #0]
 8006884:	f003 0306 	and.w	r3, r3, #6
 8006888:	2b04      	cmp	r3, #4
 800688a:	bf08      	it	eq
 800688c:	1aad      	subeq	r5, r5, r2
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	6922      	ldr	r2, [r4, #16]
 8006892:	bf0c      	ite	eq
 8006894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006898:	2500      	movne	r5, #0
 800689a:	4293      	cmp	r3, r2
 800689c:	bfc4      	itt	gt
 800689e:	1a9b      	subgt	r3, r3, r2
 80068a0:	18ed      	addgt	r5, r5, r3
 80068a2:	2600      	movs	r6, #0
 80068a4:	341a      	adds	r4, #26
 80068a6:	42b5      	cmp	r5, r6
 80068a8:	d11a      	bne.n	80068e0 <_printf_common+0xc8>
 80068aa:	2000      	movs	r0, #0
 80068ac:	e008      	b.n	80068c0 <_printf_common+0xa8>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4652      	mov	r2, sl
 80068b2:	4649      	mov	r1, r9
 80068b4:	4638      	mov	r0, r7
 80068b6:	47c0      	blx	r8
 80068b8:	3001      	adds	r0, #1
 80068ba:	d103      	bne.n	80068c4 <_printf_common+0xac>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c4:	3501      	adds	r5, #1
 80068c6:	e7c6      	b.n	8006856 <_printf_common+0x3e>
 80068c8:	18e1      	adds	r1, r4, r3
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	2030      	movs	r0, #48	; 0x30
 80068ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068d2:	4422      	add	r2, r4
 80068d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068dc:	3302      	adds	r3, #2
 80068de:	e7c7      	b.n	8006870 <_printf_common+0x58>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4622      	mov	r2, r4
 80068e4:	4649      	mov	r1, r9
 80068e6:	4638      	mov	r0, r7
 80068e8:	47c0      	blx	r8
 80068ea:	3001      	adds	r0, #1
 80068ec:	d0e6      	beq.n	80068bc <_printf_common+0xa4>
 80068ee:	3601      	adds	r6, #1
 80068f0:	e7d9      	b.n	80068a6 <_printf_common+0x8e>
	...

080068f4 <_printf_i>:
 80068f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	7e0f      	ldrb	r7, [r1, #24]
 80068fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068fc:	2f78      	cmp	r7, #120	; 0x78
 80068fe:	4691      	mov	r9, r2
 8006900:	4680      	mov	r8, r0
 8006902:	460c      	mov	r4, r1
 8006904:	469a      	mov	sl, r3
 8006906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800690a:	d807      	bhi.n	800691c <_printf_i+0x28>
 800690c:	2f62      	cmp	r7, #98	; 0x62
 800690e:	d80a      	bhi.n	8006926 <_printf_i+0x32>
 8006910:	2f00      	cmp	r7, #0
 8006912:	f000 80d8 	beq.w	8006ac6 <_printf_i+0x1d2>
 8006916:	2f58      	cmp	r7, #88	; 0x58
 8006918:	f000 80a3 	beq.w	8006a62 <_printf_i+0x16e>
 800691c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006924:	e03a      	b.n	800699c <_printf_i+0xa8>
 8006926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800692a:	2b15      	cmp	r3, #21
 800692c:	d8f6      	bhi.n	800691c <_printf_i+0x28>
 800692e:	a101      	add	r1, pc, #4	; (adr r1, 8006934 <_printf_i+0x40>)
 8006930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006934:	0800698d 	.word	0x0800698d
 8006938:	080069a1 	.word	0x080069a1
 800693c:	0800691d 	.word	0x0800691d
 8006940:	0800691d 	.word	0x0800691d
 8006944:	0800691d 	.word	0x0800691d
 8006948:	0800691d 	.word	0x0800691d
 800694c:	080069a1 	.word	0x080069a1
 8006950:	0800691d 	.word	0x0800691d
 8006954:	0800691d 	.word	0x0800691d
 8006958:	0800691d 	.word	0x0800691d
 800695c:	0800691d 	.word	0x0800691d
 8006960:	08006aad 	.word	0x08006aad
 8006964:	080069d1 	.word	0x080069d1
 8006968:	08006a8f 	.word	0x08006a8f
 800696c:	0800691d 	.word	0x0800691d
 8006970:	0800691d 	.word	0x0800691d
 8006974:	08006acf 	.word	0x08006acf
 8006978:	0800691d 	.word	0x0800691d
 800697c:	080069d1 	.word	0x080069d1
 8006980:	0800691d 	.word	0x0800691d
 8006984:	0800691d 	.word	0x0800691d
 8006988:	08006a97 	.word	0x08006a97
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	602a      	str	r2, [r5, #0]
 8006994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800699c:	2301      	movs	r3, #1
 800699e:	e0a3      	b.n	8006ae8 <_printf_i+0x1f4>
 80069a0:	6820      	ldr	r0, [r4, #0]
 80069a2:	6829      	ldr	r1, [r5, #0]
 80069a4:	0606      	lsls	r6, r0, #24
 80069a6:	f101 0304 	add.w	r3, r1, #4
 80069aa:	d50a      	bpl.n	80069c2 <_printf_i+0xce>
 80069ac:	680e      	ldr	r6, [r1, #0]
 80069ae:	602b      	str	r3, [r5, #0]
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	da03      	bge.n	80069bc <_printf_i+0xc8>
 80069b4:	232d      	movs	r3, #45	; 0x2d
 80069b6:	4276      	negs	r6, r6
 80069b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069bc:	485e      	ldr	r0, [pc, #376]	; (8006b38 <_printf_i+0x244>)
 80069be:	230a      	movs	r3, #10
 80069c0:	e019      	b.n	80069f6 <_printf_i+0x102>
 80069c2:	680e      	ldr	r6, [r1, #0]
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069ca:	bf18      	it	ne
 80069cc:	b236      	sxthne	r6, r6
 80069ce:	e7ef      	b.n	80069b0 <_printf_i+0xbc>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	6820      	ldr	r0, [r4, #0]
 80069d4:	1d19      	adds	r1, r3, #4
 80069d6:	6029      	str	r1, [r5, #0]
 80069d8:	0601      	lsls	r1, r0, #24
 80069da:	d501      	bpl.n	80069e0 <_printf_i+0xec>
 80069dc:	681e      	ldr	r6, [r3, #0]
 80069de:	e002      	b.n	80069e6 <_printf_i+0xf2>
 80069e0:	0646      	lsls	r6, r0, #25
 80069e2:	d5fb      	bpl.n	80069dc <_printf_i+0xe8>
 80069e4:	881e      	ldrh	r6, [r3, #0]
 80069e6:	4854      	ldr	r0, [pc, #336]	; (8006b38 <_printf_i+0x244>)
 80069e8:	2f6f      	cmp	r7, #111	; 0x6f
 80069ea:	bf0c      	ite	eq
 80069ec:	2308      	moveq	r3, #8
 80069ee:	230a      	movne	r3, #10
 80069f0:	2100      	movs	r1, #0
 80069f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069f6:	6865      	ldr	r5, [r4, #4]
 80069f8:	60a5      	str	r5, [r4, #8]
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	bfa2      	ittt	ge
 80069fe:	6821      	ldrge	r1, [r4, #0]
 8006a00:	f021 0104 	bicge.w	r1, r1, #4
 8006a04:	6021      	strge	r1, [r4, #0]
 8006a06:	b90e      	cbnz	r6, 8006a0c <_printf_i+0x118>
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	d04d      	beq.n	8006aa8 <_printf_i+0x1b4>
 8006a0c:	4615      	mov	r5, r2
 8006a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a12:	fb03 6711 	mls	r7, r3, r1, r6
 8006a16:	5dc7      	ldrb	r7, [r0, r7]
 8006a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a1c:	4637      	mov	r7, r6
 8006a1e:	42bb      	cmp	r3, r7
 8006a20:	460e      	mov	r6, r1
 8006a22:	d9f4      	bls.n	8006a0e <_printf_i+0x11a>
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d10b      	bne.n	8006a40 <_printf_i+0x14c>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	07de      	lsls	r6, r3, #31
 8006a2c:	d508      	bpl.n	8006a40 <_printf_i+0x14c>
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	6861      	ldr	r1, [r4, #4]
 8006a32:	4299      	cmp	r1, r3
 8006a34:	bfde      	ittt	le
 8006a36:	2330      	movle	r3, #48	; 0x30
 8006a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a40:	1b52      	subs	r2, r2, r5
 8006a42:	6122      	str	r2, [r4, #16]
 8006a44:	f8cd a000 	str.w	sl, [sp]
 8006a48:	464b      	mov	r3, r9
 8006a4a:	aa03      	add	r2, sp, #12
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7ff fee2 	bl	8006818 <_printf_common>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d14c      	bne.n	8006af2 <_printf_i+0x1fe>
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	b004      	add	sp, #16
 8006a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a62:	4835      	ldr	r0, [pc, #212]	; (8006b38 <_printf_i+0x244>)
 8006a64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a68:	6829      	ldr	r1, [r5, #0]
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a70:	6029      	str	r1, [r5, #0]
 8006a72:	061d      	lsls	r5, r3, #24
 8006a74:	d514      	bpl.n	8006aa0 <_printf_i+0x1ac>
 8006a76:	07df      	lsls	r7, r3, #31
 8006a78:	bf44      	itt	mi
 8006a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a7e:	6023      	strmi	r3, [r4, #0]
 8006a80:	b91e      	cbnz	r6, 8006a8a <_printf_i+0x196>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f023 0320 	bic.w	r3, r3, #32
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	e7b0      	b.n	80069f0 <_printf_i+0xfc>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f043 0320 	orr.w	r3, r3, #32
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	2378      	movs	r3, #120	; 0x78
 8006a98:	4828      	ldr	r0, [pc, #160]	; (8006b3c <_printf_i+0x248>)
 8006a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a9e:	e7e3      	b.n	8006a68 <_printf_i+0x174>
 8006aa0:	0659      	lsls	r1, r3, #25
 8006aa2:	bf48      	it	mi
 8006aa4:	b2b6      	uxthmi	r6, r6
 8006aa6:	e7e6      	b.n	8006a76 <_printf_i+0x182>
 8006aa8:	4615      	mov	r5, r2
 8006aaa:	e7bb      	b.n	8006a24 <_printf_i+0x130>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	6826      	ldr	r6, [r4, #0]
 8006ab0:	6961      	ldr	r1, [r4, #20]
 8006ab2:	1d18      	adds	r0, r3, #4
 8006ab4:	6028      	str	r0, [r5, #0]
 8006ab6:	0635      	lsls	r5, r6, #24
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	d501      	bpl.n	8006ac0 <_printf_i+0x1cc>
 8006abc:	6019      	str	r1, [r3, #0]
 8006abe:	e002      	b.n	8006ac6 <_printf_i+0x1d2>
 8006ac0:	0670      	lsls	r0, r6, #25
 8006ac2:	d5fb      	bpl.n	8006abc <_printf_i+0x1c8>
 8006ac4:	8019      	strh	r1, [r3, #0]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	4615      	mov	r5, r2
 8006acc:	e7ba      	b.n	8006a44 <_printf_i+0x150>
 8006ace:	682b      	ldr	r3, [r5, #0]
 8006ad0:	1d1a      	adds	r2, r3, #4
 8006ad2:	602a      	str	r2, [r5, #0]
 8006ad4:	681d      	ldr	r5, [r3, #0]
 8006ad6:	6862      	ldr	r2, [r4, #4]
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4628      	mov	r0, r5
 8006adc:	f7f9 fb80 	bl	80001e0 <memchr>
 8006ae0:	b108      	cbz	r0, 8006ae6 <_printf_i+0x1f2>
 8006ae2:	1b40      	subs	r0, r0, r5
 8006ae4:	6060      	str	r0, [r4, #4]
 8006ae6:	6863      	ldr	r3, [r4, #4]
 8006ae8:	6123      	str	r3, [r4, #16]
 8006aea:	2300      	movs	r3, #0
 8006aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af0:	e7a8      	b.n	8006a44 <_printf_i+0x150>
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	462a      	mov	r2, r5
 8006af6:	4649      	mov	r1, r9
 8006af8:	4640      	mov	r0, r8
 8006afa:	47d0      	blx	sl
 8006afc:	3001      	adds	r0, #1
 8006afe:	d0ab      	beq.n	8006a58 <_printf_i+0x164>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	079b      	lsls	r3, r3, #30
 8006b04:	d413      	bmi.n	8006b2e <_printf_i+0x23a>
 8006b06:	68e0      	ldr	r0, [r4, #12]
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	4298      	cmp	r0, r3
 8006b0c:	bfb8      	it	lt
 8006b0e:	4618      	movlt	r0, r3
 8006b10:	e7a4      	b.n	8006a5c <_printf_i+0x168>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4632      	mov	r2, r6
 8006b16:	4649      	mov	r1, r9
 8006b18:	4640      	mov	r0, r8
 8006b1a:	47d0      	blx	sl
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d09b      	beq.n	8006a58 <_printf_i+0x164>
 8006b20:	3501      	adds	r5, #1
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	9903      	ldr	r1, [sp, #12]
 8006b26:	1a5b      	subs	r3, r3, r1
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	dcf2      	bgt.n	8006b12 <_printf_i+0x21e>
 8006b2c:	e7eb      	b.n	8006b06 <_printf_i+0x212>
 8006b2e:	2500      	movs	r5, #0
 8006b30:	f104 0619 	add.w	r6, r4, #25
 8006b34:	e7f5      	b.n	8006b22 <_printf_i+0x22e>
 8006b36:	bf00      	nop
 8006b38:	080093de 	.word	0x080093de
 8006b3c:	080093ef 	.word	0x080093ef

08006b40 <iprintf>:
 8006b40:	b40f      	push	{r0, r1, r2, r3}
 8006b42:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <iprintf+0x2c>)
 8006b44:	b513      	push	{r0, r1, r4, lr}
 8006b46:	681c      	ldr	r4, [r3, #0]
 8006b48:	b124      	cbz	r4, 8006b54 <iprintf+0x14>
 8006b4a:	69a3      	ldr	r3, [r4, #24]
 8006b4c:	b913      	cbnz	r3, 8006b54 <iprintf+0x14>
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f001 f8da 	bl	8007d08 <__sinit>
 8006b54:	ab05      	add	r3, sp, #20
 8006b56:	9a04      	ldr	r2, [sp, #16]
 8006b58:	68a1      	ldr	r1, [r4, #8]
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f001 fe97 	bl	8008890 <_vfiprintf_r>
 8006b62:	b002      	add	sp, #8
 8006b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b68:	b004      	add	sp, #16
 8006b6a:	4770      	bx	lr
 8006b6c:	20000010 	.word	0x20000010

08006b70 <_puts_r>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	460e      	mov	r6, r1
 8006b74:	4605      	mov	r5, r0
 8006b76:	b118      	cbz	r0, 8006b80 <_puts_r+0x10>
 8006b78:	6983      	ldr	r3, [r0, #24]
 8006b7a:	b90b      	cbnz	r3, 8006b80 <_puts_r+0x10>
 8006b7c:	f001 f8c4 	bl	8007d08 <__sinit>
 8006b80:	69ab      	ldr	r3, [r5, #24]
 8006b82:	68ac      	ldr	r4, [r5, #8]
 8006b84:	b913      	cbnz	r3, 8006b8c <_puts_r+0x1c>
 8006b86:	4628      	mov	r0, r5
 8006b88:	f001 f8be 	bl	8007d08 <__sinit>
 8006b8c:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <_puts_r+0xd0>)
 8006b8e:	429c      	cmp	r4, r3
 8006b90:	d120      	bne.n	8006bd4 <_puts_r+0x64>
 8006b92:	686c      	ldr	r4, [r5, #4]
 8006b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b96:	07db      	lsls	r3, r3, #31
 8006b98:	d405      	bmi.n	8006ba6 <_puts_r+0x36>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	0598      	lsls	r0, r3, #22
 8006b9e:	d402      	bmi.n	8006ba6 <_puts_r+0x36>
 8006ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba2:	f001 f954 	bl	8007e4e <__retarget_lock_acquire_recursive>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	0719      	lsls	r1, r3, #28
 8006baa:	d51d      	bpl.n	8006be8 <_puts_r+0x78>
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	b1db      	cbz	r3, 8006be8 <_puts_r+0x78>
 8006bb0:	3e01      	subs	r6, #1
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	60a3      	str	r3, [r4, #8]
 8006bbc:	bb39      	cbnz	r1, 8006c0e <_puts_r+0x9e>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da38      	bge.n	8006c34 <_puts_r+0xc4>
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	210a      	movs	r1, #10
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 f848 	bl	8006c5c <__swbuf_r>
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d011      	beq.n	8006bf4 <_puts_r+0x84>
 8006bd0:	250a      	movs	r5, #10
 8006bd2:	e011      	b.n	8006bf8 <_puts_r+0x88>
 8006bd4:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <_puts_r+0xd4>)
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	d101      	bne.n	8006bde <_puts_r+0x6e>
 8006bda:	68ac      	ldr	r4, [r5, #8]
 8006bdc:	e7da      	b.n	8006b94 <_puts_r+0x24>
 8006bde:	4b1a      	ldr	r3, [pc, #104]	; (8006c48 <_puts_r+0xd8>)
 8006be0:	429c      	cmp	r4, r3
 8006be2:	bf08      	it	eq
 8006be4:	68ec      	ldreq	r4, [r5, #12]
 8006be6:	e7d5      	b.n	8006b94 <_puts_r+0x24>
 8006be8:	4621      	mov	r1, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f888 	bl	8006d00 <__swsetup_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d0dd      	beq.n	8006bb0 <_puts_r+0x40>
 8006bf4:	f04f 35ff 	mov.w	r5, #4294967295
 8006bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bfa:	07da      	lsls	r2, r3, #31
 8006bfc:	d405      	bmi.n	8006c0a <_puts_r+0x9a>
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	059b      	lsls	r3, r3, #22
 8006c02:	d402      	bmi.n	8006c0a <_puts_r+0x9a>
 8006c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c06:	f001 f923 	bl	8007e50 <__retarget_lock_release_recursive>
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da04      	bge.n	8006c1c <_puts_r+0xac>
 8006c12:	69a2      	ldr	r2, [r4, #24]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	dc06      	bgt.n	8006c26 <_puts_r+0xb6>
 8006c18:	290a      	cmp	r1, #10
 8006c1a:	d004      	beq.n	8006c26 <_puts_r+0xb6>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	6022      	str	r2, [r4, #0]
 8006c22:	7019      	strb	r1, [r3, #0]
 8006c24:	e7c5      	b.n	8006bb2 <_puts_r+0x42>
 8006c26:	4622      	mov	r2, r4
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 f817 	bl	8006c5c <__swbuf_r>
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d1bf      	bne.n	8006bb2 <_puts_r+0x42>
 8006c32:	e7df      	b.n	8006bf4 <_puts_r+0x84>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	250a      	movs	r5, #10
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	6022      	str	r2, [r4, #0]
 8006c3c:	701d      	strb	r5, [r3, #0]
 8006c3e:	e7db      	b.n	8006bf8 <_puts_r+0x88>
 8006c40:	080094b0 	.word	0x080094b0
 8006c44:	080094d0 	.word	0x080094d0
 8006c48:	08009490 	.word	0x08009490

08006c4c <puts>:
 8006c4c:	4b02      	ldr	r3, [pc, #8]	; (8006c58 <puts+0xc>)
 8006c4e:	4601      	mov	r1, r0
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	f7ff bf8d 	b.w	8006b70 <_puts_r>
 8006c56:	bf00      	nop
 8006c58:	20000010 	.word	0x20000010

08006c5c <__swbuf_r>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	460e      	mov	r6, r1
 8006c60:	4614      	mov	r4, r2
 8006c62:	4605      	mov	r5, r0
 8006c64:	b118      	cbz	r0, 8006c6e <__swbuf_r+0x12>
 8006c66:	6983      	ldr	r3, [r0, #24]
 8006c68:	b90b      	cbnz	r3, 8006c6e <__swbuf_r+0x12>
 8006c6a:	f001 f84d 	bl	8007d08 <__sinit>
 8006c6e:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <__swbuf_r+0x98>)
 8006c70:	429c      	cmp	r4, r3
 8006c72:	d12b      	bne.n	8006ccc <__swbuf_r+0x70>
 8006c74:	686c      	ldr	r4, [r5, #4]
 8006c76:	69a3      	ldr	r3, [r4, #24]
 8006c78:	60a3      	str	r3, [r4, #8]
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	071a      	lsls	r2, r3, #28
 8006c7e:	d52f      	bpl.n	8006ce0 <__swbuf_r+0x84>
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	b36b      	cbz	r3, 8006ce0 <__swbuf_r+0x84>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	6820      	ldr	r0, [r4, #0]
 8006c88:	1ac0      	subs	r0, r0, r3
 8006c8a:	6963      	ldr	r3, [r4, #20]
 8006c8c:	b2f6      	uxtb	r6, r6
 8006c8e:	4283      	cmp	r3, r0
 8006c90:	4637      	mov	r7, r6
 8006c92:	dc04      	bgt.n	8006c9e <__swbuf_r+0x42>
 8006c94:	4621      	mov	r1, r4
 8006c96:	4628      	mov	r0, r5
 8006c98:	f000 ffa2 	bl	8007be0 <_fflush_r>
 8006c9c:	bb30      	cbnz	r0, 8006cec <__swbuf_r+0x90>
 8006c9e:	68a3      	ldr	r3, [r4, #8]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	60a3      	str	r3, [r4, #8]
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	6022      	str	r2, [r4, #0]
 8006caa:	701e      	strb	r6, [r3, #0]
 8006cac:	6963      	ldr	r3, [r4, #20]
 8006cae:	3001      	adds	r0, #1
 8006cb0:	4283      	cmp	r3, r0
 8006cb2:	d004      	beq.n	8006cbe <__swbuf_r+0x62>
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	07db      	lsls	r3, r3, #31
 8006cb8:	d506      	bpl.n	8006cc8 <__swbuf_r+0x6c>
 8006cba:	2e0a      	cmp	r6, #10
 8006cbc:	d104      	bne.n	8006cc8 <__swbuf_r+0x6c>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f000 ff8d 	bl	8007be0 <_fflush_r>
 8006cc6:	b988      	cbnz	r0, 8006cec <__swbuf_r+0x90>
 8006cc8:	4638      	mov	r0, r7
 8006cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <__swbuf_r+0x9c>)
 8006cce:	429c      	cmp	r4, r3
 8006cd0:	d101      	bne.n	8006cd6 <__swbuf_r+0x7a>
 8006cd2:	68ac      	ldr	r4, [r5, #8]
 8006cd4:	e7cf      	b.n	8006c76 <__swbuf_r+0x1a>
 8006cd6:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <__swbuf_r+0xa0>)
 8006cd8:	429c      	cmp	r4, r3
 8006cda:	bf08      	it	eq
 8006cdc:	68ec      	ldreq	r4, [r5, #12]
 8006cde:	e7ca      	b.n	8006c76 <__swbuf_r+0x1a>
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 f80c 	bl	8006d00 <__swsetup_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d0cb      	beq.n	8006c84 <__swbuf_r+0x28>
 8006cec:	f04f 37ff 	mov.w	r7, #4294967295
 8006cf0:	e7ea      	b.n	8006cc8 <__swbuf_r+0x6c>
 8006cf2:	bf00      	nop
 8006cf4:	080094b0 	.word	0x080094b0
 8006cf8:	080094d0 	.word	0x080094d0
 8006cfc:	08009490 	.word	0x08009490

08006d00 <__swsetup_r>:
 8006d00:	4b32      	ldr	r3, [pc, #200]	; (8006dcc <__swsetup_r+0xcc>)
 8006d02:	b570      	push	{r4, r5, r6, lr}
 8006d04:	681d      	ldr	r5, [r3, #0]
 8006d06:	4606      	mov	r6, r0
 8006d08:	460c      	mov	r4, r1
 8006d0a:	b125      	cbz	r5, 8006d16 <__swsetup_r+0x16>
 8006d0c:	69ab      	ldr	r3, [r5, #24]
 8006d0e:	b913      	cbnz	r3, 8006d16 <__swsetup_r+0x16>
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 fff9 	bl	8007d08 <__sinit>
 8006d16:	4b2e      	ldr	r3, [pc, #184]	; (8006dd0 <__swsetup_r+0xd0>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	d10f      	bne.n	8006d3c <__swsetup_r+0x3c>
 8006d1c:	686c      	ldr	r4, [r5, #4]
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d24:	0719      	lsls	r1, r3, #28
 8006d26:	d42c      	bmi.n	8006d82 <__swsetup_r+0x82>
 8006d28:	06dd      	lsls	r5, r3, #27
 8006d2a:	d411      	bmi.n	8006d50 <__swsetup_r+0x50>
 8006d2c:	2309      	movs	r3, #9
 8006d2e:	6033      	str	r3, [r6, #0]
 8006d30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d34:	81a3      	strh	r3, [r4, #12]
 8006d36:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3a:	e03e      	b.n	8006dba <__swsetup_r+0xba>
 8006d3c:	4b25      	ldr	r3, [pc, #148]	; (8006dd4 <__swsetup_r+0xd4>)
 8006d3e:	429c      	cmp	r4, r3
 8006d40:	d101      	bne.n	8006d46 <__swsetup_r+0x46>
 8006d42:	68ac      	ldr	r4, [r5, #8]
 8006d44:	e7eb      	b.n	8006d1e <__swsetup_r+0x1e>
 8006d46:	4b24      	ldr	r3, [pc, #144]	; (8006dd8 <__swsetup_r+0xd8>)
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	bf08      	it	eq
 8006d4c:	68ec      	ldreq	r4, [r5, #12]
 8006d4e:	e7e6      	b.n	8006d1e <__swsetup_r+0x1e>
 8006d50:	0758      	lsls	r0, r3, #29
 8006d52:	d512      	bpl.n	8006d7a <__swsetup_r+0x7a>
 8006d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d56:	b141      	cbz	r1, 8006d6a <__swsetup_r+0x6a>
 8006d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d5c:	4299      	cmp	r1, r3
 8006d5e:	d002      	beq.n	8006d66 <__swsetup_r+0x66>
 8006d60:	4630      	mov	r0, r6
 8006d62:	f001 fc8b 	bl	800867c <_free_r>
 8006d66:	2300      	movs	r3, #0
 8006d68:	6363      	str	r3, [r4, #52]	; 0x34
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	2300      	movs	r3, #0
 8006d74:	6063      	str	r3, [r4, #4]
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	f043 0308 	orr.w	r3, r3, #8
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	b94b      	cbnz	r3, 8006d9a <__swsetup_r+0x9a>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d90:	d003      	beq.n	8006d9a <__swsetup_r+0x9a>
 8006d92:	4621      	mov	r1, r4
 8006d94:	4630      	mov	r0, r6
 8006d96:	f001 f881 	bl	8007e9c <__smakebuf_r>
 8006d9a:	89a0      	ldrh	r0, [r4, #12]
 8006d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da0:	f010 0301 	ands.w	r3, r0, #1
 8006da4:	d00a      	beq.n	8006dbc <__swsetup_r+0xbc>
 8006da6:	2300      	movs	r3, #0
 8006da8:	60a3      	str	r3, [r4, #8]
 8006daa:	6963      	ldr	r3, [r4, #20]
 8006dac:	425b      	negs	r3, r3
 8006dae:	61a3      	str	r3, [r4, #24]
 8006db0:	6923      	ldr	r3, [r4, #16]
 8006db2:	b943      	cbnz	r3, 8006dc6 <__swsetup_r+0xc6>
 8006db4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006db8:	d1ba      	bne.n	8006d30 <__swsetup_r+0x30>
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	0781      	lsls	r1, r0, #30
 8006dbe:	bf58      	it	pl
 8006dc0:	6963      	ldrpl	r3, [r4, #20]
 8006dc2:	60a3      	str	r3, [r4, #8]
 8006dc4:	e7f4      	b.n	8006db0 <__swsetup_r+0xb0>
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	e7f7      	b.n	8006dba <__swsetup_r+0xba>
 8006dca:	bf00      	nop
 8006dcc:	20000010 	.word	0x20000010
 8006dd0:	080094b0 	.word	0x080094b0
 8006dd4:	080094d0 	.word	0x080094d0
 8006dd8:	08009490 	.word	0x08009490

08006ddc <quorem>:
 8006ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	6903      	ldr	r3, [r0, #16]
 8006de2:	690c      	ldr	r4, [r1, #16]
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	4607      	mov	r7, r0
 8006de8:	f2c0 8081 	blt.w	8006eee <quorem+0x112>
 8006dec:	3c01      	subs	r4, #1
 8006dee:	f101 0814 	add.w	r8, r1, #20
 8006df2:	f100 0514 	add.w	r5, r0, #20
 8006df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e04:	3301      	adds	r3, #1
 8006e06:	429a      	cmp	r2, r3
 8006e08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e10:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e14:	d331      	bcc.n	8006e7a <quorem+0x9e>
 8006e16:	f04f 0e00 	mov.w	lr, #0
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	46ac      	mov	ip, r5
 8006e1e:	46f2      	mov	sl, lr
 8006e20:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e24:	b293      	uxth	r3, r2
 8006e26:	fb06 e303 	mla	r3, r6, r3, lr
 8006e2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	ebaa 0303 	sub.w	r3, sl, r3
 8006e34:	f8dc a000 	ldr.w	sl, [ip]
 8006e38:	0c12      	lsrs	r2, r2, #16
 8006e3a:	fa13 f38a 	uxtah	r3, r3, sl
 8006e3e:	fb06 e202 	mla	r2, r6, r2, lr
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	9b00      	ldr	r3, [sp, #0]
 8006e46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e4a:	b292      	uxth	r2, r2
 8006e4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e54:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e58:	4581      	cmp	r9, r0
 8006e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e5e:	f84c 3b04 	str.w	r3, [ip], #4
 8006e62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e66:	d2db      	bcs.n	8006e20 <quorem+0x44>
 8006e68:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e6c:	b92b      	cbnz	r3, 8006e7a <quorem+0x9e>
 8006e6e:	9b01      	ldr	r3, [sp, #4]
 8006e70:	3b04      	subs	r3, #4
 8006e72:	429d      	cmp	r5, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	d32e      	bcc.n	8006ed6 <quorem+0xfa>
 8006e78:	613c      	str	r4, [r7, #16]
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f001 fae6 	bl	800844c <__mcmp>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	db24      	blt.n	8006ece <quorem+0xf2>
 8006e84:	3601      	adds	r6, #1
 8006e86:	4628      	mov	r0, r5
 8006e88:	f04f 0c00 	mov.w	ip, #0
 8006e8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e90:	f8d0 e000 	ldr.w	lr, [r0]
 8006e94:	b293      	uxth	r3, r2
 8006e96:	ebac 0303 	sub.w	r3, ip, r3
 8006e9a:	0c12      	lsrs	r2, r2, #16
 8006e9c:	fa13 f38e 	uxtah	r3, r3, lr
 8006ea0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eae:	45c1      	cmp	r9, r8
 8006eb0:	f840 3b04 	str.w	r3, [r0], #4
 8006eb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006eb8:	d2e8      	bcs.n	8006e8c <quorem+0xb0>
 8006eba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ec2:	b922      	cbnz	r2, 8006ece <quorem+0xf2>
 8006ec4:	3b04      	subs	r3, #4
 8006ec6:	429d      	cmp	r5, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	d30a      	bcc.n	8006ee2 <quorem+0x106>
 8006ecc:	613c      	str	r4, [r7, #16]
 8006ece:	4630      	mov	r0, r6
 8006ed0:	b003      	add	sp, #12
 8006ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	3b04      	subs	r3, #4
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	d1cc      	bne.n	8006e78 <quorem+0x9c>
 8006ede:	3c01      	subs	r4, #1
 8006ee0:	e7c7      	b.n	8006e72 <quorem+0x96>
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	3b04      	subs	r3, #4
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	d1f0      	bne.n	8006ecc <quorem+0xf0>
 8006eea:	3c01      	subs	r4, #1
 8006eec:	e7eb      	b.n	8006ec6 <quorem+0xea>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	e7ee      	b.n	8006ed0 <quorem+0xf4>
 8006ef2:	0000      	movs	r0, r0
 8006ef4:	0000      	movs	r0, r0
	...

08006ef8 <_dtoa_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	ed2d 8b04 	vpush	{d8-d9}
 8006f00:	ec57 6b10 	vmov	r6, r7, d0
 8006f04:	b093      	sub	sp, #76	; 0x4c
 8006f06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f0c:	9106      	str	r1, [sp, #24]
 8006f0e:	ee10 aa10 	vmov	sl, s0
 8006f12:	4604      	mov	r4, r0
 8006f14:	9209      	str	r2, [sp, #36]	; 0x24
 8006f16:	930c      	str	r3, [sp, #48]	; 0x30
 8006f18:	46bb      	mov	fp, r7
 8006f1a:	b975      	cbnz	r5, 8006f3a <_dtoa_r+0x42>
 8006f1c:	2010      	movs	r0, #16
 8006f1e:	f000 fffd 	bl	8007f1c <malloc>
 8006f22:	4602      	mov	r2, r0
 8006f24:	6260      	str	r0, [r4, #36]	; 0x24
 8006f26:	b920      	cbnz	r0, 8006f32 <_dtoa_r+0x3a>
 8006f28:	4ba7      	ldr	r3, [pc, #668]	; (80071c8 <_dtoa_r+0x2d0>)
 8006f2a:	21ea      	movs	r1, #234	; 0xea
 8006f2c:	48a7      	ldr	r0, [pc, #668]	; (80071cc <_dtoa_r+0x2d4>)
 8006f2e:	f001 fe45 	bl	8008bbc <__assert_func>
 8006f32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f36:	6005      	str	r5, [r0, #0]
 8006f38:	60c5      	str	r5, [r0, #12]
 8006f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f3c:	6819      	ldr	r1, [r3, #0]
 8006f3e:	b151      	cbz	r1, 8006f56 <_dtoa_r+0x5e>
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	604a      	str	r2, [r1, #4]
 8006f44:	2301      	movs	r3, #1
 8006f46:	4093      	lsls	r3, r2
 8006f48:	608b      	str	r3, [r1, #8]
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f001 f83c 	bl	8007fc8 <_Bfree>
 8006f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	1e3b      	subs	r3, r7, #0
 8006f58:	bfaa      	itet	ge
 8006f5a:	2300      	movge	r3, #0
 8006f5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006f60:	f8c8 3000 	strge.w	r3, [r8]
 8006f64:	4b9a      	ldr	r3, [pc, #616]	; (80071d0 <_dtoa_r+0x2d8>)
 8006f66:	bfbc      	itt	lt
 8006f68:	2201      	movlt	r2, #1
 8006f6a:	f8c8 2000 	strlt.w	r2, [r8]
 8006f6e:	ea33 030b 	bics.w	r3, r3, fp
 8006f72:	d11b      	bne.n	8006fac <_dtoa_r+0xb4>
 8006f74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f76:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f80:	4333      	orrs	r3, r6
 8006f82:	f000 8592 	beq.w	8007aaa <_dtoa_r+0xbb2>
 8006f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f88:	b963      	cbnz	r3, 8006fa4 <_dtoa_r+0xac>
 8006f8a:	4b92      	ldr	r3, [pc, #584]	; (80071d4 <_dtoa_r+0x2dc>)
 8006f8c:	e022      	b.n	8006fd4 <_dtoa_r+0xdc>
 8006f8e:	4b92      	ldr	r3, [pc, #584]	; (80071d8 <_dtoa_r+0x2e0>)
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	3308      	adds	r3, #8
 8006f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	9801      	ldr	r0, [sp, #4]
 8006f9a:	b013      	add	sp, #76	; 0x4c
 8006f9c:	ecbd 8b04 	vpop	{d8-d9}
 8006fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	4b8b      	ldr	r3, [pc, #556]	; (80071d4 <_dtoa_r+0x2dc>)
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	3303      	adds	r3, #3
 8006faa:	e7f3      	b.n	8006f94 <_dtoa_r+0x9c>
 8006fac:	2200      	movs	r2, #0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	4659      	mov	r1, fp
 8006fb4:	f7f9 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fb8:	ec4b ab19 	vmov	d9, sl, fp
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	b158      	cbz	r0, 8006fd8 <_dtoa_r+0xe0>
 8006fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 856b 	beq.w	8007aa4 <_dtoa_r+0xbac>
 8006fce:	4883      	ldr	r0, [pc, #524]	; (80071dc <_dtoa_r+0x2e4>)
 8006fd0:	6018      	str	r0, [r3, #0]
 8006fd2:	1e43      	subs	r3, r0, #1
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	e7df      	b.n	8006f98 <_dtoa_r+0xa0>
 8006fd8:	ec4b ab10 	vmov	d0, sl, fp
 8006fdc:	aa10      	add	r2, sp, #64	; 0x40
 8006fde:	a911      	add	r1, sp, #68	; 0x44
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f001 fad9 	bl	8008598 <__d2b>
 8006fe6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006fea:	ee08 0a10 	vmov	s16, r0
 8006fee:	2d00      	cmp	r5, #0
 8006ff0:	f000 8084 	beq.w	80070fc <_dtoa_r+0x204>
 8006ff4:	ee19 3a90 	vmov	r3, s19
 8006ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ffc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007000:	4656      	mov	r6, sl
 8007002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800700a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800700e:	4b74      	ldr	r3, [pc, #464]	; (80071e0 <_dtoa_r+0x2e8>)
 8007010:	2200      	movs	r2, #0
 8007012:	4630      	mov	r0, r6
 8007014:	4639      	mov	r1, r7
 8007016:	f7f9 f937 	bl	8000288 <__aeabi_dsub>
 800701a:	a365      	add	r3, pc, #404	; (adr r3, 80071b0 <_dtoa_r+0x2b8>)
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f7f9 faea 	bl	80005f8 <__aeabi_dmul>
 8007024:	a364      	add	r3, pc, #400	; (adr r3, 80071b8 <_dtoa_r+0x2c0>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f7f9 f92f 	bl	800028c <__adddf3>
 800702e:	4606      	mov	r6, r0
 8007030:	4628      	mov	r0, r5
 8007032:	460f      	mov	r7, r1
 8007034:	f7f9 fa76 	bl	8000524 <__aeabi_i2d>
 8007038:	a361      	add	r3, pc, #388	; (adr r3, 80071c0 <_dtoa_r+0x2c8>)
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	f7f9 fadb 	bl	80005f8 <__aeabi_dmul>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4630      	mov	r0, r6
 8007048:	4639      	mov	r1, r7
 800704a:	f7f9 f91f 	bl	800028c <__adddf3>
 800704e:	4606      	mov	r6, r0
 8007050:	460f      	mov	r7, r1
 8007052:	f7f9 fd81 	bl	8000b58 <__aeabi_d2iz>
 8007056:	2200      	movs	r2, #0
 8007058:	9000      	str	r0, [sp, #0]
 800705a:	2300      	movs	r3, #0
 800705c:	4630      	mov	r0, r6
 800705e:	4639      	mov	r1, r7
 8007060:	f7f9 fd3c 	bl	8000adc <__aeabi_dcmplt>
 8007064:	b150      	cbz	r0, 800707c <_dtoa_r+0x184>
 8007066:	9800      	ldr	r0, [sp, #0]
 8007068:	f7f9 fa5c 	bl	8000524 <__aeabi_i2d>
 800706c:	4632      	mov	r2, r6
 800706e:	463b      	mov	r3, r7
 8007070:	f7f9 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007074:	b910      	cbnz	r0, 800707c <_dtoa_r+0x184>
 8007076:	9b00      	ldr	r3, [sp, #0]
 8007078:	3b01      	subs	r3, #1
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	9b00      	ldr	r3, [sp, #0]
 800707e:	2b16      	cmp	r3, #22
 8007080:	d85a      	bhi.n	8007138 <_dtoa_r+0x240>
 8007082:	9a00      	ldr	r2, [sp, #0]
 8007084:	4b57      	ldr	r3, [pc, #348]	; (80071e4 <_dtoa_r+0x2ec>)
 8007086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	ec51 0b19 	vmov	r0, r1, d9
 8007092:	f7f9 fd23 	bl	8000adc <__aeabi_dcmplt>
 8007096:	2800      	cmp	r0, #0
 8007098:	d050      	beq.n	800713c <_dtoa_r+0x244>
 800709a:	9b00      	ldr	r3, [sp, #0]
 800709c:	3b01      	subs	r3, #1
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	2300      	movs	r3, #0
 80070a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80070a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070a6:	1b5d      	subs	r5, r3, r5
 80070a8:	1e6b      	subs	r3, r5, #1
 80070aa:	9305      	str	r3, [sp, #20]
 80070ac:	bf45      	ittet	mi
 80070ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80070b2:	9304      	strmi	r3, [sp, #16]
 80070b4:	2300      	movpl	r3, #0
 80070b6:	2300      	movmi	r3, #0
 80070b8:	bf4c      	ite	mi
 80070ba:	9305      	strmi	r3, [sp, #20]
 80070bc:	9304      	strpl	r3, [sp, #16]
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	db3d      	blt.n	8007140 <_dtoa_r+0x248>
 80070c4:	9b05      	ldr	r3, [sp, #20]
 80070c6:	9a00      	ldr	r2, [sp, #0]
 80070c8:	920a      	str	r2, [sp, #40]	; 0x28
 80070ca:	4413      	add	r3, r2
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	2300      	movs	r3, #0
 80070d0:	9307      	str	r3, [sp, #28]
 80070d2:	9b06      	ldr	r3, [sp, #24]
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	f200 8089 	bhi.w	80071ec <_dtoa_r+0x2f4>
 80070da:	2b05      	cmp	r3, #5
 80070dc:	bfc4      	itt	gt
 80070de:	3b04      	subgt	r3, #4
 80070e0:	9306      	strgt	r3, [sp, #24]
 80070e2:	9b06      	ldr	r3, [sp, #24]
 80070e4:	f1a3 0302 	sub.w	r3, r3, #2
 80070e8:	bfcc      	ite	gt
 80070ea:	2500      	movgt	r5, #0
 80070ec:	2501      	movle	r5, #1
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	f200 8087 	bhi.w	8007202 <_dtoa_r+0x30a>
 80070f4:	e8df f003 	tbb	[pc, r3]
 80070f8:	59383a2d 	.word	0x59383a2d
 80070fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007100:	441d      	add	r5, r3
 8007102:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007106:	2b20      	cmp	r3, #32
 8007108:	bfc1      	itttt	gt
 800710a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800710e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007112:	fa0b f303 	lslgt.w	r3, fp, r3
 8007116:	fa26 f000 	lsrgt.w	r0, r6, r0
 800711a:	bfda      	itte	le
 800711c:	f1c3 0320 	rsble	r3, r3, #32
 8007120:	fa06 f003 	lslle.w	r0, r6, r3
 8007124:	4318      	orrgt	r0, r3
 8007126:	f7f9 f9ed 	bl	8000504 <__aeabi_ui2d>
 800712a:	2301      	movs	r3, #1
 800712c:	4606      	mov	r6, r0
 800712e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007132:	3d01      	subs	r5, #1
 8007134:	930e      	str	r3, [sp, #56]	; 0x38
 8007136:	e76a      	b.n	800700e <_dtoa_r+0x116>
 8007138:	2301      	movs	r3, #1
 800713a:	e7b2      	b.n	80070a2 <_dtoa_r+0x1aa>
 800713c:	900b      	str	r0, [sp, #44]	; 0x2c
 800713e:	e7b1      	b.n	80070a4 <_dtoa_r+0x1ac>
 8007140:	9b04      	ldr	r3, [sp, #16]
 8007142:	9a00      	ldr	r2, [sp, #0]
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	9304      	str	r3, [sp, #16]
 8007148:	4253      	negs	r3, r2
 800714a:	9307      	str	r3, [sp, #28]
 800714c:	2300      	movs	r3, #0
 800714e:	930a      	str	r3, [sp, #40]	; 0x28
 8007150:	e7bf      	b.n	80070d2 <_dtoa_r+0x1da>
 8007152:	2300      	movs	r3, #0
 8007154:	9308      	str	r3, [sp, #32]
 8007156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc55      	bgt.n	8007208 <_dtoa_r+0x310>
 800715c:	2301      	movs	r3, #1
 800715e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007162:	461a      	mov	r2, r3
 8007164:	9209      	str	r2, [sp, #36]	; 0x24
 8007166:	e00c      	b.n	8007182 <_dtoa_r+0x28a>
 8007168:	2301      	movs	r3, #1
 800716a:	e7f3      	b.n	8007154 <_dtoa_r+0x25c>
 800716c:	2300      	movs	r3, #0
 800716e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007170:	9308      	str	r3, [sp, #32]
 8007172:	9b00      	ldr	r3, [sp, #0]
 8007174:	4413      	add	r3, r2
 8007176:	9302      	str	r3, [sp, #8]
 8007178:	3301      	adds	r3, #1
 800717a:	2b01      	cmp	r3, #1
 800717c:	9303      	str	r3, [sp, #12]
 800717e:	bfb8      	it	lt
 8007180:	2301      	movlt	r3, #1
 8007182:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007184:	2200      	movs	r2, #0
 8007186:	6042      	str	r2, [r0, #4]
 8007188:	2204      	movs	r2, #4
 800718a:	f102 0614 	add.w	r6, r2, #20
 800718e:	429e      	cmp	r6, r3
 8007190:	6841      	ldr	r1, [r0, #4]
 8007192:	d93d      	bls.n	8007210 <_dtoa_r+0x318>
 8007194:	4620      	mov	r0, r4
 8007196:	f000 fed7 	bl	8007f48 <_Balloc>
 800719a:	9001      	str	r0, [sp, #4]
 800719c:	2800      	cmp	r0, #0
 800719e:	d13b      	bne.n	8007218 <_dtoa_r+0x320>
 80071a0:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <_dtoa_r+0x2f0>)
 80071a2:	4602      	mov	r2, r0
 80071a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071a8:	e6c0      	b.n	8006f2c <_dtoa_r+0x34>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e7df      	b.n	800716e <_dtoa_r+0x276>
 80071ae:	bf00      	nop
 80071b0:	636f4361 	.word	0x636f4361
 80071b4:	3fd287a7 	.word	0x3fd287a7
 80071b8:	8b60c8b3 	.word	0x8b60c8b3
 80071bc:	3fc68a28 	.word	0x3fc68a28
 80071c0:	509f79fb 	.word	0x509f79fb
 80071c4:	3fd34413 	.word	0x3fd34413
 80071c8:	0800940d 	.word	0x0800940d
 80071cc:	08009424 	.word	0x08009424
 80071d0:	7ff00000 	.word	0x7ff00000
 80071d4:	08009409 	.word	0x08009409
 80071d8:	08009400 	.word	0x08009400
 80071dc:	080093dd 	.word	0x080093dd
 80071e0:	3ff80000 	.word	0x3ff80000
 80071e4:	08009578 	.word	0x08009578
 80071e8:	0800947f 	.word	0x0800947f
 80071ec:	2501      	movs	r5, #1
 80071ee:	2300      	movs	r3, #0
 80071f0:	9306      	str	r3, [sp, #24]
 80071f2:	9508      	str	r5, [sp, #32]
 80071f4:	f04f 33ff 	mov.w	r3, #4294967295
 80071f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	2312      	movs	r3, #18
 8007200:	e7b0      	b.n	8007164 <_dtoa_r+0x26c>
 8007202:	2301      	movs	r3, #1
 8007204:	9308      	str	r3, [sp, #32]
 8007206:	e7f5      	b.n	80071f4 <_dtoa_r+0x2fc>
 8007208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800720e:	e7b8      	b.n	8007182 <_dtoa_r+0x28a>
 8007210:	3101      	adds	r1, #1
 8007212:	6041      	str	r1, [r0, #4]
 8007214:	0052      	lsls	r2, r2, #1
 8007216:	e7b8      	b.n	800718a <_dtoa_r+0x292>
 8007218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800721a:	9a01      	ldr	r2, [sp, #4]
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	9b03      	ldr	r3, [sp, #12]
 8007220:	2b0e      	cmp	r3, #14
 8007222:	f200 809d 	bhi.w	8007360 <_dtoa_r+0x468>
 8007226:	2d00      	cmp	r5, #0
 8007228:	f000 809a 	beq.w	8007360 <_dtoa_r+0x468>
 800722c:	9b00      	ldr	r3, [sp, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	dd32      	ble.n	8007298 <_dtoa_r+0x3a0>
 8007232:	4ab7      	ldr	r2, [pc, #732]	; (8007510 <_dtoa_r+0x618>)
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800723c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007240:	9b00      	ldr	r3, [sp, #0]
 8007242:	05d8      	lsls	r0, r3, #23
 8007244:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007248:	d516      	bpl.n	8007278 <_dtoa_r+0x380>
 800724a:	4bb2      	ldr	r3, [pc, #712]	; (8007514 <_dtoa_r+0x61c>)
 800724c:	ec51 0b19 	vmov	r0, r1, d9
 8007250:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007254:	f7f9 fafa 	bl	800084c <__aeabi_ddiv>
 8007258:	f007 070f 	and.w	r7, r7, #15
 800725c:	4682      	mov	sl, r0
 800725e:	468b      	mov	fp, r1
 8007260:	2503      	movs	r5, #3
 8007262:	4eac      	ldr	r6, [pc, #688]	; (8007514 <_dtoa_r+0x61c>)
 8007264:	b957      	cbnz	r7, 800727c <_dtoa_r+0x384>
 8007266:	4642      	mov	r2, r8
 8007268:	464b      	mov	r3, r9
 800726a:	4650      	mov	r0, sl
 800726c:	4659      	mov	r1, fp
 800726e:	f7f9 faed 	bl	800084c <__aeabi_ddiv>
 8007272:	4682      	mov	sl, r0
 8007274:	468b      	mov	fp, r1
 8007276:	e028      	b.n	80072ca <_dtoa_r+0x3d2>
 8007278:	2502      	movs	r5, #2
 800727a:	e7f2      	b.n	8007262 <_dtoa_r+0x36a>
 800727c:	07f9      	lsls	r1, r7, #31
 800727e:	d508      	bpl.n	8007292 <_dtoa_r+0x39a>
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007288:	f7f9 f9b6 	bl	80005f8 <__aeabi_dmul>
 800728c:	3501      	adds	r5, #1
 800728e:	4680      	mov	r8, r0
 8007290:	4689      	mov	r9, r1
 8007292:	107f      	asrs	r7, r7, #1
 8007294:	3608      	adds	r6, #8
 8007296:	e7e5      	b.n	8007264 <_dtoa_r+0x36c>
 8007298:	f000 809b 	beq.w	80073d2 <_dtoa_r+0x4da>
 800729c:	9b00      	ldr	r3, [sp, #0]
 800729e:	4f9d      	ldr	r7, [pc, #628]	; (8007514 <_dtoa_r+0x61c>)
 80072a0:	425e      	negs	r6, r3
 80072a2:	4b9b      	ldr	r3, [pc, #620]	; (8007510 <_dtoa_r+0x618>)
 80072a4:	f006 020f 	and.w	r2, r6, #15
 80072a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	ec51 0b19 	vmov	r0, r1, d9
 80072b4:	f7f9 f9a0 	bl	80005f8 <__aeabi_dmul>
 80072b8:	1136      	asrs	r6, r6, #4
 80072ba:	4682      	mov	sl, r0
 80072bc:	468b      	mov	fp, r1
 80072be:	2300      	movs	r3, #0
 80072c0:	2502      	movs	r5, #2
 80072c2:	2e00      	cmp	r6, #0
 80072c4:	d17a      	bne.n	80073bc <_dtoa_r+0x4c4>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1d3      	bne.n	8007272 <_dtoa_r+0x37a>
 80072ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8082 	beq.w	80073d6 <_dtoa_r+0x4de>
 80072d2:	4b91      	ldr	r3, [pc, #580]	; (8007518 <_dtoa_r+0x620>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	4650      	mov	r0, sl
 80072d8:	4659      	mov	r1, fp
 80072da:	f7f9 fbff 	bl	8000adc <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d079      	beq.n	80073d6 <_dtoa_r+0x4de>
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d076      	beq.n	80073d6 <_dtoa_r+0x4de>
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dd36      	ble.n	800735c <_dtoa_r+0x464>
 80072ee:	9b00      	ldr	r3, [sp, #0]
 80072f0:	4650      	mov	r0, sl
 80072f2:	4659      	mov	r1, fp
 80072f4:	1e5f      	subs	r7, r3, #1
 80072f6:	2200      	movs	r2, #0
 80072f8:	4b88      	ldr	r3, [pc, #544]	; (800751c <_dtoa_r+0x624>)
 80072fa:	f7f9 f97d 	bl	80005f8 <__aeabi_dmul>
 80072fe:	9e02      	ldr	r6, [sp, #8]
 8007300:	4682      	mov	sl, r0
 8007302:	468b      	mov	fp, r1
 8007304:	3501      	adds	r5, #1
 8007306:	4628      	mov	r0, r5
 8007308:	f7f9 f90c 	bl	8000524 <__aeabi_i2d>
 800730c:	4652      	mov	r2, sl
 800730e:	465b      	mov	r3, fp
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	4b82      	ldr	r3, [pc, #520]	; (8007520 <_dtoa_r+0x628>)
 8007316:	2200      	movs	r2, #0
 8007318:	f7f8 ffb8 	bl	800028c <__adddf3>
 800731c:	46d0      	mov	r8, sl
 800731e:	46d9      	mov	r9, fp
 8007320:	4682      	mov	sl, r0
 8007322:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007326:	2e00      	cmp	r6, #0
 8007328:	d158      	bne.n	80073dc <_dtoa_r+0x4e4>
 800732a:	4b7e      	ldr	r3, [pc, #504]	; (8007524 <_dtoa_r+0x62c>)
 800732c:	2200      	movs	r2, #0
 800732e:	4640      	mov	r0, r8
 8007330:	4649      	mov	r1, r9
 8007332:	f7f8 ffa9 	bl	8000288 <__aeabi_dsub>
 8007336:	4652      	mov	r2, sl
 8007338:	465b      	mov	r3, fp
 800733a:	4680      	mov	r8, r0
 800733c:	4689      	mov	r9, r1
 800733e:	f7f9 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8007342:	2800      	cmp	r0, #0
 8007344:	f040 8295 	bne.w	8007872 <_dtoa_r+0x97a>
 8007348:	4652      	mov	r2, sl
 800734a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800734e:	4640      	mov	r0, r8
 8007350:	4649      	mov	r1, r9
 8007352:	f7f9 fbc3 	bl	8000adc <__aeabi_dcmplt>
 8007356:	2800      	cmp	r0, #0
 8007358:	f040 8289 	bne.w	800786e <_dtoa_r+0x976>
 800735c:	ec5b ab19 	vmov	sl, fp, d9
 8007360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007362:	2b00      	cmp	r3, #0
 8007364:	f2c0 8148 	blt.w	80075f8 <_dtoa_r+0x700>
 8007368:	9a00      	ldr	r2, [sp, #0]
 800736a:	2a0e      	cmp	r2, #14
 800736c:	f300 8144 	bgt.w	80075f8 <_dtoa_r+0x700>
 8007370:	4b67      	ldr	r3, [pc, #412]	; (8007510 <_dtoa_r+0x618>)
 8007372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007376:	e9d3 8900 	ldrd	r8, r9, [r3]
 800737a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737c:	2b00      	cmp	r3, #0
 800737e:	f280 80d5 	bge.w	800752c <_dtoa_r+0x634>
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f300 80d1 	bgt.w	800752c <_dtoa_r+0x634>
 800738a:	f040 826f 	bne.w	800786c <_dtoa_r+0x974>
 800738e:	4b65      	ldr	r3, [pc, #404]	; (8007524 <_dtoa_r+0x62c>)
 8007390:	2200      	movs	r2, #0
 8007392:	4640      	mov	r0, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f7f9 f92f 	bl	80005f8 <__aeabi_dmul>
 800739a:	4652      	mov	r2, sl
 800739c:	465b      	mov	r3, fp
 800739e:	f7f9 fbb1 	bl	8000b04 <__aeabi_dcmpge>
 80073a2:	9e03      	ldr	r6, [sp, #12]
 80073a4:	4637      	mov	r7, r6
 80073a6:	2800      	cmp	r0, #0
 80073a8:	f040 8245 	bne.w	8007836 <_dtoa_r+0x93e>
 80073ac:	9d01      	ldr	r5, [sp, #4]
 80073ae:	2331      	movs	r3, #49	; 0x31
 80073b0:	f805 3b01 	strb.w	r3, [r5], #1
 80073b4:	9b00      	ldr	r3, [sp, #0]
 80073b6:	3301      	adds	r3, #1
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	e240      	b.n	800783e <_dtoa_r+0x946>
 80073bc:	07f2      	lsls	r2, r6, #31
 80073be:	d505      	bpl.n	80073cc <_dtoa_r+0x4d4>
 80073c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c4:	f7f9 f918 	bl	80005f8 <__aeabi_dmul>
 80073c8:	3501      	adds	r5, #1
 80073ca:	2301      	movs	r3, #1
 80073cc:	1076      	asrs	r6, r6, #1
 80073ce:	3708      	adds	r7, #8
 80073d0:	e777      	b.n	80072c2 <_dtoa_r+0x3ca>
 80073d2:	2502      	movs	r5, #2
 80073d4:	e779      	b.n	80072ca <_dtoa_r+0x3d2>
 80073d6:	9f00      	ldr	r7, [sp, #0]
 80073d8:	9e03      	ldr	r6, [sp, #12]
 80073da:	e794      	b.n	8007306 <_dtoa_r+0x40e>
 80073dc:	9901      	ldr	r1, [sp, #4]
 80073de:	4b4c      	ldr	r3, [pc, #304]	; (8007510 <_dtoa_r+0x618>)
 80073e0:	4431      	add	r1, r6
 80073e2:	910d      	str	r1, [sp, #52]	; 0x34
 80073e4:	9908      	ldr	r1, [sp, #32]
 80073e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073ee:	2900      	cmp	r1, #0
 80073f0:	d043      	beq.n	800747a <_dtoa_r+0x582>
 80073f2:	494d      	ldr	r1, [pc, #308]	; (8007528 <_dtoa_r+0x630>)
 80073f4:	2000      	movs	r0, #0
 80073f6:	f7f9 fa29 	bl	800084c <__aeabi_ddiv>
 80073fa:	4652      	mov	r2, sl
 80073fc:	465b      	mov	r3, fp
 80073fe:	f7f8 ff43 	bl	8000288 <__aeabi_dsub>
 8007402:	9d01      	ldr	r5, [sp, #4]
 8007404:	4682      	mov	sl, r0
 8007406:	468b      	mov	fp, r1
 8007408:	4649      	mov	r1, r9
 800740a:	4640      	mov	r0, r8
 800740c:	f7f9 fba4 	bl	8000b58 <__aeabi_d2iz>
 8007410:	4606      	mov	r6, r0
 8007412:	f7f9 f887 	bl	8000524 <__aeabi_i2d>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f8 ff33 	bl	8000288 <__aeabi_dsub>
 8007422:	3630      	adds	r6, #48	; 0x30
 8007424:	f805 6b01 	strb.w	r6, [r5], #1
 8007428:	4652      	mov	r2, sl
 800742a:	465b      	mov	r3, fp
 800742c:	4680      	mov	r8, r0
 800742e:	4689      	mov	r9, r1
 8007430:	f7f9 fb54 	bl	8000adc <__aeabi_dcmplt>
 8007434:	2800      	cmp	r0, #0
 8007436:	d163      	bne.n	8007500 <_dtoa_r+0x608>
 8007438:	4642      	mov	r2, r8
 800743a:	464b      	mov	r3, r9
 800743c:	4936      	ldr	r1, [pc, #216]	; (8007518 <_dtoa_r+0x620>)
 800743e:	2000      	movs	r0, #0
 8007440:	f7f8 ff22 	bl	8000288 <__aeabi_dsub>
 8007444:	4652      	mov	r2, sl
 8007446:	465b      	mov	r3, fp
 8007448:	f7f9 fb48 	bl	8000adc <__aeabi_dcmplt>
 800744c:	2800      	cmp	r0, #0
 800744e:	f040 80b5 	bne.w	80075bc <_dtoa_r+0x6c4>
 8007452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007454:	429d      	cmp	r5, r3
 8007456:	d081      	beq.n	800735c <_dtoa_r+0x464>
 8007458:	4b30      	ldr	r3, [pc, #192]	; (800751c <_dtoa_r+0x624>)
 800745a:	2200      	movs	r2, #0
 800745c:	4650      	mov	r0, sl
 800745e:	4659      	mov	r1, fp
 8007460:	f7f9 f8ca 	bl	80005f8 <__aeabi_dmul>
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <_dtoa_r+0x624>)
 8007466:	4682      	mov	sl, r0
 8007468:	468b      	mov	fp, r1
 800746a:	4640      	mov	r0, r8
 800746c:	4649      	mov	r1, r9
 800746e:	2200      	movs	r2, #0
 8007470:	f7f9 f8c2 	bl	80005f8 <__aeabi_dmul>
 8007474:	4680      	mov	r8, r0
 8007476:	4689      	mov	r9, r1
 8007478:	e7c6      	b.n	8007408 <_dtoa_r+0x510>
 800747a:	4650      	mov	r0, sl
 800747c:	4659      	mov	r1, fp
 800747e:	f7f9 f8bb 	bl	80005f8 <__aeabi_dmul>
 8007482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007484:	9d01      	ldr	r5, [sp, #4]
 8007486:	930f      	str	r3, [sp, #60]	; 0x3c
 8007488:	4682      	mov	sl, r0
 800748a:	468b      	mov	fp, r1
 800748c:	4649      	mov	r1, r9
 800748e:	4640      	mov	r0, r8
 8007490:	f7f9 fb62 	bl	8000b58 <__aeabi_d2iz>
 8007494:	4606      	mov	r6, r0
 8007496:	f7f9 f845 	bl	8000524 <__aeabi_i2d>
 800749a:	3630      	adds	r6, #48	; 0x30
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	f7f8 fef0 	bl	8000288 <__aeabi_dsub>
 80074a8:	f805 6b01 	strb.w	r6, [r5], #1
 80074ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ae:	429d      	cmp	r5, r3
 80074b0:	4680      	mov	r8, r0
 80074b2:	4689      	mov	r9, r1
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	d124      	bne.n	8007504 <_dtoa_r+0x60c>
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <_dtoa_r+0x630>)
 80074bc:	4650      	mov	r0, sl
 80074be:	4659      	mov	r1, fp
 80074c0:	f7f8 fee4 	bl	800028c <__adddf3>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4640      	mov	r0, r8
 80074ca:	4649      	mov	r1, r9
 80074cc:	f7f9 fb24 	bl	8000b18 <__aeabi_dcmpgt>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d173      	bne.n	80075bc <_dtoa_r+0x6c4>
 80074d4:	4652      	mov	r2, sl
 80074d6:	465b      	mov	r3, fp
 80074d8:	4913      	ldr	r1, [pc, #76]	; (8007528 <_dtoa_r+0x630>)
 80074da:	2000      	movs	r0, #0
 80074dc:	f7f8 fed4 	bl	8000288 <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4640      	mov	r0, r8
 80074e6:	4649      	mov	r1, r9
 80074e8:	f7f9 faf8 	bl	8000adc <__aeabi_dcmplt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f43f af35 	beq.w	800735c <_dtoa_r+0x464>
 80074f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80074f4:	1e6b      	subs	r3, r5, #1
 80074f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80074f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074fc:	2b30      	cmp	r3, #48	; 0x30
 80074fe:	d0f8      	beq.n	80074f2 <_dtoa_r+0x5fa>
 8007500:	9700      	str	r7, [sp, #0]
 8007502:	e049      	b.n	8007598 <_dtoa_r+0x6a0>
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <_dtoa_r+0x624>)
 8007506:	f7f9 f877 	bl	80005f8 <__aeabi_dmul>
 800750a:	4680      	mov	r8, r0
 800750c:	4689      	mov	r9, r1
 800750e:	e7bd      	b.n	800748c <_dtoa_r+0x594>
 8007510:	08009578 	.word	0x08009578
 8007514:	08009550 	.word	0x08009550
 8007518:	3ff00000 	.word	0x3ff00000
 800751c:	40240000 	.word	0x40240000
 8007520:	401c0000 	.word	0x401c0000
 8007524:	40140000 	.word	0x40140000
 8007528:	3fe00000 	.word	0x3fe00000
 800752c:	9d01      	ldr	r5, [sp, #4]
 800752e:	4656      	mov	r6, sl
 8007530:	465f      	mov	r7, fp
 8007532:	4642      	mov	r2, r8
 8007534:	464b      	mov	r3, r9
 8007536:	4630      	mov	r0, r6
 8007538:	4639      	mov	r1, r7
 800753a:	f7f9 f987 	bl	800084c <__aeabi_ddiv>
 800753e:	f7f9 fb0b 	bl	8000b58 <__aeabi_d2iz>
 8007542:	4682      	mov	sl, r0
 8007544:	f7f8 ffee 	bl	8000524 <__aeabi_i2d>
 8007548:	4642      	mov	r2, r8
 800754a:	464b      	mov	r3, r9
 800754c:	f7f9 f854 	bl	80005f8 <__aeabi_dmul>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4630      	mov	r0, r6
 8007556:	4639      	mov	r1, r7
 8007558:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800755c:	f7f8 fe94 	bl	8000288 <__aeabi_dsub>
 8007560:	f805 6b01 	strb.w	r6, [r5], #1
 8007564:	9e01      	ldr	r6, [sp, #4]
 8007566:	9f03      	ldr	r7, [sp, #12]
 8007568:	1bae      	subs	r6, r5, r6
 800756a:	42b7      	cmp	r7, r6
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	d135      	bne.n	80075de <_dtoa_r+0x6e6>
 8007572:	f7f8 fe8b 	bl	800028c <__adddf3>
 8007576:	4642      	mov	r2, r8
 8007578:	464b      	mov	r3, r9
 800757a:	4606      	mov	r6, r0
 800757c:	460f      	mov	r7, r1
 800757e:	f7f9 facb 	bl	8000b18 <__aeabi_dcmpgt>
 8007582:	b9d0      	cbnz	r0, 80075ba <_dtoa_r+0x6c2>
 8007584:	4642      	mov	r2, r8
 8007586:	464b      	mov	r3, r9
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f9 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007590:	b110      	cbz	r0, 8007598 <_dtoa_r+0x6a0>
 8007592:	f01a 0f01 	tst.w	sl, #1
 8007596:	d110      	bne.n	80075ba <_dtoa_r+0x6c2>
 8007598:	4620      	mov	r0, r4
 800759a:	ee18 1a10 	vmov	r1, s16
 800759e:	f000 fd13 	bl	8007fc8 <_Bfree>
 80075a2:	2300      	movs	r3, #0
 80075a4:	9800      	ldr	r0, [sp, #0]
 80075a6:	702b      	strb	r3, [r5, #0]
 80075a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075aa:	3001      	adds	r0, #1
 80075ac:	6018      	str	r0, [r3, #0]
 80075ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f43f acf1 	beq.w	8006f98 <_dtoa_r+0xa0>
 80075b6:	601d      	str	r5, [r3, #0]
 80075b8:	e4ee      	b.n	8006f98 <_dtoa_r+0xa0>
 80075ba:	9f00      	ldr	r7, [sp, #0]
 80075bc:	462b      	mov	r3, r5
 80075be:	461d      	mov	r5, r3
 80075c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075c4:	2a39      	cmp	r2, #57	; 0x39
 80075c6:	d106      	bne.n	80075d6 <_dtoa_r+0x6de>
 80075c8:	9a01      	ldr	r2, [sp, #4]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d1f7      	bne.n	80075be <_dtoa_r+0x6c6>
 80075ce:	9901      	ldr	r1, [sp, #4]
 80075d0:	2230      	movs	r2, #48	; 0x30
 80075d2:	3701      	adds	r7, #1
 80075d4:	700a      	strb	r2, [r1, #0]
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	3201      	adds	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	e790      	b.n	8007500 <_dtoa_r+0x608>
 80075de:	4ba6      	ldr	r3, [pc, #664]	; (8007878 <_dtoa_r+0x980>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	f7f9 f809 	bl	80005f8 <__aeabi_dmul>
 80075e6:	2200      	movs	r2, #0
 80075e8:	2300      	movs	r3, #0
 80075ea:	4606      	mov	r6, r0
 80075ec:	460f      	mov	r7, r1
 80075ee:	f7f9 fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d09d      	beq.n	8007532 <_dtoa_r+0x63a>
 80075f6:	e7cf      	b.n	8007598 <_dtoa_r+0x6a0>
 80075f8:	9a08      	ldr	r2, [sp, #32]
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	f000 80d7 	beq.w	80077ae <_dtoa_r+0x8b6>
 8007600:	9a06      	ldr	r2, [sp, #24]
 8007602:	2a01      	cmp	r2, #1
 8007604:	f300 80ba 	bgt.w	800777c <_dtoa_r+0x884>
 8007608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800760a:	2a00      	cmp	r2, #0
 800760c:	f000 80b2 	beq.w	8007774 <_dtoa_r+0x87c>
 8007610:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007614:	9e07      	ldr	r6, [sp, #28]
 8007616:	9d04      	ldr	r5, [sp, #16]
 8007618:	9a04      	ldr	r2, [sp, #16]
 800761a:	441a      	add	r2, r3
 800761c:	9204      	str	r2, [sp, #16]
 800761e:	9a05      	ldr	r2, [sp, #20]
 8007620:	2101      	movs	r1, #1
 8007622:	441a      	add	r2, r3
 8007624:	4620      	mov	r0, r4
 8007626:	9205      	str	r2, [sp, #20]
 8007628:	f000 fd86 	bl	8008138 <__i2b>
 800762c:	4607      	mov	r7, r0
 800762e:	2d00      	cmp	r5, #0
 8007630:	dd0c      	ble.n	800764c <_dtoa_r+0x754>
 8007632:	9b05      	ldr	r3, [sp, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	dd09      	ble.n	800764c <_dtoa_r+0x754>
 8007638:	42ab      	cmp	r3, r5
 800763a:	9a04      	ldr	r2, [sp, #16]
 800763c:	bfa8      	it	ge
 800763e:	462b      	movge	r3, r5
 8007640:	1ad2      	subs	r2, r2, r3
 8007642:	9204      	str	r2, [sp, #16]
 8007644:	9a05      	ldr	r2, [sp, #20]
 8007646:	1aed      	subs	r5, r5, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	9305      	str	r3, [sp, #20]
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	b31b      	cbz	r3, 8007698 <_dtoa_r+0x7a0>
 8007650:	9b08      	ldr	r3, [sp, #32]
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 80af 	beq.w	80077b6 <_dtoa_r+0x8be>
 8007658:	2e00      	cmp	r6, #0
 800765a:	dd13      	ble.n	8007684 <_dtoa_r+0x78c>
 800765c:	4639      	mov	r1, r7
 800765e:	4632      	mov	r2, r6
 8007660:	4620      	mov	r0, r4
 8007662:	f000 fe29 	bl	80082b8 <__pow5mult>
 8007666:	ee18 2a10 	vmov	r2, s16
 800766a:	4601      	mov	r1, r0
 800766c:	4607      	mov	r7, r0
 800766e:	4620      	mov	r0, r4
 8007670:	f000 fd78 	bl	8008164 <__multiply>
 8007674:	ee18 1a10 	vmov	r1, s16
 8007678:	4680      	mov	r8, r0
 800767a:	4620      	mov	r0, r4
 800767c:	f000 fca4 	bl	8007fc8 <_Bfree>
 8007680:	ee08 8a10 	vmov	s16, r8
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	1b9a      	subs	r2, r3, r6
 8007688:	d006      	beq.n	8007698 <_dtoa_r+0x7a0>
 800768a:	ee18 1a10 	vmov	r1, s16
 800768e:	4620      	mov	r0, r4
 8007690:	f000 fe12 	bl	80082b8 <__pow5mult>
 8007694:	ee08 0a10 	vmov	s16, r0
 8007698:	2101      	movs	r1, #1
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fd4c 	bl	8008138 <__i2b>
 80076a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	4606      	mov	r6, r0
 80076a6:	f340 8088 	ble.w	80077ba <_dtoa_r+0x8c2>
 80076aa:	461a      	mov	r2, r3
 80076ac:	4601      	mov	r1, r0
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 fe02 	bl	80082b8 <__pow5mult>
 80076b4:	9b06      	ldr	r3, [sp, #24]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	4606      	mov	r6, r0
 80076ba:	f340 8081 	ble.w	80077c0 <_dtoa_r+0x8c8>
 80076be:	f04f 0800 	mov.w	r8, #0
 80076c2:	6933      	ldr	r3, [r6, #16]
 80076c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076c8:	6918      	ldr	r0, [r3, #16]
 80076ca:	f000 fce5 	bl	8008098 <__hi0bits>
 80076ce:	f1c0 0020 	rsb	r0, r0, #32
 80076d2:	9b05      	ldr	r3, [sp, #20]
 80076d4:	4418      	add	r0, r3
 80076d6:	f010 001f 	ands.w	r0, r0, #31
 80076da:	f000 8092 	beq.w	8007802 <_dtoa_r+0x90a>
 80076de:	f1c0 0320 	rsb	r3, r0, #32
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	f340 808a 	ble.w	80077fc <_dtoa_r+0x904>
 80076e8:	f1c0 001c 	rsb	r0, r0, #28
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	4403      	add	r3, r0
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	9b05      	ldr	r3, [sp, #20]
 80076f4:	4403      	add	r3, r0
 80076f6:	4405      	add	r5, r0
 80076f8:	9305      	str	r3, [sp, #20]
 80076fa:	9b04      	ldr	r3, [sp, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd07      	ble.n	8007710 <_dtoa_r+0x818>
 8007700:	ee18 1a10 	vmov	r1, s16
 8007704:	461a      	mov	r2, r3
 8007706:	4620      	mov	r0, r4
 8007708:	f000 fe30 	bl	800836c <__lshift>
 800770c:	ee08 0a10 	vmov	s16, r0
 8007710:	9b05      	ldr	r3, [sp, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	dd05      	ble.n	8007722 <_dtoa_r+0x82a>
 8007716:	4631      	mov	r1, r6
 8007718:	461a      	mov	r2, r3
 800771a:	4620      	mov	r0, r4
 800771c:	f000 fe26 	bl	800836c <__lshift>
 8007720:	4606      	mov	r6, r0
 8007722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d06e      	beq.n	8007806 <_dtoa_r+0x90e>
 8007728:	ee18 0a10 	vmov	r0, s16
 800772c:	4631      	mov	r1, r6
 800772e:	f000 fe8d 	bl	800844c <__mcmp>
 8007732:	2800      	cmp	r0, #0
 8007734:	da67      	bge.n	8007806 <_dtoa_r+0x90e>
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	3b01      	subs	r3, #1
 800773a:	ee18 1a10 	vmov	r1, s16
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	220a      	movs	r2, #10
 8007742:	2300      	movs	r3, #0
 8007744:	4620      	mov	r0, r4
 8007746:	f000 fc61 	bl	800800c <__multadd>
 800774a:	9b08      	ldr	r3, [sp, #32]
 800774c:	ee08 0a10 	vmov	s16, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 81b1 	beq.w	8007ab8 <_dtoa_r+0xbc0>
 8007756:	2300      	movs	r3, #0
 8007758:	4639      	mov	r1, r7
 800775a:	220a      	movs	r2, #10
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fc55 	bl	800800c <__multadd>
 8007762:	9b02      	ldr	r3, [sp, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	4607      	mov	r7, r0
 8007768:	f300 808e 	bgt.w	8007888 <_dtoa_r+0x990>
 800776c:	9b06      	ldr	r3, [sp, #24]
 800776e:	2b02      	cmp	r3, #2
 8007770:	dc51      	bgt.n	8007816 <_dtoa_r+0x91e>
 8007772:	e089      	b.n	8007888 <_dtoa_r+0x990>
 8007774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007776:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800777a:	e74b      	b.n	8007614 <_dtoa_r+0x71c>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	1e5e      	subs	r6, r3, #1
 8007780:	9b07      	ldr	r3, [sp, #28]
 8007782:	42b3      	cmp	r3, r6
 8007784:	bfbf      	itttt	lt
 8007786:	9b07      	ldrlt	r3, [sp, #28]
 8007788:	9607      	strlt	r6, [sp, #28]
 800778a:	1af2      	sublt	r2, r6, r3
 800778c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800778e:	bfb6      	itet	lt
 8007790:	189b      	addlt	r3, r3, r2
 8007792:	1b9e      	subge	r6, r3, r6
 8007794:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	bfb8      	it	lt
 800779a:	2600      	movlt	r6, #0
 800779c:	2b00      	cmp	r3, #0
 800779e:	bfb7      	itett	lt
 80077a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80077a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80077a8:	1a9d      	sublt	r5, r3, r2
 80077aa:	2300      	movlt	r3, #0
 80077ac:	e734      	b.n	8007618 <_dtoa_r+0x720>
 80077ae:	9e07      	ldr	r6, [sp, #28]
 80077b0:	9d04      	ldr	r5, [sp, #16]
 80077b2:	9f08      	ldr	r7, [sp, #32]
 80077b4:	e73b      	b.n	800762e <_dtoa_r+0x736>
 80077b6:	9a07      	ldr	r2, [sp, #28]
 80077b8:	e767      	b.n	800768a <_dtoa_r+0x792>
 80077ba:	9b06      	ldr	r3, [sp, #24]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	dc18      	bgt.n	80077f2 <_dtoa_r+0x8fa>
 80077c0:	f1ba 0f00 	cmp.w	sl, #0
 80077c4:	d115      	bne.n	80077f2 <_dtoa_r+0x8fa>
 80077c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077ca:	b993      	cbnz	r3, 80077f2 <_dtoa_r+0x8fa>
 80077cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077d0:	0d1b      	lsrs	r3, r3, #20
 80077d2:	051b      	lsls	r3, r3, #20
 80077d4:	b183      	cbz	r3, 80077f8 <_dtoa_r+0x900>
 80077d6:	9b04      	ldr	r3, [sp, #16]
 80077d8:	3301      	adds	r3, #1
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	9b05      	ldr	r3, [sp, #20]
 80077de:	3301      	adds	r3, #1
 80077e0:	9305      	str	r3, [sp, #20]
 80077e2:	f04f 0801 	mov.w	r8, #1
 80077e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f47f af6a 	bne.w	80076c2 <_dtoa_r+0x7ca>
 80077ee:	2001      	movs	r0, #1
 80077f0:	e76f      	b.n	80076d2 <_dtoa_r+0x7da>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	e7f6      	b.n	80077e6 <_dtoa_r+0x8ee>
 80077f8:	4698      	mov	r8, r3
 80077fa:	e7f4      	b.n	80077e6 <_dtoa_r+0x8ee>
 80077fc:	f43f af7d 	beq.w	80076fa <_dtoa_r+0x802>
 8007800:	4618      	mov	r0, r3
 8007802:	301c      	adds	r0, #28
 8007804:	e772      	b.n	80076ec <_dtoa_r+0x7f4>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc37      	bgt.n	800787c <_dtoa_r+0x984>
 800780c:	9b06      	ldr	r3, [sp, #24]
 800780e:	2b02      	cmp	r3, #2
 8007810:	dd34      	ble.n	800787c <_dtoa_r+0x984>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	9302      	str	r3, [sp, #8]
 8007816:	9b02      	ldr	r3, [sp, #8]
 8007818:	b96b      	cbnz	r3, 8007836 <_dtoa_r+0x93e>
 800781a:	4631      	mov	r1, r6
 800781c:	2205      	movs	r2, #5
 800781e:	4620      	mov	r0, r4
 8007820:	f000 fbf4 	bl	800800c <__multadd>
 8007824:	4601      	mov	r1, r0
 8007826:	4606      	mov	r6, r0
 8007828:	ee18 0a10 	vmov	r0, s16
 800782c:	f000 fe0e 	bl	800844c <__mcmp>
 8007830:	2800      	cmp	r0, #0
 8007832:	f73f adbb 	bgt.w	80073ac <_dtoa_r+0x4b4>
 8007836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007838:	9d01      	ldr	r5, [sp, #4]
 800783a:	43db      	mvns	r3, r3
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f04f 0800 	mov.w	r8, #0
 8007842:	4631      	mov	r1, r6
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fbbf 	bl	8007fc8 <_Bfree>
 800784a:	2f00      	cmp	r7, #0
 800784c:	f43f aea4 	beq.w	8007598 <_dtoa_r+0x6a0>
 8007850:	f1b8 0f00 	cmp.w	r8, #0
 8007854:	d005      	beq.n	8007862 <_dtoa_r+0x96a>
 8007856:	45b8      	cmp	r8, r7
 8007858:	d003      	beq.n	8007862 <_dtoa_r+0x96a>
 800785a:	4641      	mov	r1, r8
 800785c:	4620      	mov	r0, r4
 800785e:	f000 fbb3 	bl	8007fc8 <_Bfree>
 8007862:	4639      	mov	r1, r7
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fbaf 	bl	8007fc8 <_Bfree>
 800786a:	e695      	b.n	8007598 <_dtoa_r+0x6a0>
 800786c:	2600      	movs	r6, #0
 800786e:	4637      	mov	r7, r6
 8007870:	e7e1      	b.n	8007836 <_dtoa_r+0x93e>
 8007872:	9700      	str	r7, [sp, #0]
 8007874:	4637      	mov	r7, r6
 8007876:	e599      	b.n	80073ac <_dtoa_r+0x4b4>
 8007878:	40240000 	.word	0x40240000
 800787c:	9b08      	ldr	r3, [sp, #32]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 80ca 	beq.w	8007a18 <_dtoa_r+0xb20>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	9302      	str	r3, [sp, #8]
 8007888:	2d00      	cmp	r5, #0
 800788a:	dd05      	ble.n	8007898 <_dtoa_r+0x9a0>
 800788c:	4639      	mov	r1, r7
 800788e:	462a      	mov	r2, r5
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fd6b 	bl	800836c <__lshift>
 8007896:	4607      	mov	r7, r0
 8007898:	f1b8 0f00 	cmp.w	r8, #0
 800789c:	d05b      	beq.n	8007956 <_dtoa_r+0xa5e>
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fb51 	bl	8007f48 <_Balloc>
 80078a6:	4605      	mov	r5, r0
 80078a8:	b928      	cbnz	r0, 80078b6 <_dtoa_r+0x9be>
 80078aa:	4b87      	ldr	r3, [pc, #540]	; (8007ac8 <_dtoa_r+0xbd0>)
 80078ac:	4602      	mov	r2, r0
 80078ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80078b2:	f7ff bb3b 	b.w	8006f2c <_dtoa_r+0x34>
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	3202      	adds	r2, #2
 80078ba:	0092      	lsls	r2, r2, #2
 80078bc:	f107 010c 	add.w	r1, r7, #12
 80078c0:	300c      	adds	r0, #12
 80078c2:	f000 fb33 	bl	8007f2c <memcpy>
 80078c6:	2201      	movs	r2, #1
 80078c8:	4629      	mov	r1, r5
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 fd4e 	bl	800836c <__lshift>
 80078d0:	9b01      	ldr	r3, [sp, #4]
 80078d2:	f103 0901 	add.w	r9, r3, #1
 80078d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80078da:	4413      	add	r3, r2
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	f00a 0301 	and.w	r3, sl, #1
 80078e2:	46b8      	mov	r8, r7
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	4607      	mov	r7, r0
 80078e8:	4631      	mov	r1, r6
 80078ea:	ee18 0a10 	vmov	r0, s16
 80078ee:	f7ff fa75 	bl	8006ddc <quorem>
 80078f2:	4641      	mov	r1, r8
 80078f4:	9002      	str	r0, [sp, #8]
 80078f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80078fa:	ee18 0a10 	vmov	r0, s16
 80078fe:	f000 fda5 	bl	800844c <__mcmp>
 8007902:	463a      	mov	r2, r7
 8007904:	9003      	str	r0, [sp, #12]
 8007906:	4631      	mov	r1, r6
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fdbb 	bl	8008484 <__mdiff>
 800790e:	68c2      	ldr	r2, [r0, #12]
 8007910:	f109 3bff 	add.w	fp, r9, #4294967295
 8007914:	4605      	mov	r5, r0
 8007916:	bb02      	cbnz	r2, 800795a <_dtoa_r+0xa62>
 8007918:	4601      	mov	r1, r0
 800791a:	ee18 0a10 	vmov	r0, s16
 800791e:	f000 fd95 	bl	800844c <__mcmp>
 8007922:	4602      	mov	r2, r0
 8007924:	4629      	mov	r1, r5
 8007926:	4620      	mov	r0, r4
 8007928:	9207      	str	r2, [sp, #28]
 800792a:	f000 fb4d 	bl	8007fc8 <_Bfree>
 800792e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007932:	ea43 0102 	orr.w	r1, r3, r2
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	430b      	orrs	r3, r1
 800793a:	464d      	mov	r5, r9
 800793c:	d10f      	bne.n	800795e <_dtoa_r+0xa66>
 800793e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007942:	d02a      	beq.n	800799a <_dtoa_r+0xaa2>
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	dd02      	ble.n	8007950 <_dtoa_r+0xa58>
 800794a:	9b02      	ldr	r3, [sp, #8]
 800794c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007950:	f88b a000 	strb.w	sl, [fp]
 8007954:	e775      	b.n	8007842 <_dtoa_r+0x94a>
 8007956:	4638      	mov	r0, r7
 8007958:	e7ba      	b.n	80078d0 <_dtoa_r+0x9d8>
 800795a:	2201      	movs	r2, #1
 800795c:	e7e2      	b.n	8007924 <_dtoa_r+0xa2c>
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	db04      	blt.n	800796e <_dtoa_r+0xa76>
 8007964:	9906      	ldr	r1, [sp, #24]
 8007966:	430b      	orrs	r3, r1
 8007968:	9904      	ldr	r1, [sp, #16]
 800796a:	430b      	orrs	r3, r1
 800796c:	d122      	bne.n	80079b4 <_dtoa_r+0xabc>
 800796e:	2a00      	cmp	r2, #0
 8007970:	ddee      	ble.n	8007950 <_dtoa_r+0xa58>
 8007972:	ee18 1a10 	vmov	r1, s16
 8007976:	2201      	movs	r2, #1
 8007978:	4620      	mov	r0, r4
 800797a:	f000 fcf7 	bl	800836c <__lshift>
 800797e:	4631      	mov	r1, r6
 8007980:	ee08 0a10 	vmov	s16, r0
 8007984:	f000 fd62 	bl	800844c <__mcmp>
 8007988:	2800      	cmp	r0, #0
 800798a:	dc03      	bgt.n	8007994 <_dtoa_r+0xa9c>
 800798c:	d1e0      	bne.n	8007950 <_dtoa_r+0xa58>
 800798e:	f01a 0f01 	tst.w	sl, #1
 8007992:	d0dd      	beq.n	8007950 <_dtoa_r+0xa58>
 8007994:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007998:	d1d7      	bne.n	800794a <_dtoa_r+0xa52>
 800799a:	2339      	movs	r3, #57	; 0x39
 800799c:	f88b 3000 	strb.w	r3, [fp]
 80079a0:	462b      	mov	r3, r5
 80079a2:	461d      	mov	r5, r3
 80079a4:	3b01      	subs	r3, #1
 80079a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80079aa:	2a39      	cmp	r2, #57	; 0x39
 80079ac:	d071      	beq.n	8007a92 <_dtoa_r+0xb9a>
 80079ae:	3201      	adds	r2, #1
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	e746      	b.n	8007842 <_dtoa_r+0x94a>
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	dd07      	ble.n	80079c8 <_dtoa_r+0xad0>
 80079b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079bc:	d0ed      	beq.n	800799a <_dtoa_r+0xaa2>
 80079be:	f10a 0301 	add.w	r3, sl, #1
 80079c2:	f88b 3000 	strb.w	r3, [fp]
 80079c6:	e73c      	b.n	8007842 <_dtoa_r+0x94a>
 80079c8:	9b05      	ldr	r3, [sp, #20]
 80079ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80079ce:	4599      	cmp	r9, r3
 80079d0:	d047      	beq.n	8007a62 <_dtoa_r+0xb6a>
 80079d2:	ee18 1a10 	vmov	r1, s16
 80079d6:	2300      	movs	r3, #0
 80079d8:	220a      	movs	r2, #10
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fb16 	bl	800800c <__multadd>
 80079e0:	45b8      	cmp	r8, r7
 80079e2:	ee08 0a10 	vmov	s16, r0
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	f04f 020a 	mov.w	r2, #10
 80079ee:	4641      	mov	r1, r8
 80079f0:	4620      	mov	r0, r4
 80079f2:	d106      	bne.n	8007a02 <_dtoa_r+0xb0a>
 80079f4:	f000 fb0a 	bl	800800c <__multadd>
 80079f8:	4680      	mov	r8, r0
 80079fa:	4607      	mov	r7, r0
 80079fc:	f109 0901 	add.w	r9, r9, #1
 8007a00:	e772      	b.n	80078e8 <_dtoa_r+0x9f0>
 8007a02:	f000 fb03 	bl	800800c <__multadd>
 8007a06:	4639      	mov	r1, r7
 8007a08:	4680      	mov	r8, r0
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	220a      	movs	r2, #10
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 fafc 	bl	800800c <__multadd>
 8007a14:	4607      	mov	r7, r0
 8007a16:	e7f1      	b.n	80079fc <_dtoa_r+0xb04>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	9302      	str	r3, [sp, #8]
 8007a1c:	9d01      	ldr	r5, [sp, #4]
 8007a1e:	ee18 0a10 	vmov	r0, s16
 8007a22:	4631      	mov	r1, r6
 8007a24:	f7ff f9da 	bl	8006ddc <quorem>
 8007a28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a2c:	9b01      	ldr	r3, [sp, #4]
 8007a2e:	f805 ab01 	strb.w	sl, [r5], #1
 8007a32:	1aea      	subs	r2, r5, r3
 8007a34:	9b02      	ldr	r3, [sp, #8]
 8007a36:	4293      	cmp	r3, r2
 8007a38:	dd09      	ble.n	8007a4e <_dtoa_r+0xb56>
 8007a3a:	ee18 1a10 	vmov	r1, s16
 8007a3e:	2300      	movs	r3, #0
 8007a40:	220a      	movs	r2, #10
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 fae2 	bl	800800c <__multadd>
 8007a48:	ee08 0a10 	vmov	s16, r0
 8007a4c:	e7e7      	b.n	8007a1e <_dtoa_r+0xb26>
 8007a4e:	9b02      	ldr	r3, [sp, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bfc8      	it	gt
 8007a54:	461d      	movgt	r5, r3
 8007a56:	9b01      	ldr	r3, [sp, #4]
 8007a58:	bfd8      	it	le
 8007a5a:	2501      	movle	r5, #1
 8007a5c:	441d      	add	r5, r3
 8007a5e:	f04f 0800 	mov.w	r8, #0
 8007a62:	ee18 1a10 	vmov	r1, s16
 8007a66:	2201      	movs	r2, #1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 fc7f 	bl	800836c <__lshift>
 8007a6e:	4631      	mov	r1, r6
 8007a70:	ee08 0a10 	vmov	s16, r0
 8007a74:	f000 fcea 	bl	800844c <__mcmp>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	dc91      	bgt.n	80079a0 <_dtoa_r+0xaa8>
 8007a7c:	d102      	bne.n	8007a84 <_dtoa_r+0xb8c>
 8007a7e:	f01a 0f01 	tst.w	sl, #1
 8007a82:	d18d      	bne.n	80079a0 <_dtoa_r+0xaa8>
 8007a84:	462b      	mov	r3, r5
 8007a86:	461d      	mov	r5, r3
 8007a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a8c:	2a30      	cmp	r2, #48	; 0x30
 8007a8e:	d0fa      	beq.n	8007a86 <_dtoa_r+0xb8e>
 8007a90:	e6d7      	b.n	8007842 <_dtoa_r+0x94a>
 8007a92:	9a01      	ldr	r2, [sp, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d184      	bne.n	80079a2 <_dtoa_r+0xaaa>
 8007a98:	9b00      	ldr	r3, [sp, #0]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	2331      	movs	r3, #49	; 0x31
 8007aa0:	7013      	strb	r3, [r2, #0]
 8007aa2:	e6ce      	b.n	8007842 <_dtoa_r+0x94a>
 8007aa4:	4b09      	ldr	r3, [pc, #36]	; (8007acc <_dtoa_r+0xbd4>)
 8007aa6:	f7ff ba95 	b.w	8006fd4 <_dtoa_r+0xdc>
 8007aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f47f aa6e 	bne.w	8006f8e <_dtoa_r+0x96>
 8007ab2:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <_dtoa_r+0xbd8>)
 8007ab4:	f7ff ba8e 	b.w	8006fd4 <_dtoa_r+0xdc>
 8007ab8:	9b02      	ldr	r3, [sp, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dcae      	bgt.n	8007a1c <_dtoa_r+0xb24>
 8007abe:	9b06      	ldr	r3, [sp, #24]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	f73f aea8 	bgt.w	8007816 <_dtoa_r+0x91e>
 8007ac6:	e7a9      	b.n	8007a1c <_dtoa_r+0xb24>
 8007ac8:	0800947f 	.word	0x0800947f
 8007acc:	080093dc 	.word	0x080093dc
 8007ad0:	08009400 	.word	0x08009400

08007ad4 <__sflush_r>:
 8007ad4:	898a      	ldrh	r2, [r1, #12]
 8007ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ada:	4605      	mov	r5, r0
 8007adc:	0710      	lsls	r0, r2, #28
 8007ade:	460c      	mov	r4, r1
 8007ae0:	d458      	bmi.n	8007b94 <__sflush_r+0xc0>
 8007ae2:	684b      	ldr	r3, [r1, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dc05      	bgt.n	8007af4 <__sflush_r+0x20>
 8007ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dc02      	bgt.n	8007af4 <__sflush_r+0x20>
 8007aee:	2000      	movs	r0, #0
 8007af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	d0f9      	beq.n	8007aee <__sflush_r+0x1a>
 8007afa:	2300      	movs	r3, #0
 8007afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b00:	682f      	ldr	r7, [r5, #0]
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	d032      	beq.n	8007b6c <__sflush_r+0x98>
 8007b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	075a      	lsls	r2, r3, #29
 8007b0c:	d505      	bpl.n	8007b1a <__sflush_r+0x46>
 8007b0e:	6863      	ldr	r3, [r4, #4]
 8007b10:	1ac0      	subs	r0, r0, r3
 8007b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b14:	b10b      	cbz	r3, 8007b1a <__sflush_r+0x46>
 8007b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b18:	1ac0      	subs	r0, r0, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b20:	6a21      	ldr	r1, [r4, #32]
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b0      	blx	r6
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	d106      	bne.n	8007b3a <__sflush_r+0x66>
 8007b2c:	6829      	ldr	r1, [r5, #0]
 8007b2e:	291d      	cmp	r1, #29
 8007b30:	d82c      	bhi.n	8007b8c <__sflush_r+0xb8>
 8007b32:	4a2a      	ldr	r2, [pc, #168]	; (8007bdc <__sflush_r+0x108>)
 8007b34:	40ca      	lsrs	r2, r1
 8007b36:	07d6      	lsls	r6, r2, #31
 8007b38:	d528      	bpl.n	8007b8c <__sflush_r+0xb8>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	6062      	str	r2, [r4, #4]
 8007b3e:	04d9      	lsls	r1, r3, #19
 8007b40:	6922      	ldr	r2, [r4, #16]
 8007b42:	6022      	str	r2, [r4, #0]
 8007b44:	d504      	bpl.n	8007b50 <__sflush_r+0x7c>
 8007b46:	1c42      	adds	r2, r0, #1
 8007b48:	d101      	bne.n	8007b4e <__sflush_r+0x7a>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	b903      	cbnz	r3, 8007b50 <__sflush_r+0x7c>
 8007b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8007b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b52:	602f      	str	r7, [r5, #0]
 8007b54:	2900      	cmp	r1, #0
 8007b56:	d0ca      	beq.n	8007aee <__sflush_r+0x1a>
 8007b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d002      	beq.n	8007b66 <__sflush_r+0x92>
 8007b60:	4628      	mov	r0, r5
 8007b62:	f000 fd8b 	bl	800867c <_free_r>
 8007b66:	2000      	movs	r0, #0
 8007b68:	6360      	str	r0, [r4, #52]	; 0x34
 8007b6a:	e7c1      	b.n	8007af0 <__sflush_r+0x1c>
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b0      	blx	r6
 8007b74:	1c41      	adds	r1, r0, #1
 8007b76:	d1c7      	bne.n	8007b08 <__sflush_r+0x34>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0c4      	beq.n	8007b08 <__sflush_r+0x34>
 8007b7e:	2b1d      	cmp	r3, #29
 8007b80:	d001      	beq.n	8007b86 <__sflush_r+0xb2>
 8007b82:	2b16      	cmp	r3, #22
 8007b84:	d101      	bne.n	8007b8a <__sflush_r+0xb6>
 8007b86:	602f      	str	r7, [r5, #0]
 8007b88:	e7b1      	b.n	8007aee <__sflush_r+0x1a>
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	e7ad      	b.n	8007af0 <__sflush_r+0x1c>
 8007b94:	690f      	ldr	r7, [r1, #16]
 8007b96:	2f00      	cmp	r7, #0
 8007b98:	d0a9      	beq.n	8007aee <__sflush_r+0x1a>
 8007b9a:	0793      	lsls	r3, r2, #30
 8007b9c:	680e      	ldr	r6, [r1, #0]
 8007b9e:	bf08      	it	eq
 8007ba0:	694b      	ldreq	r3, [r1, #20]
 8007ba2:	600f      	str	r7, [r1, #0]
 8007ba4:	bf18      	it	ne
 8007ba6:	2300      	movne	r3, #0
 8007ba8:	eba6 0807 	sub.w	r8, r6, r7
 8007bac:	608b      	str	r3, [r1, #8]
 8007bae:	f1b8 0f00 	cmp.w	r8, #0
 8007bb2:	dd9c      	ble.n	8007aee <__sflush_r+0x1a>
 8007bb4:	6a21      	ldr	r1, [r4, #32]
 8007bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bb8:	4643      	mov	r3, r8
 8007bba:	463a      	mov	r2, r7
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b0      	blx	r6
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	dc06      	bgt.n	8007bd2 <__sflush_r+0xfe>
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	e78e      	b.n	8007af0 <__sflush_r+0x1c>
 8007bd2:	4407      	add	r7, r0
 8007bd4:	eba8 0800 	sub.w	r8, r8, r0
 8007bd8:	e7e9      	b.n	8007bae <__sflush_r+0xda>
 8007bda:	bf00      	nop
 8007bdc:	20400001 	.word	0x20400001

08007be0 <_fflush_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	690b      	ldr	r3, [r1, #16]
 8007be4:	4605      	mov	r5, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	b913      	cbnz	r3, 8007bf0 <_fflush_r+0x10>
 8007bea:	2500      	movs	r5, #0
 8007bec:	4628      	mov	r0, r5
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	b118      	cbz	r0, 8007bfa <_fflush_r+0x1a>
 8007bf2:	6983      	ldr	r3, [r0, #24]
 8007bf4:	b90b      	cbnz	r3, 8007bfa <_fflush_r+0x1a>
 8007bf6:	f000 f887 	bl	8007d08 <__sinit>
 8007bfa:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <_fflush_r+0x6c>)
 8007bfc:	429c      	cmp	r4, r3
 8007bfe:	d11b      	bne.n	8007c38 <_fflush_r+0x58>
 8007c00:	686c      	ldr	r4, [r5, #4]
 8007c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0ef      	beq.n	8007bea <_fflush_r+0xa>
 8007c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c0c:	07d0      	lsls	r0, r2, #31
 8007c0e:	d404      	bmi.n	8007c1a <_fflush_r+0x3a>
 8007c10:	0599      	lsls	r1, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_fflush_r+0x3a>
 8007c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c16:	f000 f91a 	bl	8007e4e <__retarget_lock_acquire_recursive>
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	f7ff ff59 	bl	8007ad4 <__sflush_r>
 8007c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c24:	07da      	lsls	r2, r3, #31
 8007c26:	4605      	mov	r5, r0
 8007c28:	d4e0      	bmi.n	8007bec <_fflush_r+0xc>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	059b      	lsls	r3, r3, #22
 8007c2e:	d4dd      	bmi.n	8007bec <_fflush_r+0xc>
 8007c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c32:	f000 f90d 	bl	8007e50 <__retarget_lock_release_recursive>
 8007c36:	e7d9      	b.n	8007bec <_fflush_r+0xc>
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <_fflush_r+0x70>)
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	d101      	bne.n	8007c42 <_fflush_r+0x62>
 8007c3e:	68ac      	ldr	r4, [r5, #8]
 8007c40:	e7df      	b.n	8007c02 <_fflush_r+0x22>
 8007c42:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <_fflush_r+0x74>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	bf08      	it	eq
 8007c48:	68ec      	ldreq	r4, [r5, #12]
 8007c4a:	e7da      	b.n	8007c02 <_fflush_r+0x22>
 8007c4c:	080094b0 	.word	0x080094b0
 8007c50:	080094d0 	.word	0x080094d0
 8007c54:	08009490 	.word	0x08009490

08007c58 <std>:
 8007c58:	2300      	movs	r3, #0
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c66:	6083      	str	r3, [r0, #8]
 8007c68:	8181      	strh	r1, [r0, #12]
 8007c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c6c:	81c2      	strh	r2, [r0, #14]
 8007c6e:	6183      	str	r3, [r0, #24]
 8007c70:	4619      	mov	r1, r3
 8007c72:	2208      	movs	r2, #8
 8007c74:	305c      	adds	r0, #92	; 0x5c
 8007c76:	f7fe faf1 	bl	800625c <memset>
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <std+0x38>)
 8007c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <std+0x3c>)
 8007c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <std+0x40>)
 8007c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <std+0x44>)
 8007c88:	6224      	str	r4, [r4, #32]
 8007c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	08008b11 	.word	0x08008b11
 8007c94:	08008b33 	.word	0x08008b33
 8007c98:	08008b6b 	.word	0x08008b6b
 8007c9c:	08008b8f 	.word	0x08008b8f

08007ca0 <_cleanup_r>:
 8007ca0:	4901      	ldr	r1, [pc, #4]	; (8007ca8 <_cleanup_r+0x8>)
 8007ca2:	f000 b8af 	b.w	8007e04 <_fwalk_reent>
 8007ca6:	bf00      	nop
 8007ca8:	08007be1 	.word	0x08007be1

08007cac <__sfmoreglue>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	2268      	movs	r2, #104	; 0x68
 8007cb0:	1e4d      	subs	r5, r1, #1
 8007cb2:	4355      	muls	r5, r2
 8007cb4:	460e      	mov	r6, r1
 8007cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cba:	f000 fd4b 	bl	8008754 <_malloc_r>
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	b140      	cbz	r0, 8007cd4 <__sfmoreglue+0x28>
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8007cc8:	300c      	adds	r0, #12
 8007cca:	60a0      	str	r0, [r4, #8]
 8007ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cd0:	f7fe fac4 	bl	800625c <memset>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}

08007cd8 <__sfp_lock_acquire>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sfp_lock_acquire+0x8>)
 8007cda:	f000 b8b8 	b.w	8007e4e <__retarget_lock_acquire_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20000369 	.word	0x20000369

08007ce4 <__sfp_lock_release>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__sfp_lock_release+0x8>)
 8007ce6:	f000 b8b3 	b.w	8007e50 <__retarget_lock_release_recursive>
 8007cea:	bf00      	nop
 8007cec:	20000369 	.word	0x20000369

08007cf0 <__sinit_lock_acquire>:
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <__sinit_lock_acquire+0x8>)
 8007cf2:	f000 b8ac 	b.w	8007e4e <__retarget_lock_acquire_recursive>
 8007cf6:	bf00      	nop
 8007cf8:	2000036a 	.word	0x2000036a

08007cfc <__sinit_lock_release>:
 8007cfc:	4801      	ldr	r0, [pc, #4]	; (8007d04 <__sinit_lock_release+0x8>)
 8007cfe:	f000 b8a7 	b.w	8007e50 <__retarget_lock_release_recursive>
 8007d02:	bf00      	nop
 8007d04:	2000036a 	.word	0x2000036a

08007d08 <__sinit>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	f7ff fff0 	bl	8007cf0 <__sinit_lock_acquire>
 8007d10:	69a3      	ldr	r3, [r4, #24]
 8007d12:	b11b      	cbz	r3, 8007d1c <__sinit+0x14>
 8007d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d18:	f7ff bff0 	b.w	8007cfc <__sinit_lock_release>
 8007d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d20:	6523      	str	r3, [r4, #80]	; 0x50
 8007d22:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <__sinit+0x68>)
 8007d24:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <__sinit+0x6c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	bf04      	itt	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	61a3      	streq	r3, [r4, #24]
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 f820 	bl	8007d78 <__sfp>
 8007d38:	6060      	str	r0, [r4, #4]
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 f81c 	bl	8007d78 <__sfp>
 8007d40:	60a0      	str	r0, [r4, #8]
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 f818 	bl	8007d78 <__sfp>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	60e0      	str	r0, [r4, #12]
 8007d4c:	2104      	movs	r1, #4
 8007d4e:	6860      	ldr	r0, [r4, #4]
 8007d50:	f7ff ff82 	bl	8007c58 <std>
 8007d54:	68a0      	ldr	r0, [r4, #8]
 8007d56:	2201      	movs	r2, #1
 8007d58:	2109      	movs	r1, #9
 8007d5a:	f7ff ff7d 	bl	8007c58 <std>
 8007d5e:	68e0      	ldr	r0, [r4, #12]
 8007d60:	2202      	movs	r2, #2
 8007d62:	2112      	movs	r1, #18
 8007d64:	f7ff ff78 	bl	8007c58 <std>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	61a3      	str	r3, [r4, #24]
 8007d6c:	e7d2      	b.n	8007d14 <__sinit+0xc>
 8007d6e:	bf00      	nop
 8007d70:	080093c8 	.word	0x080093c8
 8007d74:	08007ca1 	.word	0x08007ca1

08007d78 <__sfp>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	4607      	mov	r7, r0
 8007d7c:	f7ff ffac 	bl	8007cd8 <__sfp_lock_acquire>
 8007d80:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <__sfp+0x84>)
 8007d82:	681e      	ldr	r6, [r3, #0]
 8007d84:	69b3      	ldr	r3, [r6, #24]
 8007d86:	b913      	cbnz	r3, 8007d8e <__sfp+0x16>
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff ffbd 	bl	8007d08 <__sinit>
 8007d8e:	3648      	adds	r6, #72	; 0x48
 8007d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	d503      	bpl.n	8007da0 <__sfp+0x28>
 8007d98:	6833      	ldr	r3, [r6, #0]
 8007d9a:	b30b      	cbz	r3, 8007de0 <__sfp+0x68>
 8007d9c:	6836      	ldr	r6, [r6, #0]
 8007d9e:	e7f7      	b.n	8007d90 <__sfp+0x18>
 8007da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007da4:	b9d5      	cbnz	r5, 8007ddc <__sfp+0x64>
 8007da6:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <__sfp+0x88>)
 8007da8:	60e3      	str	r3, [r4, #12]
 8007daa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dae:	6665      	str	r5, [r4, #100]	; 0x64
 8007db0:	f000 f84c 	bl	8007e4c <__retarget_lock_init_recursive>
 8007db4:	f7ff ff96 	bl	8007ce4 <__sfp_lock_release>
 8007db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dc0:	6025      	str	r5, [r4, #0]
 8007dc2:	61a5      	str	r5, [r4, #24]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dcc:	f7fe fa46 	bl	800625c <memset>
 8007dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dd8:	4620      	mov	r0, r4
 8007dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ddc:	3468      	adds	r4, #104	; 0x68
 8007dde:	e7d9      	b.n	8007d94 <__sfp+0x1c>
 8007de0:	2104      	movs	r1, #4
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7ff ff62 	bl	8007cac <__sfmoreglue>
 8007de8:	4604      	mov	r4, r0
 8007dea:	6030      	str	r0, [r6, #0]
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d1d5      	bne.n	8007d9c <__sfp+0x24>
 8007df0:	f7ff ff78 	bl	8007ce4 <__sfp_lock_release>
 8007df4:	230c      	movs	r3, #12
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	e7ee      	b.n	8007dd8 <__sfp+0x60>
 8007dfa:	bf00      	nop
 8007dfc:	080093c8 	.word	0x080093c8
 8007e00:	ffff0001 	.word	0xffff0001

08007e04 <_fwalk_reent>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	4606      	mov	r6, r0
 8007e0a:	4688      	mov	r8, r1
 8007e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e10:	2700      	movs	r7, #0
 8007e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e16:	f1b9 0901 	subs.w	r9, r9, #1
 8007e1a:	d505      	bpl.n	8007e28 <_fwalk_reent+0x24>
 8007e1c:	6824      	ldr	r4, [r4, #0]
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	d1f7      	bne.n	8007e12 <_fwalk_reent+0xe>
 8007e22:	4638      	mov	r0, r7
 8007e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e28:	89ab      	ldrh	r3, [r5, #12]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d907      	bls.n	8007e3e <_fwalk_reent+0x3a>
 8007e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e32:	3301      	adds	r3, #1
 8007e34:	d003      	beq.n	8007e3e <_fwalk_reent+0x3a>
 8007e36:	4629      	mov	r1, r5
 8007e38:	4630      	mov	r0, r6
 8007e3a:	47c0      	blx	r8
 8007e3c:	4307      	orrs	r7, r0
 8007e3e:	3568      	adds	r5, #104	; 0x68
 8007e40:	e7e9      	b.n	8007e16 <_fwalk_reent+0x12>
	...

08007e44 <_localeconv_r>:
 8007e44:	4800      	ldr	r0, [pc, #0]	; (8007e48 <_localeconv_r+0x4>)
 8007e46:	4770      	bx	lr
 8007e48:	20000164 	.word	0x20000164

08007e4c <__retarget_lock_init_recursive>:
 8007e4c:	4770      	bx	lr

08007e4e <__retarget_lock_acquire_recursive>:
 8007e4e:	4770      	bx	lr

08007e50 <__retarget_lock_release_recursive>:
 8007e50:	4770      	bx	lr

08007e52 <__swhatbuf_r>:
 8007e52:	b570      	push	{r4, r5, r6, lr}
 8007e54:	460e      	mov	r6, r1
 8007e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	b096      	sub	sp, #88	; 0x58
 8007e5e:	4614      	mov	r4, r2
 8007e60:	461d      	mov	r5, r3
 8007e62:	da08      	bge.n	8007e76 <__swhatbuf_r+0x24>
 8007e64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	602a      	str	r2, [r5, #0]
 8007e6c:	061a      	lsls	r2, r3, #24
 8007e6e:	d410      	bmi.n	8007e92 <__swhatbuf_r+0x40>
 8007e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e74:	e00e      	b.n	8007e94 <__swhatbuf_r+0x42>
 8007e76:	466a      	mov	r2, sp
 8007e78:	f000 fee0 	bl	8008c3c <_fstat_r>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	dbf1      	blt.n	8007e64 <__swhatbuf_r+0x12>
 8007e80:	9a01      	ldr	r2, [sp, #4]
 8007e82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e8a:	425a      	negs	r2, r3
 8007e8c:	415a      	adcs	r2, r3
 8007e8e:	602a      	str	r2, [r5, #0]
 8007e90:	e7ee      	b.n	8007e70 <__swhatbuf_r+0x1e>
 8007e92:	2340      	movs	r3, #64	; 0x40
 8007e94:	2000      	movs	r0, #0
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	b016      	add	sp, #88	; 0x58
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}

08007e9c <__smakebuf_r>:
 8007e9c:	898b      	ldrh	r3, [r1, #12]
 8007e9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ea0:	079d      	lsls	r5, r3, #30
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	d507      	bpl.n	8007eb8 <__smakebuf_r+0x1c>
 8007ea8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	6163      	str	r3, [r4, #20]
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	ab01      	add	r3, sp, #4
 8007eba:	466a      	mov	r2, sp
 8007ebc:	f7ff ffc9 	bl	8007e52 <__swhatbuf_r>
 8007ec0:	9900      	ldr	r1, [sp, #0]
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f000 fc45 	bl	8008754 <_malloc_r>
 8007eca:	b948      	cbnz	r0, 8007ee0 <__smakebuf_r+0x44>
 8007ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed0:	059a      	lsls	r2, r3, #22
 8007ed2:	d4ef      	bmi.n	8007eb4 <__smakebuf_r+0x18>
 8007ed4:	f023 0303 	bic.w	r3, r3, #3
 8007ed8:	f043 0302 	orr.w	r3, r3, #2
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	e7e3      	b.n	8007ea8 <__smakebuf_r+0xc>
 8007ee0:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <__smakebuf_r+0x7c>)
 8007ee2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	6020      	str	r0, [r4, #0]
 8007ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	9b00      	ldr	r3, [sp, #0]
 8007ef0:	6163      	str	r3, [r4, #20]
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	6120      	str	r0, [r4, #16]
 8007ef6:	b15b      	cbz	r3, 8007f10 <__smakebuf_r+0x74>
 8007ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007efc:	4630      	mov	r0, r6
 8007efe:	f000 feaf 	bl	8008c60 <_isatty_r>
 8007f02:	b128      	cbz	r0, 8007f10 <__smakebuf_r+0x74>
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	81a3      	strh	r3, [r4, #12]
 8007f10:	89a0      	ldrh	r0, [r4, #12]
 8007f12:	4305      	orrs	r5, r0
 8007f14:	81a5      	strh	r5, [r4, #12]
 8007f16:	e7cd      	b.n	8007eb4 <__smakebuf_r+0x18>
 8007f18:	08007ca1 	.word	0x08007ca1

08007f1c <malloc>:
 8007f1c:	4b02      	ldr	r3, [pc, #8]	; (8007f28 <malloc+0xc>)
 8007f1e:	4601      	mov	r1, r0
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	f000 bc17 	b.w	8008754 <_malloc_r>
 8007f26:	bf00      	nop
 8007f28:	20000010 	.word	0x20000010

08007f2c <memcpy>:
 8007f2c:	440a      	add	r2, r1
 8007f2e:	4291      	cmp	r1, r2
 8007f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f34:	d100      	bne.n	8007f38 <memcpy+0xc>
 8007f36:	4770      	bx	lr
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f42:	4291      	cmp	r1, r2
 8007f44:	d1f9      	bne.n	8007f3a <memcpy+0xe>
 8007f46:	bd10      	pop	{r4, pc}

08007f48 <_Balloc>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	460d      	mov	r5, r1
 8007f50:	b976      	cbnz	r6, 8007f70 <_Balloc+0x28>
 8007f52:	2010      	movs	r0, #16
 8007f54:	f7ff ffe2 	bl	8007f1c <malloc>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8007f5c:	b920      	cbnz	r0, 8007f68 <_Balloc+0x20>
 8007f5e:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <_Balloc+0x78>)
 8007f60:	4818      	ldr	r0, [pc, #96]	; (8007fc4 <_Balloc+0x7c>)
 8007f62:	2166      	movs	r1, #102	; 0x66
 8007f64:	f000 fe2a 	bl	8008bbc <__assert_func>
 8007f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f6c:	6006      	str	r6, [r0, #0]
 8007f6e:	60c6      	str	r6, [r0, #12]
 8007f70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f72:	68f3      	ldr	r3, [r6, #12]
 8007f74:	b183      	cbz	r3, 8007f98 <_Balloc+0x50>
 8007f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f7e:	b9b8      	cbnz	r0, 8007fb0 <_Balloc+0x68>
 8007f80:	2101      	movs	r1, #1
 8007f82:	fa01 f605 	lsl.w	r6, r1, r5
 8007f86:	1d72      	adds	r2, r6, #5
 8007f88:	0092      	lsls	r2, r2, #2
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 fb60 	bl	8008650 <_calloc_r>
 8007f90:	b160      	cbz	r0, 8007fac <_Balloc+0x64>
 8007f92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f96:	e00e      	b.n	8007fb6 <_Balloc+0x6e>
 8007f98:	2221      	movs	r2, #33	; 0x21
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 fb57 	bl	8008650 <_calloc_r>
 8007fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fa4:	60f0      	str	r0, [r6, #12]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e4      	bne.n	8007f76 <_Balloc+0x2e>
 8007fac:	2000      	movs	r0, #0
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
 8007fb0:	6802      	ldr	r2, [r0, #0]
 8007fb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fbc:	e7f7      	b.n	8007fae <_Balloc+0x66>
 8007fbe:	bf00      	nop
 8007fc0:	0800940d 	.word	0x0800940d
 8007fc4:	080094f0 	.word	0x080094f0

08007fc8 <_Bfree>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fcc:	4605      	mov	r5, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	b976      	cbnz	r6, 8007ff0 <_Bfree+0x28>
 8007fd2:	2010      	movs	r0, #16
 8007fd4:	f7ff ffa2 	bl	8007f1c <malloc>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6268      	str	r0, [r5, #36]	; 0x24
 8007fdc:	b920      	cbnz	r0, 8007fe8 <_Bfree+0x20>
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <_Bfree+0x3c>)
 8007fe0:	4809      	ldr	r0, [pc, #36]	; (8008008 <_Bfree+0x40>)
 8007fe2:	218a      	movs	r1, #138	; 0x8a
 8007fe4:	f000 fdea 	bl	8008bbc <__assert_func>
 8007fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fec:	6006      	str	r6, [r0, #0]
 8007fee:	60c6      	str	r6, [r0, #12]
 8007ff0:	b13c      	cbz	r4, 8008002 <_Bfree+0x3a>
 8007ff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ff4:	6862      	ldr	r2, [r4, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ffc:	6021      	str	r1, [r4, #0]
 8007ffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	0800940d 	.word	0x0800940d
 8008008:	080094f0 	.word	0x080094f0

0800800c <__multadd>:
 800800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008010:	690d      	ldr	r5, [r1, #16]
 8008012:	4607      	mov	r7, r0
 8008014:	460c      	mov	r4, r1
 8008016:	461e      	mov	r6, r3
 8008018:	f101 0c14 	add.w	ip, r1, #20
 800801c:	2000      	movs	r0, #0
 800801e:	f8dc 3000 	ldr.w	r3, [ip]
 8008022:	b299      	uxth	r1, r3
 8008024:	fb02 6101 	mla	r1, r2, r1, r6
 8008028:	0c1e      	lsrs	r6, r3, #16
 800802a:	0c0b      	lsrs	r3, r1, #16
 800802c:	fb02 3306 	mla	r3, r2, r6, r3
 8008030:	b289      	uxth	r1, r1
 8008032:	3001      	adds	r0, #1
 8008034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008038:	4285      	cmp	r5, r0
 800803a:	f84c 1b04 	str.w	r1, [ip], #4
 800803e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008042:	dcec      	bgt.n	800801e <__multadd+0x12>
 8008044:	b30e      	cbz	r6, 800808a <__multadd+0x7e>
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	42ab      	cmp	r3, r5
 800804a:	dc19      	bgt.n	8008080 <__multadd+0x74>
 800804c:	6861      	ldr	r1, [r4, #4]
 800804e:	4638      	mov	r0, r7
 8008050:	3101      	adds	r1, #1
 8008052:	f7ff ff79 	bl	8007f48 <_Balloc>
 8008056:	4680      	mov	r8, r0
 8008058:	b928      	cbnz	r0, 8008066 <__multadd+0x5a>
 800805a:	4602      	mov	r2, r0
 800805c:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <__multadd+0x84>)
 800805e:	480d      	ldr	r0, [pc, #52]	; (8008094 <__multadd+0x88>)
 8008060:	21b5      	movs	r1, #181	; 0xb5
 8008062:	f000 fdab 	bl	8008bbc <__assert_func>
 8008066:	6922      	ldr	r2, [r4, #16]
 8008068:	3202      	adds	r2, #2
 800806a:	f104 010c 	add.w	r1, r4, #12
 800806e:	0092      	lsls	r2, r2, #2
 8008070:	300c      	adds	r0, #12
 8008072:	f7ff ff5b 	bl	8007f2c <memcpy>
 8008076:	4621      	mov	r1, r4
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff ffa5 	bl	8007fc8 <_Bfree>
 800807e:	4644      	mov	r4, r8
 8008080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008084:	3501      	adds	r5, #1
 8008086:	615e      	str	r6, [r3, #20]
 8008088:	6125      	str	r5, [r4, #16]
 800808a:	4620      	mov	r0, r4
 800808c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008090:	0800947f 	.word	0x0800947f
 8008094:	080094f0 	.word	0x080094f0

08008098 <__hi0bits>:
 8008098:	0c03      	lsrs	r3, r0, #16
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	b9d3      	cbnz	r3, 80080d4 <__hi0bits+0x3c>
 800809e:	0400      	lsls	r0, r0, #16
 80080a0:	2310      	movs	r3, #16
 80080a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080a6:	bf04      	itt	eq
 80080a8:	0200      	lsleq	r0, r0, #8
 80080aa:	3308      	addeq	r3, #8
 80080ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080b0:	bf04      	itt	eq
 80080b2:	0100      	lsleq	r0, r0, #4
 80080b4:	3304      	addeq	r3, #4
 80080b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080ba:	bf04      	itt	eq
 80080bc:	0080      	lsleq	r0, r0, #2
 80080be:	3302      	addeq	r3, #2
 80080c0:	2800      	cmp	r0, #0
 80080c2:	db05      	blt.n	80080d0 <__hi0bits+0x38>
 80080c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080c8:	f103 0301 	add.w	r3, r3, #1
 80080cc:	bf08      	it	eq
 80080ce:	2320      	moveq	r3, #32
 80080d0:	4618      	mov	r0, r3
 80080d2:	4770      	bx	lr
 80080d4:	2300      	movs	r3, #0
 80080d6:	e7e4      	b.n	80080a2 <__hi0bits+0xa>

080080d8 <__lo0bits>:
 80080d8:	6803      	ldr	r3, [r0, #0]
 80080da:	f013 0207 	ands.w	r2, r3, #7
 80080de:	4601      	mov	r1, r0
 80080e0:	d00b      	beq.n	80080fa <__lo0bits+0x22>
 80080e2:	07da      	lsls	r2, r3, #31
 80080e4:	d423      	bmi.n	800812e <__lo0bits+0x56>
 80080e6:	0798      	lsls	r0, r3, #30
 80080e8:	bf49      	itett	mi
 80080ea:	085b      	lsrmi	r3, r3, #1
 80080ec:	089b      	lsrpl	r3, r3, #2
 80080ee:	2001      	movmi	r0, #1
 80080f0:	600b      	strmi	r3, [r1, #0]
 80080f2:	bf5c      	itt	pl
 80080f4:	600b      	strpl	r3, [r1, #0]
 80080f6:	2002      	movpl	r0, #2
 80080f8:	4770      	bx	lr
 80080fa:	b298      	uxth	r0, r3
 80080fc:	b9a8      	cbnz	r0, 800812a <__lo0bits+0x52>
 80080fe:	0c1b      	lsrs	r3, r3, #16
 8008100:	2010      	movs	r0, #16
 8008102:	b2da      	uxtb	r2, r3
 8008104:	b90a      	cbnz	r2, 800810a <__lo0bits+0x32>
 8008106:	3008      	adds	r0, #8
 8008108:	0a1b      	lsrs	r3, r3, #8
 800810a:	071a      	lsls	r2, r3, #28
 800810c:	bf04      	itt	eq
 800810e:	091b      	lsreq	r3, r3, #4
 8008110:	3004      	addeq	r0, #4
 8008112:	079a      	lsls	r2, r3, #30
 8008114:	bf04      	itt	eq
 8008116:	089b      	lsreq	r3, r3, #2
 8008118:	3002      	addeq	r0, #2
 800811a:	07da      	lsls	r2, r3, #31
 800811c:	d403      	bmi.n	8008126 <__lo0bits+0x4e>
 800811e:	085b      	lsrs	r3, r3, #1
 8008120:	f100 0001 	add.w	r0, r0, #1
 8008124:	d005      	beq.n	8008132 <__lo0bits+0x5a>
 8008126:	600b      	str	r3, [r1, #0]
 8008128:	4770      	bx	lr
 800812a:	4610      	mov	r0, r2
 800812c:	e7e9      	b.n	8008102 <__lo0bits+0x2a>
 800812e:	2000      	movs	r0, #0
 8008130:	4770      	bx	lr
 8008132:	2020      	movs	r0, #32
 8008134:	4770      	bx	lr
	...

08008138 <__i2b>:
 8008138:	b510      	push	{r4, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	2101      	movs	r1, #1
 800813e:	f7ff ff03 	bl	8007f48 <_Balloc>
 8008142:	4602      	mov	r2, r0
 8008144:	b928      	cbnz	r0, 8008152 <__i2b+0x1a>
 8008146:	4b05      	ldr	r3, [pc, #20]	; (800815c <__i2b+0x24>)
 8008148:	4805      	ldr	r0, [pc, #20]	; (8008160 <__i2b+0x28>)
 800814a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800814e:	f000 fd35 	bl	8008bbc <__assert_func>
 8008152:	2301      	movs	r3, #1
 8008154:	6144      	str	r4, [r0, #20]
 8008156:	6103      	str	r3, [r0, #16]
 8008158:	bd10      	pop	{r4, pc}
 800815a:	bf00      	nop
 800815c:	0800947f 	.word	0x0800947f
 8008160:	080094f0 	.word	0x080094f0

08008164 <__multiply>:
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	4691      	mov	r9, r2
 800816a:	690a      	ldr	r2, [r1, #16]
 800816c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008170:	429a      	cmp	r2, r3
 8008172:	bfb8      	it	lt
 8008174:	460b      	movlt	r3, r1
 8008176:	460c      	mov	r4, r1
 8008178:	bfbc      	itt	lt
 800817a:	464c      	movlt	r4, r9
 800817c:	4699      	movlt	r9, r3
 800817e:	6927      	ldr	r7, [r4, #16]
 8008180:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008184:	68a3      	ldr	r3, [r4, #8]
 8008186:	6861      	ldr	r1, [r4, #4]
 8008188:	eb07 060a 	add.w	r6, r7, sl
 800818c:	42b3      	cmp	r3, r6
 800818e:	b085      	sub	sp, #20
 8008190:	bfb8      	it	lt
 8008192:	3101      	addlt	r1, #1
 8008194:	f7ff fed8 	bl	8007f48 <_Balloc>
 8008198:	b930      	cbnz	r0, 80081a8 <__multiply+0x44>
 800819a:	4602      	mov	r2, r0
 800819c:	4b44      	ldr	r3, [pc, #272]	; (80082b0 <__multiply+0x14c>)
 800819e:	4845      	ldr	r0, [pc, #276]	; (80082b4 <__multiply+0x150>)
 80081a0:	f240 115d 	movw	r1, #349	; 0x15d
 80081a4:	f000 fd0a 	bl	8008bbc <__assert_func>
 80081a8:	f100 0514 	add.w	r5, r0, #20
 80081ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081b0:	462b      	mov	r3, r5
 80081b2:	2200      	movs	r2, #0
 80081b4:	4543      	cmp	r3, r8
 80081b6:	d321      	bcc.n	80081fc <__multiply+0x98>
 80081b8:	f104 0314 	add.w	r3, r4, #20
 80081bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081c0:	f109 0314 	add.w	r3, r9, #20
 80081c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80081c8:	9202      	str	r2, [sp, #8]
 80081ca:	1b3a      	subs	r2, r7, r4
 80081cc:	3a15      	subs	r2, #21
 80081ce:	f022 0203 	bic.w	r2, r2, #3
 80081d2:	3204      	adds	r2, #4
 80081d4:	f104 0115 	add.w	r1, r4, #21
 80081d8:	428f      	cmp	r7, r1
 80081da:	bf38      	it	cc
 80081dc:	2204      	movcc	r2, #4
 80081de:	9201      	str	r2, [sp, #4]
 80081e0:	9a02      	ldr	r2, [sp, #8]
 80081e2:	9303      	str	r3, [sp, #12]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d80c      	bhi.n	8008202 <__multiply+0x9e>
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	dd03      	ble.n	80081f4 <__multiply+0x90>
 80081ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d05a      	beq.n	80082aa <__multiply+0x146>
 80081f4:	6106      	str	r6, [r0, #16]
 80081f6:	b005      	add	sp, #20
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	f843 2b04 	str.w	r2, [r3], #4
 8008200:	e7d8      	b.n	80081b4 <__multiply+0x50>
 8008202:	f8b3 a000 	ldrh.w	sl, [r3]
 8008206:	f1ba 0f00 	cmp.w	sl, #0
 800820a:	d024      	beq.n	8008256 <__multiply+0xf2>
 800820c:	f104 0e14 	add.w	lr, r4, #20
 8008210:	46a9      	mov	r9, r5
 8008212:	f04f 0c00 	mov.w	ip, #0
 8008216:	f85e 2b04 	ldr.w	r2, [lr], #4
 800821a:	f8d9 1000 	ldr.w	r1, [r9]
 800821e:	fa1f fb82 	uxth.w	fp, r2
 8008222:	b289      	uxth	r1, r1
 8008224:	fb0a 110b 	mla	r1, sl, fp, r1
 8008228:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800822c:	f8d9 2000 	ldr.w	r2, [r9]
 8008230:	4461      	add	r1, ip
 8008232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008236:	fb0a c20b 	mla	r2, sl, fp, ip
 800823a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800823e:	b289      	uxth	r1, r1
 8008240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008244:	4577      	cmp	r7, lr
 8008246:	f849 1b04 	str.w	r1, [r9], #4
 800824a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800824e:	d8e2      	bhi.n	8008216 <__multiply+0xb2>
 8008250:	9a01      	ldr	r2, [sp, #4]
 8008252:	f845 c002 	str.w	ip, [r5, r2]
 8008256:	9a03      	ldr	r2, [sp, #12]
 8008258:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800825c:	3304      	adds	r3, #4
 800825e:	f1b9 0f00 	cmp.w	r9, #0
 8008262:	d020      	beq.n	80082a6 <__multiply+0x142>
 8008264:	6829      	ldr	r1, [r5, #0]
 8008266:	f104 0c14 	add.w	ip, r4, #20
 800826a:	46ae      	mov	lr, r5
 800826c:	f04f 0a00 	mov.w	sl, #0
 8008270:	f8bc b000 	ldrh.w	fp, [ip]
 8008274:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008278:	fb09 220b 	mla	r2, r9, fp, r2
 800827c:	4492      	add	sl, r2
 800827e:	b289      	uxth	r1, r1
 8008280:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008284:	f84e 1b04 	str.w	r1, [lr], #4
 8008288:	f85c 2b04 	ldr.w	r2, [ip], #4
 800828c:	f8be 1000 	ldrh.w	r1, [lr]
 8008290:	0c12      	lsrs	r2, r2, #16
 8008292:	fb09 1102 	mla	r1, r9, r2, r1
 8008296:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800829a:	4567      	cmp	r7, ip
 800829c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082a0:	d8e6      	bhi.n	8008270 <__multiply+0x10c>
 80082a2:	9a01      	ldr	r2, [sp, #4]
 80082a4:	50a9      	str	r1, [r5, r2]
 80082a6:	3504      	adds	r5, #4
 80082a8:	e79a      	b.n	80081e0 <__multiply+0x7c>
 80082aa:	3e01      	subs	r6, #1
 80082ac:	e79c      	b.n	80081e8 <__multiply+0x84>
 80082ae:	bf00      	nop
 80082b0:	0800947f 	.word	0x0800947f
 80082b4:	080094f0 	.word	0x080094f0

080082b8 <__pow5mult>:
 80082b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082bc:	4615      	mov	r5, r2
 80082be:	f012 0203 	ands.w	r2, r2, #3
 80082c2:	4606      	mov	r6, r0
 80082c4:	460f      	mov	r7, r1
 80082c6:	d007      	beq.n	80082d8 <__pow5mult+0x20>
 80082c8:	4c25      	ldr	r4, [pc, #148]	; (8008360 <__pow5mult+0xa8>)
 80082ca:	3a01      	subs	r2, #1
 80082cc:	2300      	movs	r3, #0
 80082ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082d2:	f7ff fe9b 	bl	800800c <__multadd>
 80082d6:	4607      	mov	r7, r0
 80082d8:	10ad      	asrs	r5, r5, #2
 80082da:	d03d      	beq.n	8008358 <__pow5mult+0xa0>
 80082dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082de:	b97c      	cbnz	r4, 8008300 <__pow5mult+0x48>
 80082e0:	2010      	movs	r0, #16
 80082e2:	f7ff fe1b 	bl	8007f1c <malloc>
 80082e6:	4602      	mov	r2, r0
 80082e8:	6270      	str	r0, [r6, #36]	; 0x24
 80082ea:	b928      	cbnz	r0, 80082f8 <__pow5mult+0x40>
 80082ec:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <__pow5mult+0xac>)
 80082ee:	481e      	ldr	r0, [pc, #120]	; (8008368 <__pow5mult+0xb0>)
 80082f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082f4:	f000 fc62 	bl	8008bbc <__assert_func>
 80082f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082fc:	6004      	str	r4, [r0, #0]
 80082fe:	60c4      	str	r4, [r0, #12]
 8008300:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008308:	b94c      	cbnz	r4, 800831e <__pow5mult+0x66>
 800830a:	f240 2171 	movw	r1, #625	; 0x271
 800830e:	4630      	mov	r0, r6
 8008310:	f7ff ff12 	bl	8008138 <__i2b>
 8008314:	2300      	movs	r3, #0
 8008316:	f8c8 0008 	str.w	r0, [r8, #8]
 800831a:	4604      	mov	r4, r0
 800831c:	6003      	str	r3, [r0, #0]
 800831e:	f04f 0900 	mov.w	r9, #0
 8008322:	07eb      	lsls	r3, r5, #31
 8008324:	d50a      	bpl.n	800833c <__pow5mult+0x84>
 8008326:	4639      	mov	r1, r7
 8008328:	4622      	mov	r2, r4
 800832a:	4630      	mov	r0, r6
 800832c:	f7ff ff1a 	bl	8008164 <__multiply>
 8008330:	4639      	mov	r1, r7
 8008332:	4680      	mov	r8, r0
 8008334:	4630      	mov	r0, r6
 8008336:	f7ff fe47 	bl	8007fc8 <_Bfree>
 800833a:	4647      	mov	r7, r8
 800833c:	106d      	asrs	r5, r5, #1
 800833e:	d00b      	beq.n	8008358 <__pow5mult+0xa0>
 8008340:	6820      	ldr	r0, [r4, #0]
 8008342:	b938      	cbnz	r0, 8008354 <__pow5mult+0x9c>
 8008344:	4622      	mov	r2, r4
 8008346:	4621      	mov	r1, r4
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff ff0b 	bl	8008164 <__multiply>
 800834e:	6020      	str	r0, [r4, #0]
 8008350:	f8c0 9000 	str.w	r9, [r0]
 8008354:	4604      	mov	r4, r0
 8008356:	e7e4      	b.n	8008322 <__pow5mult+0x6a>
 8008358:	4638      	mov	r0, r7
 800835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835e:	bf00      	nop
 8008360:	08009640 	.word	0x08009640
 8008364:	0800940d 	.word	0x0800940d
 8008368:	080094f0 	.word	0x080094f0

0800836c <__lshift>:
 800836c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	460c      	mov	r4, r1
 8008372:	6849      	ldr	r1, [r1, #4]
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800837a:	68a3      	ldr	r3, [r4, #8]
 800837c:	4607      	mov	r7, r0
 800837e:	4691      	mov	r9, r2
 8008380:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008384:	f108 0601 	add.w	r6, r8, #1
 8008388:	42b3      	cmp	r3, r6
 800838a:	db0b      	blt.n	80083a4 <__lshift+0x38>
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff fddb 	bl	8007f48 <_Balloc>
 8008392:	4605      	mov	r5, r0
 8008394:	b948      	cbnz	r0, 80083aa <__lshift+0x3e>
 8008396:	4602      	mov	r2, r0
 8008398:	4b2a      	ldr	r3, [pc, #168]	; (8008444 <__lshift+0xd8>)
 800839a:	482b      	ldr	r0, [pc, #172]	; (8008448 <__lshift+0xdc>)
 800839c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083a0:	f000 fc0c 	bl	8008bbc <__assert_func>
 80083a4:	3101      	adds	r1, #1
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	e7ee      	b.n	8008388 <__lshift+0x1c>
 80083aa:	2300      	movs	r3, #0
 80083ac:	f100 0114 	add.w	r1, r0, #20
 80083b0:	f100 0210 	add.w	r2, r0, #16
 80083b4:	4618      	mov	r0, r3
 80083b6:	4553      	cmp	r3, sl
 80083b8:	db37      	blt.n	800842a <__lshift+0xbe>
 80083ba:	6920      	ldr	r0, [r4, #16]
 80083bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083c0:	f104 0314 	add.w	r3, r4, #20
 80083c4:	f019 091f 	ands.w	r9, r9, #31
 80083c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80083d0:	d02f      	beq.n	8008432 <__lshift+0xc6>
 80083d2:	f1c9 0e20 	rsb	lr, r9, #32
 80083d6:	468a      	mov	sl, r1
 80083d8:	f04f 0c00 	mov.w	ip, #0
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	fa02 f209 	lsl.w	r2, r2, r9
 80083e2:	ea42 020c 	orr.w	r2, r2, ip
 80083e6:	f84a 2b04 	str.w	r2, [sl], #4
 80083ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ee:	4298      	cmp	r0, r3
 80083f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80083f4:	d8f2      	bhi.n	80083dc <__lshift+0x70>
 80083f6:	1b03      	subs	r3, r0, r4
 80083f8:	3b15      	subs	r3, #21
 80083fa:	f023 0303 	bic.w	r3, r3, #3
 80083fe:	3304      	adds	r3, #4
 8008400:	f104 0215 	add.w	r2, r4, #21
 8008404:	4290      	cmp	r0, r2
 8008406:	bf38      	it	cc
 8008408:	2304      	movcc	r3, #4
 800840a:	f841 c003 	str.w	ip, [r1, r3]
 800840e:	f1bc 0f00 	cmp.w	ip, #0
 8008412:	d001      	beq.n	8008418 <__lshift+0xac>
 8008414:	f108 0602 	add.w	r6, r8, #2
 8008418:	3e01      	subs	r6, #1
 800841a:	4638      	mov	r0, r7
 800841c:	612e      	str	r6, [r5, #16]
 800841e:	4621      	mov	r1, r4
 8008420:	f7ff fdd2 	bl	8007fc8 <_Bfree>
 8008424:	4628      	mov	r0, r5
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	f842 0f04 	str.w	r0, [r2, #4]!
 800842e:	3301      	adds	r3, #1
 8008430:	e7c1      	b.n	80083b6 <__lshift+0x4a>
 8008432:	3904      	subs	r1, #4
 8008434:	f853 2b04 	ldr.w	r2, [r3], #4
 8008438:	f841 2f04 	str.w	r2, [r1, #4]!
 800843c:	4298      	cmp	r0, r3
 800843e:	d8f9      	bhi.n	8008434 <__lshift+0xc8>
 8008440:	e7ea      	b.n	8008418 <__lshift+0xac>
 8008442:	bf00      	nop
 8008444:	0800947f 	.word	0x0800947f
 8008448:	080094f0 	.word	0x080094f0

0800844c <__mcmp>:
 800844c:	b530      	push	{r4, r5, lr}
 800844e:	6902      	ldr	r2, [r0, #16]
 8008450:	690c      	ldr	r4, [r1, #16]
 8008452:	1b12      	subs	r2, r2, r4
 8008454:	d10e      	bne.n	8008474 <__mcmp+0x28>
 8008456:	f100 0314 	add.w	r3, r0, #20
 800845a:	3114      	adds	r1, #20
 800845c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008460:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008464:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008468:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800846c:	42a5      	cmp	r5, r4
 800846e:	d003      	beq.n	8008478 <__mcmp+0x2c>
 8008470:	d305      	bcc.n	800847e <__mcmp+0x32>
 8008472:	2201      	movs	r2, #1
 8008474:	4610      	mov	r0, r2
 8008476:	bd30      	pop	{r4, r5, pc}
 8008478:	4283      	cmp	r3, r0
 800847a:	d3f3      	bcc.n	8008464 <__mcmp+0x18>
 800847c:	e7fa      	b.n	8008474 <__mcmp+0x28>
 800847e:	f04f 32ff 	mov.w	r2, #4294967295
 8008482:	e7f7      	b.n	8008474 <__mcmp+0x28>

08008484 <__mdiff>:
 8008484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	4606      	mov	r6, r0
 800848c:	4611      	mov	r1, r2
 800848e:	4620      	mov	r0, r4
 8008490:	4690      	mov	r8, r2
 8008492:	f7ff ffdb 	bl	800844c <__mcmp>
 8008496:	1e05      	subs	r5, r0, #0
 8008498:	d110      	bne.n	80084bc <__mdiff+0x38>
 800849a:	4629      	mov	r1, r5
 800849c:	4630      	mov	r0, r6
 800849e:	f7ff fd53 	bl	8007f48 <_Balloc>
 80084a2:	b930      	cbnz	r0, 80084b2 <__mdiff+0x2e>
 80084a4:	4b3a      	ldr	r3, [pc, #232]	; (8008590 <__mdiff+0x10c>)
 80084a6:	4602      	mov	r2, r0
 80084a8:	f240 2132 	movw	r1, #562	; 0x232
 80084ac:	4839      	ldr	r0, [pc, #228]	; (8008594 <__mdiff+0x110>)
 80084ae:	f000 fb85 	bl	8008bbc <__assert_func>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084bc:	bfa4      	itt	ge
 80084be:	4643      	movge	r3, r8
 80084c0:	46a0      	movge	r8, r4
 80084c2:	4630      	mov	r0, r6
 80084c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084c8:	bfa6      	itte	ge
 80084ca:	461c      	movge	r4, r3
 80084cc:	2500      	movge	r5, #0
 80084ce:	2501      	movlt	r5, #1
 80084d0:	f7ff fd3a 	bl	8007f48 <_Balloc>
 80084d4:	b920      	cbnz	r0, 80084e0 <__mdiff+0x5c>
 80084d6:	4b2e      	ldr	r3, [pc, #184]	; (8008590 <__mdiff+0x10c>)
 80084d8:	4602      	mov	r2, r0
 80084da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084de:	e7e5      	b.n	80084ac <__mdiff+0x28>
 80084e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084e4:	6926      	ldr	r6, [r4, #16]
 80084e6:	60c5      	str	r5, [r0, #12]
 80084e8:	f104 0914 	add.w	r9, r4, #20
 80084ec:	f108 0514 	add.w	r5, r8, #20
 80084f0:	f100 0e14 	add.w	lr, r0, #20
 80084f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80084f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084fc:	f108 0210 	add.w	r2, r8, #16
 8008500:	46f2      	mov	sl, lr
 8008502:	2100      	movs	r1, #0
 8008504:	f859 3b04 	ldr.w	r3, [r9], #4
 8008508:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800850c:	fa1f f883 	uxth.w	r8, r3
 8008510:	fa11 f18b 	uxtah	r1, r1, fp
 8008514:	0c1b      	lsrs	r3, r3, #16
 8008516:	eba1 0808 	sub.w	r8, r1, r8
 800851a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800851e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008522:	fa1f f888 	uxth.w	r8, r8
 8008526:	1419      	asrs	r1, r3, #16
 8008528:	454e      	cmp	r6, r9
 800852a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800852e:	f84a 3b04 	str.w	r3, [sl], #4
 8008532:	d8e7      	bhi.n	8008504 <__mdiff+0x80>
 8008534:	1b33      	subs	r3, r6, r4
 8008536:	3b15      	subs	r3, #21
 8008538:	f023 0303 	bic.w	r3, r3, #3
 800853c:	3304      	adds	r3, #4
 800853e:	3415      	adds	r4, #21
 8008540:	42a6      	cmp	r6, r4
 8008542:	bf38      	it	cc
 8008544:	2304      	movcc	r3, #4
 8008546:	441d      	add	r5, r3
 8008548:	4473      	add	r3, lr
 800854a:	469e      	mov	lr, r3
 800854c:	462e      	mov	r6, r5
 800854e:	4566      	cmp	r6, ip
 8008550:	d30e      	bcc.n	8008570 <__mdiff+0xec>
 8008552:	f10c 0203 	add.w	r2, ip, #3
 8008556:	1b52      	subs	r2, r2, r5
 8008558:	f022 0203 	bic.w	r2, r2, #3
 800855c:	3d03      	subs	r5, #3
 800855e:	45ac      	cmp	ip, r5
 8008560:	bf38      	it	cc
 8008562:	2200      	movcc	r2, #0
 8008564:	441a      	add	r2, r3
 8008566:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800856a:	b17b      	cbz	r3, 800858c <__mdiff+0x108>
 800856c:	6107      	str	r7, [r0, #16]
 800856e:	e7a3      	b.n	80084b8 <__mdiff+0x34>
 8008570:	f856 8b04 	ldr.w	r8, [r6], #4
 8008574:	fa11 f288 	uxtah	r2, r1, r8
 8008578:	1414      	asrs	r4, r2, #16
 800857a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800857e:	b292      	uxth	r2, r2
 8008580:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008584:	f84e 2b04 	str.w	r2, [lr], #4
 8008588:	1421      	asrs	r1, r4, #16
 800858a:	e7e0      	b.n	800854e <__mdiff+0xca>
 800858c:	3f01      	subs	r7, #1
 800858e:	e7ea      	b.n	8008566 <__mdiff+0xe2>
 8008590:	0800947f 	.word	0x0800947f
 8008594:	080094f0 	.word	0x080094f0

08008598 <__d2b>:
 8008598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800859c:	4689      	mov	r9, r1
 800859e:	2101      	movs	r1, #1
 80085a0:	ec57 6b10 	vmov	r6, r7, d0
 80085a4:	4690      	mov	r8, r2
 80085a6:	f7ff fccf 	bl	8007f48 <_Balloc>
 80085aa:	4604      	mov	r4, r0
 80085ac:	b930      	cbnz	r0, 80085bc <__d2b+0x24>
 80085ae:	4602      	mov	r2, r0
 80085b0:	4b25      	ldr	r3, [pc, #148]	; (8008648 <__d2b+0xb0>)
 80085b2:	4826      	ldr	r0, [pc, #152]	; (800864c <__d2b+0xb4>)
 80085b4:	f240 310a 	movw	r1, #778	; 0x30a
 80085b8:	f000 fb00 	bl	8008bbc <__assert_func>
 80085bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80085c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085c4:	bb35      	cbnz	r5, 8008614 <__d2b+0x7c>
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	d028      	beq.n	800861e <__d2b+0x86>
 80085cc:	4668      	mov	r0, sp
 80085ce:	9600      	str	r6, [sp, #0]
 80085d0:	f7ff fd82 	bl	80080d8 <__lo0bits>
 80085d4:	9900      	ldr	r1, [sp, #0]
 80085d6:	b300      	cbz	r0, 800861a <__d2b+0x82>
 80085d8:	9a01      	ldr	r2, [sp, #4]
 80085da:	f1c0 0320 	rsb	r3, r0, #32
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	430b      	orrs	r3, r1
 80085e4:	40c2      	lsrs	r2, r0
 80085e6:	6163      	str	r3, [r4, #20]
 80085e8:	9201      	str	r2, [sp, #4]
 80085ea:	9b01      	ldr	r3, [sp, #4]
 80085ec:	61a3      	str	r3, [r4, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bf14      	ite	ne
 80085f2:	2202      	movne	r2, #2
 80085f4:	2201      	moveq	r2, #1
 80085f6:	6122      	str	r2, [r4, #16]
 80085f8:	b1d5      	cbz	r5, 8008630 <__d2b+0x98>
 80085fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80085fe:	4405      	add	r5, r0
 8008600:	f8c9 5000 	str.w	r5, [r9]
 8008604:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008608:	f8c8 0000 	str.w	r0, [r8]
 800860c:	4620      	mov	r0, r4
 800860e:	b003      	add	sp, #12
 8008610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008618:	e7d5      	b.n	80085c6 <__d2b+0x2e>
 800861a:	6161      	str	r1, [r4, #20]
 800861c:	e7e5      	b.n	80085ea <__d2b+0x52>
 800861e:	a801      	add	r0, sp, #4
 8008620:	f7ff fd5a 	bl	80080d8 <__lo0bits>
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	6163      	str	r3, [r4, #20]
 8008628:	2201      	movs	r2, #1
 800862a:	6122      	str	r2, [r4, #16]
 800862c:	3020      	adds	r0, #32
 800862e:	e7e3      	b.n	80085f8 <__d2b+0x60>
 8008630:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008634:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008638:	f8c9 0000 	str.w	r0, [r9]
 800863c:	6918      	ldr	r0, [r3, #16]
 800863e:	f7ff fd2b 	bl	8008098 <__hi0bits>
 8008642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008646:	e7df      	b.n	8008608 <__d2b+0x70>
 8008648:	0800947f 	.word	0x0800947f
 800864c:	080094f0 	.word	0x080094f0

08008650 <_calloc_r>:
 8008650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008652:	fba1 2402 	umull	r2, r4, r1, r2
 8008656:	b94c      	cbnz	r4, 800866c <_calloc_r+0x1c>
 8008658:	4611      	mov	r1, r2
 800865a:	9201      	str	r2, [sp, #4]
 800865c:	f000 f87a 	bl	8008754 <_malloc_r>
 8008660:	9a01      	ldr	r2, [sp, #4]
 8008662:	4605      	mov	r5, r0
 8008664:	b930      	cbnz	r0, 8008674 <_calloc_r+0x24>
 8008666:	4628      	mov	r0, r5
 8008668:	b003      	add	sp, #12
 800866a:	bd30      	pop	{r4, r5, pc}
 800866c:	220c      	movs	r2, #12
 800866e:	6002      	str	r2, [r0, #0]
 8008670:	2500      	movs	r5, #0
 8008672:	e7f8      	b.n	8008666 <_calloc_r+0x16>
 8008674:	4621      	mov	r1, r4
 8008676:	f7fd fdf1 	bl	800625c <memset>
 800867a:	e7f4      	b.n	8008666 <_calloc_r+0x16>

0800867c <_free_r>:
 800867c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800867e:	2900      	cmp	r1, #0
 8008680:	d044      	beq.n	800870c <_free_r+0x90>
 8008682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008686:	9001      	str	r0, [sp, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f1a1 0404 	sub.w	r4, r1, #4
 800868e:	bfb8      	it	lt
 8008690:	18e4      	addlt	r4, r4, r3
 8008692:	f000 fb19 	bl	8008cc8 <__malloc_lock>
 8008696:	4a1e      	ldr	r2, [pc, #120]	; (8008710 <_free_r+0x94>)
 8008698:	9801      	ldr	r0, [sp, #4]
 800869a:	6813      	ldr	r3, [r2, #0]
 800869c:	b933      	cbnz	r3, 80086ac <_free_r+0x30>
 800869e:	6063      	str	r3, [r4, #4]
 80086a0:	6014      	str	r4, [r2, #0]
 80086a2:	b003      	add	sp, #12
 80086a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086a8:	f000 bb14 	b.w	8008cd4 <__malloc_unlock>
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d908      	bls.n	80086c2 <_free_r+0x46>
 80086b0:	6825      	ldr	r5, [r4, #0]
 80086b2:	1961      	adds	r1, r4, r5
 80086b4:	428b      	cmp	r3, r1
 80086b6:	bf01      	itttt	eq
 80086b8:	6819      	ldreq	r1, [r3, #0]
 80086ba:	685b      	ldreq	r3, [r3, #4]
 80086bc:	1949      	addeq	r1, r1, r5
 80086be:	6021      	streq	r1, [r4, #0]
 80086c0:	e7ed      	b.n	800869e <_free_r+0x22>
 80086c2:	461a      	mov	r2, r3
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	b10b      	cbz	r3, 80086cc <_free_r+0x50>
 80086c8:	42a3      	cmp	r3, r4
 80086ca:	d9fa      	bls.n	80086c2 <_free_r+0x46>
 80086cc:	6811      	ldr	r1, [r2, #0]
 80086ce:	1855      	adds	r5, r2, r1
 80086d0:	42a5      	cmp	r5, r4
 80086d2:	d10b      	bne.n	80086ec <_free_r+0x70>
 80086d4:	6824      	ldr	r4, [r4, #0]
 80086d6:	4421      	add	r1, r4
 80086d8:	1854      	adds	r4, r2, r1
 80086da:	42a3      	cmp	r3, r4
 80086dc:	6011      	str	r1, [r2, #0]
 80086de:	d1e0      	bne.n	80086a2 <_free_r+0x26>
 80086e0:	681c      	ldr	r4, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	6053      	str	r3, [r2, #4]
 80086e6:	4421      	add	r1, r4
 80086e8:	6011      	str	r1, [r2, #0]
 80086ea:	e7da      	b.n	80086a2 <_free_r+0x26>
 80086ec:	d902      	bls.n	80086f4 <_free_r+0x78>
 80086ee:	230c      	movs	r3, #12
 80086f0:	6003      	str	r3, [r0, #0]
 80086f2:	e7d6      	b.n	80086a2 <_free_r+0x26>
 80086f4:	6825      	ldr	r5, [r4, #0]
 80086f6:	1961      	adds	r1, r4, r5
 80086f8:	428b      	cmp	r3, r1
 80086fa:	bf04      	itt	eq
 80086fc:	6819      	ldreq	r1, [r3, #0]
 80086fe:	685b      	ldreq	r3, [r3, #4]
 8008700:	6063      	str	r3, [r4, #4]
 8008702:	bf04      	itt	eq
 8008704:	1949      	addeq	r1, r1, r5
 8008706:	6021      	streq	r1, [r4, #0]
 8008708:	6054      	str	r4, [r2, #4]
 800870a:	e7ca      	b.n	80086a2 <_free_r+0x26>
 800870c:	b003      	add	sp, #12
 800870e:	bd30      	pop	{r4, r5, pc}
 8008710:	2000036c 	.word	0x2000036c

08008714 <sbrk_aligned>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	4e0e      	ldr	r6, [pc, #56]	; (8008750 <sbrk_aligned+0x3c>)
 8008718:	460c      	mov	r4, r1
 800871a:	6831      	ldr	r1, [r6, #0]
 800871c:	4605      	mov	r5, r0
 800871e:	b911      	cbnz	r1, 8008726 <sbrk_aligned+0x12>
 8008720:	f000 f9e6 	bl	8008af0 <_sbrk_r>
 8008724:	6030      	str	r0, [r6, #0]
 8008726:	4621      	mov	r1, r4
 8008728:	4628      	mov	r0, r5
 800872a:	f000 f9e1 	bl	8008af0 <_sbrk_r>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	d00a      	beq.n	8008748 <sbrk_aligned+0x34>
 8008732:	1cc4      	adds	r4, r0, #3
 8008734:	f024 0403 	bic.w	r4, r4, #3
 8008738:	42a0      	cmp	r0, r4
 800873a:	d007      	beq.n	800874c <sbrk_aligned+0x38>
 800873c:	1a21      	subs	r1, r4, r0
 800873e:	4628      	mov	r0, r5
 8008740:	f000 f9d6 	bl	8008af0 <_sbrk_r>
 8008744:	3001      	adds	r0, #1
 8008746:	d101      	bne.n	800874c <sbrk_aligned+0x38>
 8008748:	f04f 34ff 	mov.w	r4, #4294967295
 800874c:	4620      	mov	r0, r4
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	20000370 	.word	0x20000370

08008754 <_malloc_r>:
 8008754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008758:	1ccd      	adds	r5, r1, #3
 800875a:	f025 0503 	bic.w	r5, r5, #3
 800875e:	3508      	adds	r5, #8
 8008760:	2d0c      	cmp	r5, #12
 8008762:	bf38      	it	cc
 8008764:	250c      	movcc	r5, #12
 8008766:	2d00      	cmp	r5, #0
 8008768:	4607      	mov	r7, r0
 800876a:	db01      	blt.n	8008770 <_malloc_r+0x1c>
 800876c:	42a9      	cmp	r1, r5
 800876e:	d905      	bls.n	800877c <_malloc_r+0x28>
 8008770:	230c      	movs	r3, #12
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	2600      	movs	r6, #0
 8008776:	4630      	mov	r0, r6
 8008778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800877c:	4e2e      	ldr	r6, [pc, #184]	; (8008838 <_malloc_r+0xe4>)
 800877e:	f000 faa3 	bl	8008cc8 <__malloc_lock>
 8008782:	6833      	ldr	r3, [r6, #0]
 8008784:	461c      	mov	r4, r3
 8008786:	bb34      	cbnz	r4, 80087d6 <_malloc_r+0x82>
 8008788:	4629      	mov	r1, r5
 800878a:	4638      	mov	r0, r7
 800878c:	f7ff ffc2 	bl	8008714 <sbrk_aligned>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	4604      	mov	r4, r0
 8008794:	d14d      	bne.n	8008832 <_malloc_r+0xde>
 8008796:	6834      	ldr	r4, [r6, #0]
 8008798:	4626      	mov	r6, r4
 800879a:	2e00      	cmp	r6, #0
 800879c:	d140      	bne.n	8008820 <_malloc_r+0xcc>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	4631      	mov	r1, r6
 80087a2:	4638      	mov	r0, r7
 80087a4:	eb04 0803 	add.w	r8, r4, r3
 80087a8:	f000 f9a2 	bl	8008af0 <_sbrk_r>
 80087ac:	4580      	cmp	r8, r0
 80087ae:	d13a      	bne.n	8008826 <_malloc_r+0xd2>
 80087b0:	6821      	ldr	r1, [r4, #0]
 80087b2:	3503      	adds	r5, #3
 80087b4:	1a6d      	subs	r5, r5, r1
 80087b6:	f025 0503 	bic.w	r5, r5, #3
 80087ba:	3508      	adds	r5, #8
 80087bc:	2d0c      	cmp	r5, #12
 80087be:	bf38      	it	cc
 80087c0:	250c      	movcc	r5, #12
 80087c2:	4629      	mov	r1, r5
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff ffa5 	bl	8008714 <sbrk_aligned>
 80087ca:	3001      	adds	r0, #1
 80087cc:	d02b      	beq.n	8008826 <_malloc_r+0xd2>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	442b      	add	r3, r5
 80087d2:	6023      	str	r3, [r4, #0]
 80087d4:	e00e      	b.n	80087f4 <_malloc_r+0xa0>
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	1b52      	subs	r2, r2, r5
 80087da:	d41e      	bmi.n	800881a <_malloc_r+0xc6>
 80087dc:	2a0b      	cmp	r2, #11
 80087de:	d916      	bls.n	800880e <_malloc_r+0xba>
 80087e0:	1961      	adds	r1, r4, r5
 80087e2:	42a3      	cmp	r3, r4
 80087e4:	6025      	str	r5, [r4, #0]
 80087e6:	bf18      	it	ne
 80087e8:	6059      	strne	r1, [r3, #4]
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	bf08      	it	eq
 80087ee:	6031      	streq	r1, [r6, #0]
 80087f0:	5162      	str	r2, [r4, r5]
 80087f2:	604b      	str	r3, [r1, #4]
 80087f4:	4638      	mov	r0, r7
 80087f6:	f104 060b 	add.w	r6, r4, #11
 80087fa:	f000 fa6b 	bl	8008cd4 <__malloc_unlock>
 80087fe:	f026 0607 	bic.w	r6, r6, #7
 8008802:	1d23      	adds	r3, r4, #4
 8008804:	1af2      	subs	r2, r6, r3
 8008806:	d0b6      	beq.n	8008776 <_malloc_r+0x22>
 8008808:	1b9b      	subs	r3, r3, r6
 800880a:	50a3      	str	r3, [r4, r2]
 800880c:	e7b3      	b.n	8008776 <_malloc_r+0x22>
 800880e:	6862      	ldr	r2, [r4, #4]
 8008810:	42a3      	cmp	r3, r4
 8008812:	bf0c      	ite	eq
 8008814:	6032      	streq	r2, [r6, #0]
 8008816:	605a      	strne	r2, [r3, #4]
 8008818:	e7ec      	b.n	80087f4 <_malloc_r+0xa0>
 800881a:	4623      	mov	r3, r4
 800881c:	6864      	ldr	r4, [r4, #4]
 800881e:	e7b2      	b.n	8008786 <_malloc_r+0x32>
 8008820:	4634      	mov	r4, r6
 8008822:	6876      	ldr	r6, [r6, #4]
 8008824:	e7b9      	b.n	800879a <_malloc_r+0x46>
 8008826:	230c      	movs	r3, #12
 8008828:	603b      	str	r3, [r7, #0]
 800882a:	4638      	mov	r0, r7
 800882c:	f000 fa52 	bl	8008cd4 <__malloc_unlock>
 8008830:	e7a1      	b.n	8008776 <_malloc_r+0x22>
 8008832:	6025      	str	r5, [r4, #0]
 8008834:	e7de      	b.n	80087f4 <_malloc_r+0xa0>
 8008836:	bf00      	nop
 8008838:	2000036c 	.word	0x2000036c

0800883c <__sfputc_r>:
 800883c:	6893      	ldr	r3, [r2, #8]
 800883e:	3b01      	subs	r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	b410      	push	{r4}
 8008844:	6093      	str	r3, [r2, #8]
 8008846:	da08      	bge.n	800885a <__sfputc_r+0x1e>
 8008848:	6994      	ldr	r4, [r2, #24]
 800884a:	42a3      	cmp	r3, r4
 800884c:	db01      	blt.n	8008852 <__sfputc_r+0x16>
 800884e:	290a      	cmp	r1, #10
 8008850:	d103      	bne.n	800885a <__sfputc_r+0x1e>
 8008852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008856:	f7fe ba01 	b.w	8006c5c <__swbuf_r>
 800885a:	6813      	ldr	r3, [r2, #0]
 800885c:	1c58      	adds	r0, r3, #1
 800885e:	6010      	str	r0, [r2, #0]
 8008860:	7019      	strb	r1, [r3, #0]
 8008862:	4608      	mov	r0, r1
 8008864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008868:	4770      	bx	lr

0800886a <__sfputs_r>:
 800886a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886c:	4606      	mov	r6, r0
 800886e:	460f      	mov	r7, r1
 8008870:	4614      	mov	r4, r2
 8008872:	18d5      	adds	r5, r2, r3
 8008874:	42ac      	cmp	r4, r5
 8008876:	d101      	bne.n	800887c <__sfputs_r+0x12>
 8008878:	2000      	movs	r0, #0
 800887a:	e007      	b.n	800888c <__sfputs_r+0x22>
 800887c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008880:	463a      	mov	r2, r7
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ffda 	bl	800883c <__sfputc_r>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d1f3      	bne.n	8008874 <__sfputs_r+0xa>
 800888c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008890 <_vfiprintf_r>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	460d      	mov	r5, r1
 8008896:	b09d      	sub	sp, #116	; 0x74
 8008898:	4614      	mov	r4, r2
 800889a:	4698      	mov	r8, r3
 800889c:	4606      	mov	r6, r0
 800889e:	b118      	cbz	r0, 80088a8 <_vfiprintf_r+0x18>
 80088a0:	6983      	ldr	r3, [r0, #24]
 80088a2:	b90b      	cbnz	r3, 80088a8 <_vfiprintf_r+0x18>
 80088a4:	f7ff fa30 	bl	8007d08 <__sinit>
 80088a8:	4b89      	ldr	r3, [pc, #548]	; (8008ad0 <_vfiprintf_r+0x240>)
 80088aa:	429d      	cmp	r5, r3
 80088ac:	d11b      	bne.n	80088e6 <_vfiprintf_r+0x56>
 80088ae:	6875      	ldr	r5, [r6, #4]
 80088b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d405      	bmi.n	80088c2 <_vfiprintf_r+0x32>
 80088b6:	89ab      	ldrh	r3, [r5, #12]
 80088b8:	059a      	lsls	r2, r3, #22
 80088ba:	d402      	bmi.n	80088c2 <_vfiprintf_r+0x32>
 80088bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088be:	f7ff fac6 	bl	8007e4e <__retarget_lock_acquire_recursive>
 80088c2:	89ab      	ldrh	r3, [r5, #12]
 80088c4:	071b      	lsls	r3, r3, #28
 80088c6:	d501      	bpl.n	80088cc <_vfiprintf_r+0x3c>
 80088c8:	692b      	ldr	r3, [r5, #16]
 80088ca:	b9eb      	cbnz	r3, 8008908 <_vfiprintf_r+0x78>
 80088cc:	4629      	mov	r1, r5
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7fe fa16 	bl	8006d00 <__swsetup_r>
 80088d4:	b1c0      	cbz	r0, 8008908 <_vfiprintf_r+0x78>
 80088d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088d8:	07dc      	lsls	r4, r3, #31
 80088da:	d50e      	bpl.n	80088fa <_vfiprintf_r+0x6a>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	b01d      	add	sp, #116	; 0x74
 80088e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e6:	4b7b      	ldr	r3, [pc, #492]	; (8008ad4 <_vfiprintf_r+0x244>)
 80088e8:	429d      	cmp	r5, r3
 80088ea:	d101      	bne.n	80088f0 <_vfiprintf_r+0x60>
 80088ec:	68b5      	ldr	r5, [r6, #8]
 80088ee:	e7df      	b.n	80088b0 <_vfiprintf_r+0x20>
 80088f0:	4b79      	ldr	r3, [pc, #484]	; (8008ad8 <_vfiprintf_r+0x248>)
 80088f2:	429d      	cmp	r5, r3
 80088f4:	bf08      	it	eq
 80088f6:	68f5      	ldreq	r5, [r6, #12]
 80088f8:	e7da      	b.n	80088b0 <_vfiprintf_r+0x20>
 80088fa:	89ab      	ldrh	r3, [r5, #12]
 80088fc:	0598      	lsls	r0, r3, #22
 80088fe:	d4ed      	bmi.n	80088dc <_vfiprintf_r+0x4c>
 8008900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008902:	f7ff faa5 	bl	8007e50 <__retarget_lock_release_recursive>
 8008906:	e7e9      	b.n	80088dc <_vfiprintf_r+0x4c>
 8008908:	2300      	movs	r3, #0
 800890a:	9309      	str	r3, [sp, #36]	; 0x24
 800890c:	2320      	movs	r3, #32
 800890e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008912:	f8cd 800c 	str.w	r8, [sp, #12]
 8008916:	2330      	movs	r3, #48	; 0x30
 8008918:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008adc <_vfiprintf_r+0x24c>
 800891c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008920:	f04f 0901 	mov.w	r9, #1
 8008924:	4623      	mov	r3, r4
 8008926:	469a      	mov	sl, r3
 8008928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800892c:	b10a      	cbz	r2, 8008932 <_vfiprintf_r+0xa2>
 800892e:	2a25      	cmp	r2, #37	; 0x25
 8008930:	d1f9      	bne.n	8008926 <_vfiprintf_r+0x96>
 8008932:	ebba 0b04 	subs.w	fp, sl, r4
 8008936:	d00b      	beq.n	8008950 <_vfiprintf_r+0xc0>
 8008938:	465b      	mov	r3, fp
 800893a:	4622      	mov	r2, r4
 800893c:	4629      	mov	r1, r5
 800893e:	4630      	mov	r0, r6
 8008940:	f7ff ff93 	bl	800886a <__sfputs_r>
 8008944:	3001      	adds	r0, #1
 8008946:	f000 80aa 	beq.w	8008a9e <_vfiprintf_r+0x20e>
 800894a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800894c:	445a      	add	r2, fp
 800894e:	9209      	str	r2, [sp, #36]	; 0x24
 8008950:	f89a 3000 	ldrb.w	r3, [sl]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 80a2 	beq.w	8008a9e <_vfiprintf_r+0x20e>
 800895a:	2300      	movs	r3, #0
 800895c:	f04f 32ff 	mov.w	r2, #4294967295
 8008960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008964:	f10a 0a01 	add.w	sl, sl, #1
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	9307      	str	r3, [sp, #28]
 800896c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008970:	931a      	str	r3, [sp, #104]	; 0x68
 8008972:	4654      	mov	r4, sl
 8008974:	2205      	movs	r2, #5
 8008976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800897a:	4858      	ldr	r0, [pc, #352]	; (8008adc <_vfiprintf_r+0x24c>)
 800897c:	f7f7 fc30 	bl	80001e0 <memchr>
 8008980:	9a04      	ldr	r2, [sp, #16]
 8008982:	b9d8      	cbnz	r0, 80089bc <_vfiprintf_r+0x12c>
 8008984:	06d1      	lsls	r1, r2, #27
 8008986:	bf44      	itt	mi
 8008988:	2320      	movmi	r3, #32
 800898a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800898e:	0713      	lsls	r3, r2, #28
 8008990:	bf44      	itt	mi
 8008992:	232b      	movmi	r3, #43	; 0x2b
 8008994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008998:	f89a 3000 	ldrb.w	r3, [sl]
 800899c:	2b2a      	cmp	r3, #42	; 0x2a
 800899e:	d015      	beq.n	80089cc <_vfiprintf_r+0x13c>
 80089a0:	9a07      	ldr	r2, [sp, #28]
 80089a2:	4654      	mov	r4, sl
 80089a4:	2000      	movs	r0, #0
 80089a6:	f04f 0c0a 	mov.w	ip, #10
 80089aa:	4621      	mov	r1, r4
 80089ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089b0:	3b30      	subs	r3, #48	; 0x30
 80089b2:	2b09      	cmp	r3, #9
 80089b4:	d94e      	bls.n	8008a54 <_vfiprintf_r+0x1c4>
 80089b6:	b1b0      	cbz	r0, 80089e6 <_vfiprintf_r+0x156>
 80089b8:	9207      	str	r2, [sp, #28]
 80089ba:	e014      	b.n	80089e6 <_vfiprintf_r+0x156>
 80089bc:	eba0 0308 	sub.w	r3, r0, r8
 80089c0:	fa09 f303 	lsl.w	r3, r9, r3
 80089c4:	4313      	orrs	r3, r2
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	46a2      	mov	sl, r4
 80089ca:	e7d2      	b.n	8008972 <_vfiprintf_r+0xe2>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	1d19      	adds	r1, r3, #4
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	9103      	str	r1, [sp, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	bfbb      	ittet	lt
 80089d8:	425b      	neglt	r3, r3
 80089da:	f042 0202 	orrlt.w	r2, r2, #2
 80089de:	9307      	strge	r3, [sp, #28]
 80089e0:	9307      	strlt	r3, [sp, #28]
 80089e2:	bfb8      	it	lt
 80089e4:	9204      	strlt	r2, [sp, #16]
 80089e6:	7823      	ldrb	r3, [r4, #0]
 80089e8:	2b2e      	cmp	r3, #46	; 0x2e
 80089ea:	d10c      	bne.n	8008a06 <_vfiprintf_r+0x176>
 80089ec:	7863      	ldrb	r3, [r4, #1]
 80089ee:	2b2a      	cmp	r3, #42	; 0x2a
 80089f0:	d135      	bne.n	8008a5e <_vfiprintf_r+0x1ce>
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	1d1a      	adds	r2, r3, #4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	9203      	str	r2, [sp, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	bfb8      	it	lt
 80089fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a02:	3402      	adds	r4, #2
 8008a04:	9305      	str	r3, [sp, #20]
 8008a06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008aec <_vfiprintf_r+0x25c>
 8008a0a:	7821      	ldrb	r1, [r4, #0]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	4650      	mov	r0, sl
 8008a10:	f7f7 fbe6 	bl	80001e0 <memchr>
 8008a14:	b140      	cbz	r0, 8008a28 <_vfiprintf_r+0x198>
 8008a16:	2340      	movs	r3, #64	; 0x40
 8008a18:	eba0 000a 	sub.w	r0, r0, sl
 8008a1c:	fa03 f000 	lsl.w	r0, r3, r0
 8008a20:	9b04      	ldr	r3, [sp, #16]
 8008a22:	4303      	orrs	r3, r0
 8008a24:	3401      	adds	r4, #1
 8008a26:	9304      	str	r3, [sp, #16]
 8008a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2c:	482c      	ldr	r0, [pc, #176]	; (8008ae0 <_vfiprintf_r+0x250>)
 8008a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a32:	2206      	movs	r2, #6
 8008a34:	f7f7 fbd4 	bl	80001e0 <memchr>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d03f      	beq.n	8008abc <_vfiprintf_r+0x22c>
 8008a3c:	4b29      	ldr	r3, [pc, #164]	; (8008ae4 <_vfiprintf_r+0x254>)
 8008a3e:	bb1b      	cbnz	r3, 8008a88 <_vfiprintf_r+0x1f8>
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	3307      	adds	r3, #7
 8008a44:	f023 0307 	bic.w	r3, r3, #7
 8008a48:	3308      	adds	r3, #8
 8008a4a:	9303      	str	r3, [sp, #12]
 8008a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4e:	443b      	add	r3, r7
 8008a50:	9309      	str	r3, [sp, #36]	; 0x24
 8008a52:	e767      	b.n	8008924 <_vfiprintf_r+0x94>
 8008a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a58:	460c      	mov	r4, r1
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	e7a5      	b.n	80089aa <_vfiprintf_r+0x11a>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	3401      	adds	r4, #1
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	4619      	mov	r1, r3
 8008a66:	f04f 0c0a 	mov.w	ip, #10
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a70:	3a30      	subs	r2, #48	; 0x30
 8008a72:	2a09      	cmp	r2, #9
 8008a74:	d903      	bls.n	8008a7e <_vfiprintf_r+0x1ee>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0c5      	beq.n	8008a06 <_vfiprintf_r+0x176>
 8008a7a:	9105      	str	r1, [sp, #20]
 8008a7c:	e7c3      	b.n	8008a06 <_vfiprintf_r+0x176>
 8008a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a82:	4604      	mov	r4, r0
 8008a84:	2301      	movs	r3, #1
 8008a86:	e7f0      	b.n	8008a6a <_vfiprintf_r+0x1da>
 8008a88:	ab03      	add	r3, sp, #12
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	462a      	mov	r2, r5
 8008a8e:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <_vfiprintf_r+0x258>)
 8008a90:	a904      	add	r1, sp, #16
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7fd fc8a 	bl	80063ac <_printf_float>
 8008a98:	4607      	mov	r7, r0
 8008a9a:	1c78      	adds	r0, r7, #1
 8008a9c:	d1d6      	bne.n	8008a4c <_vfiprintf_r+0x1bc>
 8008a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa0:	07d9      	lsls	r1, r3, #31
 8008aa2:	d405      	bmi.n	8008ab0 <_vfiprintf_r+0x220>
 8008aa4:	89ab      	ldrh	r3, [r5, #12]
 8008aa6:	059a      	lsls	r2, r3, #22
 8008aa8:	d402      	bmi.n	8008ab0 <_vfiprintf_r+0x220>
 8008aaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aac:	f7ff f9d0 	bl	8007e50 <__retarget_lock_release_recursive>
 8008ab0:	89ab      	ldrh	r3, [r5, #12]
 8008ab2:	065b      	lsls	r3, r3, #25
 8008ab4:	f53f af12 	bmi.w	80088dc <_vfiprintf_r+0x4c>
 8008ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aba:	e711      	b.n	80088e0 <_vfiprintf_r+0x50>
 8008abc:	ab03      	add	r3, sp, #12
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	462a      	mov	r2, r5
 8008ac2:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <_vfiprintf_r+0x258>)
 8008ac4:	a904      	add	r1, sp, #16
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7fd ff14 	bl	80068f4 <_printf_i>
 8008acc:	e7e4      	b.n	8008a98 <_vfiprintf_r+0x208>
 8008ace:	bf00      	nop
 8008ad0:	080094b0 	.word	0x080094b0
 8008ad4:	080094d0 	.word	0x080094d0
 8008ad8:	08009490 	.word	0x08009490
 8008adc:	0800964c 	.word	0x0800964c
 8008ae0:	08009656 	.word	0x08009656
 8008ae4:	080063ad 	.word	0x080063ad
 8008ae8:	0800886b 	.word	0x0800886b
 8008aec:	08009652 	.word	0x08009652

08008af0 <_sbrk_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d06      	ldr	r5, [pc, #24]	; (8008b0c <_sbrk_r+0x1c>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7f9 f8f2 	bl	8001ce4 <_sbrk>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_sbrk_r+0x1a>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_sbrk_r+0x1a>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20000374 	.word	0x20000374

08008b10 <__sread>:
 8008b10:	b510      	push	{r4, lr}
 8008b12:	460c      	mov	r4, r1
 8008b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b18:	f000 f8e2 	bl	8008ce0 <_read_r>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	bfab      	itete	ge
 8008b20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b22:	89a3      	ldrhlt	r3, [r4, #12]
 8008b24:	181b      	addge	r3, r3, r0
 8008b26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b2a:	bfac      	ite	ge
 8008b2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b2e:	81a3      	strhlt	r3, [r4, #12]
 8008b30:	bd10      	pop	{r4, pc}

08008b32 <__swrite>:
 8008b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b36:	461f      	mov	r7, r3
 8008b38:	898b      	ldrh	r3, [r1, #12]
 8008b3a:	05db      	lsls	r3, r3, #23
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	4616      	mov	r6, r2
 8008b42:	d505      	bpl.n	8008b50 <__swrite+0x1e>
 8008b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b48:	2302      	movs	r3, #2
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f000 f898 	bl	8008c80 <_lseek_r>
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b5a:	81a3      	strh	r3, [r4, #12]
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	463b      	mov	r3, r7
 8008b60:	4628      	mov	r0, r5
 8008b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b66:	f000 b817 	b.w	8008b98 <_write_r>

08008b6a <__sseek>:
 8008b6a:	b510      	push	{r4, lr}
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b72:	f000 f885 	bl	8008c80 <_lseek_r>
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	bf15      	itete	ne
 8008b7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b86:	81a3      	strheq	r3, [r4, #12]
 8008b88:	bf18      	it	ne
 8008b8a:	81a3      	strhne	r3, [r4, #12]
 8008b8c:	bd10      	pop	{r4, pc}

08008b8e <__sclose>:
 8008b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b92:	f000 b831 	b.w	8008bf8 <_close_r>
	...

08008b98 <_write_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d07      	ldr	r5, [pc, #28]	; (8008bb8 <_write_r+0x20>)
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	602a      	str	r2, [r5, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f7f8 fb16 	bl	80011d8 <_write>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_write_r+0x1e>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_write_r+0x1e>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	20000374 	.word	0x20000374

08008bbc <__assert_func>:
 8008bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bbe:	4614      	mov	r4, r2
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <__assert_func+0x2c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	68d8      	ldr	r0, [r3, #12]
 8008bca:	b14c      	cbz	r4, 8008be0 <__assert_func+0x24>
 8008bcc:	4b07      	ldr	r3, [pc, #28]	; (8008bec <__assert_func+0x30>)
 8008bce:	9100      	str	r1, [sp, #0]
 8008bd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bd4:	4906      	ldr	r1, [pc, #24]	; (8008bf0 <__assert_func+0x34>)
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	f000 f81e 	bl	8008c18 <fiprintf>
 8008bdc:	f000 f89f 	bl	8008d1e <abort>
 8008be0:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <__assert_func+0x38>)
 8008be2:	461c      	mov	r4, r3
 8008be4:	e7f3      	b.n	8008bce <__assert_func+0x12>
 8008be6:	bf00      	nop
 8008be8:	20000010 	.word	0x20000010
 8008bec:	0800965d 	.word	0x0800965d
 8008bf0:	0800966a 	.word	0x0800966a
 8008bf4:	08009698 	.word	0x08009698

08008bf8 <_close_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d06      	ldr	r5, [pc, #24]	; (8008c14 <_close_r+0x1c>)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	f7f9 f839 	bl	8001c7a <_close>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_close_r+0x1a>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_close_r+0x1a>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	20000374 	.word	0x20000374

08008c18 <fiprintf>:
 8008c18:	b40e      	push	{r1, r2, r3}
 8008c1a:	b503      	push	{r0, r1, lr}
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	ab03      	add	r3, sp, #12
 8008c20:	4805      	ldr	r0, [pc, #20]	; (8008c38 <fiprintf+0x20>)
 8008c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c26:	6800      	ldr	r0, [r0, #0]
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	f7ff fe31 	bl	8008890 <_vfiprintf_r>
 8008c2e:	b002      	add	sp, #8
 8008c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c34:	b003      	add	sp, #12
 8008c36:	4770      	bx	lr
 8008c38:	20000010 	.word	0x20000010

08008c3c <_fstat_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	4d07      	ldr	r5, [pc, #28]	; (8008c5c <_fstat_r+0x20>)
 8008c40:	2300      	movs	r3, #0
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	f7f9 f822 	bl	8001c92 <_fstat>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d102      	bne.n	8008c58 <_fstat_r+0x1c>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	b103      	cbz	r3, 8008c58 <_fstat_r+0x1c>
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	bd38      	pop	{r3, r4, r5, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000374 	.word	0x20000374

08008c60 <_isatty_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d06      	ldr	r5, [pc, #24]	; (8008c7c <_isatty_r+0x1c>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7f9 f821 	bl	8001cb2 <_isatty>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_isatty_r+0x1a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_isatty_r+0x1a>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20000374 	.word	0x20000374

08008c80 <_lseek_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d07      	ldr	r5, [pc, #28]	; (8008ca0 <_lseek_r+0x20>)
 8008c84:	4604      	mov	r4, r0
 8008c86:	4608      	mov	r0, r1
 8008c88:	4611      	mov	r1, r2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	602a      	str	r2, [r5, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f7f9 f81a 	bl	8001cc8 <_lseek>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_lseek_r+0x1e>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_lseek_r+0x1e>
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	20000374 	.word	0x20000374

08008ca4 <__ascii_mbtowc>:
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	b901      	cbnz	r1, 8008caa <__ascii_mbtowc+0x6>
 8008ca8:	a901      	add	r1, sp, #4
 8008caa:	b142      	cbz	r2, 8008cbe <__ascii_mbtowc+0x1a>
 8008cac:	b14b      	cbz	r3, 8008cc2 <__ascii_mbtowc+0x1e>
 8008cae:	7813      	ldrb	r3, [r2, #0]
 8008cb0:	600b      	str	r3, [r1, #0]
 8008cb2:	7812      	ldrb	r2, [r2, #0]
 8008cb4:	1e10      	subs	r0, r2, #0
 8008cb6:	bf18      	it	ne
 8008cb8:	2001      	movne	r0, #1
 8008cba:	b002      	add	sp, #8
 8008cbc:	4770      	bx	lr
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	e7fb      	b.n	8008cba <__ascii_mbtowc+0x16>
 8008cc2:	f06f 0001 	mvn.w	r0, #1
 8008cc6:	e7f8      	b.n	8008cba <__ascii_mbtowc+0x16>

08008cc8 <__malloc_lock>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	; (8008cd0 <__malloc_lock+0x8>)
 8008cca:	f7ff b8c0 	b.w	8007e4e <__retarget_lock_acquire_recursive>
 8008cce:	bf00      	nop
 8008cd0:	20000368 	.word	0x20000368

08008cd4 <__malloc_unlock>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__malloc_unlock+0x8>)
 8008cd6:	f7ff b8bb 	b.w	8007e50 <__retarget_lock_release_recursive>
 8008cda:	bf00      	nop
 8008cdc:	20000368 	.word	0x20000368

08008ce0 <_read_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d07      	ldr	r5, [pc, #28]	; (8008d00 <_read_r+0x20>)
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	4611      	mov	r1, r2
 8008cea:	2200      	movs	r2, #0
 8008cec:	602a      	str	r2, [r5, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f7f8 ffa6 	bl	8001c40 <_read>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_read_r+0x1e>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_read_r+0x1e>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	20000374 	.word	0x20000374

08008d04 <__ascii_wctomb>:
 8008d04:	b149      	cbz	r1, 8008d1a <__ascii_wctomb+0x16>
 8008d06:	2aff      	cmp	r2, #255	; 0xff
 8008d08:	bf85      	ittet	hi
 8008d0a:	238a      	movhi	r3, #138	; 0x8a
 8008d0c:	6003      	strhi	r3, [r0, #0]
 8008d0e:	700a      	strbls	r2, [r1, #0]
 8008d10:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d14:	bf98      	it	ls
 8008d16:	2001      	movls	r0, #1
 8008d18:	4770      	bx	lr
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	4770      	bx	lr

08008d1e <abort>:
 8008d1e:	b508      	push	{r3, lr}
 8008d20:	2006      	movs	r0, #6
 8008d22:	f000 f82b 	bl	8008d7c <raise>
 8008d26:	2001      	movs	r0, #1
 8008d28:	f7f8 ff80 	bl	8001c2c <_exit>

08008d2c <_raise_r>:
 8008d2c:	291f      	cmp	r1, #31
 8008d2e:	b538      	push	{r3, r4, r5, lr}
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	d904      	bls.n	8008d40 <_raise_r+0x14>
 8008d36:	2316      	movs	r3, #22
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d42:	b112      	cbz	r2, 8008d4a <_raise_r+0x1e>
 8008d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d48:	b94b      	cbnz	r3, 8008d5e <_raise_r+0x32>
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 f830 	bl	8008db0 <_getpid_r>
 8008d50:	462a      	mov	r2, r5
 8008d52:	4601      	mov	r1, r0
 8008d54:	4620      	mov	r0, r4
 8008d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d5a:	f000 b817 	b.w	8008d8c <_kill_r>
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d00a      	beq.n	8008d78 <_raise_r+0x4c>
 8008d62:	1c59      	adds	r1, r3, #1
 8008d64:	d103      	bne.n	8008d6e <_raise_r+0x42>
 8008d66:	2316      	movs	r3, #22
 8008d68:	6003      	str	r3, [r0, #0]
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	e7e7      	b.n	8008d3e <_raise_r+0x12>
 8008d6e:	2400      	movs	r4, #0
 8008d70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d74:	4628      	mov	r0, r5
 8008d76:	4798      	blx	r3
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e7e0      	b.n	8008d3e <_raise_r+0x12>

08008d7c <raise>:
 8008d7c:	4b02      	ldr	r3, [pc, #8]	; (8008d88 <raise+0xc>)
 8008d7e:	4601      	mov	r1, r0
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	f7ff bfd3 	b.w	8008d2c <_raise_r>
 8008d86:	bf00      	nop
 8008d88:	20000010 	.word	0x20000010

08008d8c <_kill_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4d07      	ldr	r5, [pc, #28]	; (8008dac <_kill_r+0x20>)
 8008d90:	2300      	movs	r3, #0
 8008d92:	4604      	mov	r4, r0
 8008d94:	4608      	mov	r0, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	f7f8 ff37 	bl	8001c0c <_kill>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	d102      	bne.n	8008da8 <_kill_r+0x1c>
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	b103      	cbz	r3, 8008da8 <_kill_r+0x1c>
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	bd38      	pop	{r3, r4, r5, pc}
 8008daa:	bf00      	nop
 8008dac:	20000374 	.word	0x20000374

08008db0 <_getpid_r>:
 8008db0:	f7f8 bf24 	b.w	8001bfc <_getpid>

08008db4 <atan2>:
 8008db4:	f000 b800 	b.w	8008db8 <__ieee754_atan2>

08008db8 <__ieee754_atan2>:
 8008db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dbc:	ec57 6b11 	vmov	r6, r7, d1
 8008dc0:	4273      	negs	r3, r6
 8008dc2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008f48 <__ieee754_atan2+0x190>
 8008dc6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008dca:	4333      	orrs	r3, r6
 8008dcc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008dd0:	4573      	cmp	r3, lr
 8008dd2:	ec51 0b10 	vmov	r0, r1, d0
 8008dd6:	ee11 8a10 	vmov	r8, s2
 8008dda:	d80a      	bhi.n	8008df2 <__ieee754_atan2+0x3a>
 8008ddc:	4244      	negs	r4, r0
 8008dde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008de2:	4304      	orrs	r4, r0
 8008de4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008de8:	4574      	cmp	r4, lr
 8008dea:	ee10 9a10 	vmov	r9, s0
 8008dee:	468c      	mov	ip, r1
 8008df0:	d907      	bls.n	8008e02 <__ieee754_atan2+0x4a>
 8008df2:	4632      	mov	r2, r6
 8008df4:	463b      	mov	r3, r7
 8008df6:	f7f7 fa49 	bl	800028c <__adddf3>
 8008dfa:	ec41 0b10 	vmov	d0, r0, r1
 8008dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008e06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008e0a:	4334      	orrs	r4, r6
 8008e0c:	d103      	bne.n	8008e16 <__ieee754_atan2+0x5e>
 8008e0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e12:	f000 b89d 	b.w	8008f50 <atan>
 8008e16:	17bc      	asrs	r4, r7, #30
 8008e18:	f004 0402 	and.w	r4, r4, #2
 8008e1c:	ea53 0909 	orrs.w	r9, r3, r9
 8008e20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008e24:	d107      	bne.n	8008e36 <__ieee754_atan2+0x7e>
 8008e26:	2c02      	cmp	r4, #2
 8008e28:	d060      	beq.n	8008eec <__ieee754_atan2+0x134>
 8008e2a:	2c03      	cmp	r4, #3
 8008e2c:	d1e5      	bne.n	8008dfa <__ieee754_atan2+0x42>
 8008e2e:	a142      	add	r1, pc, #264	; (adr r1, 8008f38 <__ieee754_atan2+0x180>)
 8008e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e34:	e7e1      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008e36:	ea52 0808 	orrs.w	r8, r2, r8
 8008e3a:	d106      	bne.n	8008e4a <__ieee754_atan2+0x92>
 8008e3c:	f1bc 0f00 	cmp.w	ip, #0
 8008e40:	da5f      	bge.n	8008f02 <__ieee754_atan2+0x14a>
 8008e42:	a13f      	add	r1, pc, #252	; (adr r1, 8008f40 <__ieee754_atan2+0x188>)
 8008e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e48:	e7d7      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008e4a:	4572      	cmp	r2, lr
 8008e4c:	d10f      	bne.n	8008e6e <__ieee754_atan2+0xb6>
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e54:	d107      	bne.n	8008e66 <__ieee754_atan2+0xae>
 8008e56:	2c02      	cmp	r4, #2
 8008e58:	d84c      	bhi.n	8008ef4 <__ieee754_atan2+0x13c>
 8008e5a:	4b35      	ldr	r3, [pc, #212]	; (8008f30 <__ieee754_atan2+0x178>)
 8008e5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008e60:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e64:	e7c9      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008e66:	2c02      	cmp	r4, #2
 8008e68:	d848      	bhi.n	8008efc <__ieee754_atan2+0x144>
 8008e6a:	4b32      	ldr	r3, [pc, #200]	; (8008f34 <__ieee754_atan2+0x17c>)
 8008e6c:	e7f6      	b.n	8008e5c <__ieee754_atan2+0xa4>
 8008e6e:	4573      	cmp	r3, lr
 8008e70:	d0e4      	beq.n	8008e3c <__ieee754_atan2+0x84>
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008e78:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e7c:	da1e      	bge.n	8008ebc <__ieee754_atan2+0x104>
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	da01      	bge.n	8008e86 <__ieee754_atan2+0xce>
 8008e82:	323c      	adds	r2, #60	; 0x3c
 8008e84:	db1e      	blt.n	8008ec4 <__ieee754_atan2+0x10c>
 8008e86:	4632      	mov	r2, r6
 8008e88:	463b      	mov	r3, r7
 8008e8a:	f7f7 fcdf 	bl	800084c <__aeabi_ddiv>
 8008e8e:	ec41 0b10 	vmov	d0, r0, r1
 8008e92:	f000 f9fd 	bl	8009290 <fabs>
 8008e96:	f000 f85b 	bl	8008f50 <atan>
 8008e9a:	ec51 0b10 	vmov	r0, r1, d0
 8008e9e:	2c01      	cmp	r4, #1
 8008ea0:	d013      	beq.n	8008eca <__ieee754_atan2+0x112>
 8008ea2:	2c02      	cmp	r4, #2
 8008ea4:	d015      	beq.n	8008ed2 <__ieee754_atan2+0x11a>
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	d0a7      	beq.n	8008dfa <__ieee754_atan2+0x42>
 8008eaa:	a319      	add	r3, pc, #100	; (adr r3, 8008f10 <__ieee754_atan2+0x158>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f7f7 f9ea 	bl	8000288 <__aeabi_dsub>
 8008eb4:	a318      	add	r3, pc, #96	; (adr r3, 8008f18 <__ieee754_atan2+0x160>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	e014      	b.n	8008ee6 <__ieee754_atan2+0x12e>
 8008ebc:	a118      	add	r1, pc, #96	; (adr r1, 8008f20 <__ieee754_atan2+0x168>)
 8008ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec2:	e7ec      	b.n	8008e9e <__ieee754_atan2+0xe6>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	e7e9      	b.n	8008e9e <__ieee754_atan2+0xe6>
 8008eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ece:	4619      	mov	r1, r3
 8008ed0:	e793      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008ed2:	a30f      	add	r3, pc, #60	; (adr r3, 8008f10 <__ieee754_atan2+0x158>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f7f7 f9d6 	bl	8000288 <__aeabi_dsub>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	a10d      	add	r1, pc, #52	; (adr r1, 8008f18 <__ieee754_atan2+0x160>)
 8008ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee6:	f7f7 f9cf 	bl	8000288 <__aeabi_dsub>
 8008eea:	e786      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008eec:	a10a      	add	r1, pc, #40	; (adr r1, 8008f18 <__ieee754_atan2+0x160>)
 8008eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ef2:	e782      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008ef4:	a10c      	add	r1, pc, #48	; (adr r1, 8008f28 <__ieee754_atan2+0x170>)
 8008ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008efa:	e77e      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008efc:	2000      	movs	r0, #0
 8008efe:	2100      	movs	r1, #0
 8008f00:	e77b      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008f02:	a107      	add	r1, pc, #28	; (adr r1, 8008f20 <__ieee754_atan2+0x168>)
 8008f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f08:	e777      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008f0a:	bf00      	nop
 8008f0c:	f3af 8000 	nop.w
 8008f10:	33145c07 	.word	0x33145c07
 8008f14:	3ca1a626 	.word	0x3ca1a626
 8008f18:	54442d18 	.word	0x54442d18
 8008f1c:	400921fb 	.word	0x400921fb
 8008f20:	54442d18 	.word	0x54442d18
 8008f24:	3ff921fb 	.word	0x3ff921fb
 8008f28:	54442d18 	.word	0x54442d18
 8008f2c:	3fe921fb 	.word	0x3fe921fb
 8008f30:	080097a8 	.word	0x080097a8
 8008f34:	080097c0 	.word	0x080097c0
 8008f38:	54442d18 	.word	0x54442d18
 8008f3c:	c00921fb 	.word	0xc00921fb
 8008f40:	54442d18 	.word	0x54442d18
 8008f44:	bff921fb 	.word	0xbff921fb
 8008f48:	7ff00000 	.word	0x7ff00000
 8008f4c:	00000000 	.word	0x00000000

08008f50 <atan>:
 8008f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	ec55 4b10 	vmov	r4, r5, d0
 8008f58:	4bc3      	ldr	r3, [pc, #780]	; (8009268 <atan+0x318>)
 8008f5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f5e:	429e      	cmp	r6, r3
 8008f60:	46ab      	mov	fp, r5
 8008f62:	dd18      	ble.n	8008f96 <atan+0x46>
 8008f64:	4bc1      	ldr	r3, [pc, #772]	; (800926c <atan+0x31c>)
 8008f66:	429e      	cmp	r6, r3
 8008f68:	dc01      	bgt.n	8008f6e <atan+0x1e>
 8008f6a:	d109      	bne.n	8008f80 <atan+0x30>
 8008f6c:	b144      	cbz	r4, 8008f80 <atan+0x30>
 8008f6e:	4622      	mov	r2, r4
 8008f70:	462b      	mov	r3, r5
 8008f72:	4620      	mov	r0, r4
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7f7 f989 	bl	800028c <__adddf3>
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	e006      	b.n	8008f8e <atan+0x3e>
 8008f80:	f1bb 0f00 	cmp.w	fp, #0
 8008f84:	f300 8131 	bgt.w	80091ea <atan+0x29a>
 8008f88:	a59b      	add	r5, pc, #620	; (adr r5, 80091f8 <atan+0x2a8>)
 8008f8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008f8e:	ec45 4b10 	vmov	d0, r4, r5
 8008f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f96:	4bb6      	ldr	r3, [pc, #728]	; (8009270 <atan+0x320>)
 8008f98:	429e      	cmp	r6, r3
 8008f9a:	dc14      	bgt.n	8008fc6 <atan+0x76>
 8008f9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008fa0:	429e      	cmp	r6, r3
 8008fa2:	dc0d      	bgt.n	8008fc0 <atan+0x70>
 8008fa4:	a396      	add	r3, pc, #600	; (adr r3, 8009200 <atan+0x2b0>)
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	ee10 0a10 	vmov	r0, s0
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7f7 f96c 	bl	800028c <__adddf3>
 8008fb4:	4baf      	ldr	r3, [pc, #700]	; (8009274 <atan+0x324>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f7f7 fdae 	bl	8000b18 <__aeabi_dcmpgt>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d1e6      	bne.n	8008f8e <atan+0x3e>
 8008fc0:	f04f 3aff 	mov.w	sl, #4294967295
 8008fc4:	e02b      	b.n	800901e <atan+0xce>
 8008fc6:	f000 f963 	bl	8009290 <fabs>
 8008fca:	4bab      	ldr	r3, [pc, #684]	; (8009278 <atan+0x328>)
 8008fcc:	429e      	cmp	r6, r3
 8008fce:	ec55 4b10 	vmov	r4, r5, d0
 8008fd2:	f300 80bf 	bgt.w	8009154 <atan+0x204>
 8008fd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008fda:	429e      	cmp	r6, r3
 8008fdc:	f300 80a0 	bgt.w	8009120 <atan+0x1d0>
 8008fe0:	ee10 2a10 	vmov	r2, s0
 8008fe4:	ee10 0a10 	vmov	r0, s0
 8008fe8:	462b      	mov	r3, r5
 8008fea:	4629      	mov	r1, r5
 8008fec:	f7f7 f94e 	bl	800028c <__adddf3>
 8008ff0:	4ba0      	ldr	r3, [pc, #640]	; (8009274 <atan+0x324>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f7f7 f948 	bl	8000288 <__aeabi_dsub>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460f      	mov	r7, r1
 8008ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009002:	4620      	mov	r0, r4
 8009004:	4629      	mov	r1, r5
 8009006:	f7f7 f941 	bl	800028c <__adddf3>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4630      	mov	r0, r6
 8009010:	4639      	mov	r1, r7
 8009012:	f7f7 fc1b 	bl	800084c <__aeabi_ddiv>
 8009016:	f04f 0a00 	mov.w	sl, #0
 800901a:	4604      	mov	r4, r0
 800901c:	460d      	mov	r5, r1
 800901e:	4622      	mov	r2, r4
 8009020:	462b      	mov	r3, r5
 8009022:	4620      	mov	r0, r4
 8009024:	4629      	mov	r1, r5
 8009026:	f7f7 fae7 	bl	80005f8 <__aeabi_dmul>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4680      	mov	r8, r0
 8009030:	4689      	mov	r9, r1
 8009032:	f7f7 fae1 	bl	80005f8 <__aeabi_dmul>
 8009036:	a374      	add	r3, pc, #464	; (adr r3, 8009208 <atan+0x2b8>)
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	4606      	mov	r6, r0
 800903e:	460f      	mov	r7, r1
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	a372      	add	r3, pc, #456	; (adr r3, 8009210 <atan+0x2c0>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f7f7 f91f 	bl	800028c <__adddf3>
 800904e:	4632      	mov	r2, r6
 8009050:	463b      	mov	r3, r7
 8009052:	f7f7 fad1 	bl	80005f8 <__aeabi_dmul>
 8009056:	a370      	add	r3, pc, #448	; (adr r3, 8009218 <atan+0x2c8>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f7f7 f916 	bl	800028c <__adddf3>
 8009060:	4632      	mov	r2, r6
 8009062:	463b      	mov	r3, r7
 8009064:	f7f7 fac8 	bl	80005f8 <__aeabi_dmul>
 8009068:	a36d      	add	r3, pc, #436	; (adr r3, 8009220 <atan+0x2d0>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f7f7 f90d 	bl	800028c <__adddf3>
 8009072:	4632      	mov	r2, r6
 8009074:	463b      	mov	r3, r7
 8009076:	f7f7 fabf 	bl	80005f8 <__aeabi_dmul>
 800907a:	a36b      	add	r3, pc, #428	; (adr r3, 8009228 <atan+0x2d8>)
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f7f7 f904 	bl	800028c <__adddf3>
 8009084:	4632      	mov	r2, r6
 8009086:	463b      	mov	r3, r7
 8009088:	f7f7 fab6 	bl	80005f8 <__aeabi_dmul>
 800908c:	a368      	add	r3, pc, #416	; (adr r3, 8009230 <atan+0x2e0>)
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	f7f7 f8fb 	bl	800028c <__adddf3>
 8009096:	4642      	mov	r2, r8
 8009098:	464b      	mov	r3, r9
 800909a:	f7f7 faad 	bl	80005f8 <__aeabi_dmul>
 800909e:	a366      	add	r3, pc, #408	; (adr r3, 8009238 <atan+0x2e8>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	4680      	mov	r8, r0
 80090a6:	4689      	mov	r9, r1
 80090a8:	4630      	mov	r0, r6
 80090aa:	4639      	mov	r1, r7
 80090ac:	f7f7 faa4 	bl	80005f8 <__aeabi_dmul>
 80090b0:	a363      	add	r3, pc, #396	; (adr r3, 8009240 <atan+0x2f0>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f7f7 f8e7 	bl	8000288 <__aeabi_dsub>
 80090ba:	4632      	mov	r2, r6
 80090bc:	463b      	mov	r3, r7
 80090be:	f7f7 fa9b 	bl	80005f8 <__aeabi_dmul>
 80090c2:	a361      	add	r3, pc, #388	; (adr r3, 8009248 <atan+0x2f8>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	f7f7 f8de 	bl	8000288 <__aeabi_dsub>
 80090cc:	4632      	mov	r2, r6
 80090ce:	463b      	mov	r3, r7
 80090d0:	f7f7 fa92 	bl	80005f8 <__aeabi_dmul>
 80090d4:	a35e      	add	r3, pc, #376	; (adr r3, 8009250 <atan+0x300>)
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	f7f7 f8d5 	bl	8000288 <__aeabi_dsub>
 80090de:	4632      	mov	r2, r6
 80090e0:	463b      	mov	r3, r7
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	a35c      	add	r3, pc, #368	; (adr r3, 8009258 <atan+0x308>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 f8cc 	bl	8000288 <__aeabi_dsub>
 80090f0:	4632      	mov	r2, r6
 80090f2:	463b      	mov	r3, r7
 80090f4:	f7f7 fa80 	bl	80005f8 <__aeabi_dmul>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4640      	mov	r0, r8
 80090fe:	4649      	mov	r1, r9
 8009100:	f7f7 f8c4 	bl	800028c <__adddf3>
 8009104:	4622      	mov	r2, r4
 8009106:	462b      	mov	r3, r5
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	d14b      	bne.n	80091ae <atan+0x25e>
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 f8b5 	bl	8000288 <__aeabi_dsub>
 800911e:	e72c      	b.n	8008f7a <atan+0x2a>
 8009120:	ee10 0a10 	vmov	r0, s0
 8009124:	4b53      	ldr	r3, [pc, #332]	; (8009274 <atan+0x324>)
 8009126:	2200      	movs	r2, #0
 8009128:	4629      	mov	r1, r5
 800912a:	f7f7 f8ad 	bl	8000288 <__aeabi_dsub>
 800912e:	4b51      	ldr	r3, [pc, #324]	; (8009274 <atan+0x324>)
 8009130:	4606      	mov	r6, r0
 8009132:	460f      	mov	r7, r1
 8009134:	2200      	movs	r2, #0
 8009136:	4620      	mov	r0, r4
 8009138:	4629      	mov	r1, r5
 800913a:	f7f7 f8a7 	bl	800028c <__adddf3>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4630      	mov	r0, r6
 8009144:	4639      	mov	r1, r7
 8009146:	f7f7 fb81 	bl	800084c <__aeabi_ddiv>
 800914a:	f04f 0a01 	mov.w	sl, #1
 800914e:	4604      	mov	r4, r0
 8009150:	460d      	mov	r5, r1
 8009152:	e764      	b.n	800901e <atan+0xce>
 8009154:	4b49      	ldr	r3, [pc, #292]	; (800927c <atan+0x32c>)
 8009156:	429e      	cmp	r6, r3
 8009158:	da1d      	bge.n	8009196 <atan+0x246>
 800915a:	ee10 0a10 	vmov	r0, s0
 800915e:	4b48      	ldr	r3, [pc, #288]	; (8009280 <atan+0x330>)
 8009160:	2200      	movs	r2, #0
 8009162:	4629      	mov	r1, r5
 8009164:	f7f7 f890 	bl	8000288 <__aeabi_dsub>
 8009168:	4b45      	ldr	r3, [pc, #276]	; (8009280 <atan+0x330>)
 800916a:	4606      	mov	r6, r0
 800916c:	460f      	mov	r7, r1
 800916e:	2200      	movs	r2, #0
 8009170:	4620      	mov	r0, r4
 8009172:	4629      	mov	r1, r5
 8009174:	f7f7 fa40 	bl	80005f8 <__aeabi_dmul>
 8009178:	4b3e      	ldr	r3, [pc, #248]	; (8009274 <atan+0x324>)
 800917a:	2200      	movs	r2, #0
 800917c:	f7f7 f886 	bl	800028c <__adddf3>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4630      	mov	r0, r6
 8009186:	4639      	mov	r1, r7
 8009188:	f7f7 fb60 	bl	800084c <__aeabi_ddiv>
 800918c:	f04f 0a02 	mov.w	sl, #2
 8009190:	4604      	mov	r4, r0
 8009192:	460d      	mov	r5, r1
 8009194:	e743      	b.n	800901e <atan+0xce>
 8009196:	462b      	mov	r3, r5
 8009198:	ee10 2a10 	vmov	r2, s0
 800919c:	4939      	ldr	r1, [pc, #228]	; (8009284 <atan+0x334>)
 800919e:	2000      	movs	r0, #0
 80091a0:	f7f7 fb54 	bl	800084c <__aeabi_ddiv>
 80091a4:	f04f 0a03 	mov.w	sl, #3
 80091a8:	4604      	mov	r4, r0
 80091aa:	460d      	mov	r5, r1
 80091ac:	e737      	b.n	800901e <atan+0xce>
 80091ae:	4b36      	ldr	r3, [pc, #216]	; (8009288 <atan+0x338>)
 80091b0:	4e36      	ldr	r6, [pc, #216]	; (800928c <atan+0x33c>)
 80091b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80091b6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80091ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80091be:	f7f7 f863 	bl	8000288 <__aeabi_dsub>
 80091c2:	4622      	mov	r2, r4
 80091c4:	462b      	mov	r3, r5
 80091c6:	f7f7 f85f 	bl	8000288 <__aeabi_dsub>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80091d2:	f7f7 f859 	bl	8000288 <__aeabi_dsub>
 80091d6:	f1bb 0f00 	cmp.w	fp, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	460d      	mov	r5, r1
 80091de:	f6bf aed6 	bge.w	8008f8e <atan+0x3e>
 80091e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091e6:	461d      	mov	r5, r3
 80091e8:	e6d1      	b.n	8008f8e <atan+0x3e>
 80091ea:	a51d      	add	r5, pc, #116	; (adr r5, 8009260 <atan+0x310>)
 80091ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091f0:	e6cd      	b.n	8008f8e <atan+0x3e>
 80091f2:	bf00      	nop
 80091f4:	f3af 8000 	nop.w
 80091f8:	54442d18 	.word	0x54442d18
 80091fc:	bff921fb 	.word	0xbff921fb
 8009200:	8800759c 	.word	0x8800759c
 8009204:	7e37e43c 	.word	0x7e37e43c
 8009208:	e322da11 	.word	0xe322da11
 800920c:	3f90ad3a 	.word	0x3f90ad3a
 8009210:	24760deb 	.word	0x24760deb
 8009214:	3fa97b4b 	.word	0x3fa97b4b
 8009218:	a0d03d51 	.word	0xa0d03d51
 800921c:	3fb10d66 	.word	0x3fb10d66
 8009220:	c54c206e 	.word	0xc54c206e
 8009224:	3fb745cd 	.word	0x3fb745cd
 8009228:	920083ff 	.word	0x920083ff
 800922c:	3fc24924 	.word	0x3fc24924
 8009230:	5555550d 	.word	0x5555550d
 8009234:	3fd55555 	.word	0x3fd55555
 8009238:	2c6a6c2f 	.word	0x2c6a6c2f
 800923c:	bfa2b444 	.word	0xbfa2b444
 8009240:	52defd9a 	.word	0x52defd9a
 8009244:	3fadde2d 	.word	0x3fadde2d
 8009248:	af749a6d 	.word	0xaf749a6d
 800924c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009250:	fe231671 	.word	0xfe231671
 8009254:	3fbc71c6 	.word	0x3fbc71c6
 8009258:	9998ebc4 	.word	0x9998ebc4
 800925c:	3fc99999 	.word	0x3fc99999
 8009260:	54442d18 	.word	0x54442d18
 8009264:	3ff921fb 	.word	0x3ff921fb
 8009268:	440fffff 	.word	0x440fffff
 800926c:	7ff00000 	.word	0x7ff00000
 8009270:	3fdbffff 	.word	0x3fdbffff
 8009274:	3ff00000 	.word	0x3ff00000
 8009278:	3ff2ffff 	.word	0x3ff2ffff
 800927c:	40038000 	.word	0x40038000
 8009280:	3ff80000 	.word	0x3ff80000
 8009284:	bff00000 	.word	0xbff00000
 8009288:	080097f8 	.word	0x080097f8
 800928c:	080097d8 	.word	0x080097d8

08009290 <fabs>:
 8009290:	ec51 0b10 	vmov	r0, r1, d0
 8009294:	ee10 2a10 	vmov	r2, s0
 8009298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800929c:	ec43 2b10 	vmov	d0, r2, r3
 80092a0:	4770      	bx	lr
	...

080092a4 <_init>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr

080092b0 <_fini>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr
